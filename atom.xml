<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kiro&#39;s Blog</title>
  
  <subtitle>请叫我星魂大人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-06T23:45:54.521Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kiro Summer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chinese-SRL</title>
    <link href="http://yoursite.com/2019/09/09/Chinese-SRL/"/>
    <id>http://yoursite.com/2019/09/09/Chinese-SRL/</id>
    <published>2019-09-09T05:23:53.000Z</published>
    <updated>2019-09-06T23:45:54.521Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="SRL" scheme="http://yoursite.com/tags/SRL/"/>
    
  </entry>
  
  <entry>
    <title>papers</title>
    <link href="http://yoursite.com/2019/08/23/papers/"/>
    <id>http://yoursite.com/2019/08/23/papers/</id>
    <published>2019-08-23T01:13:00.000Z</published>
    <updated>2019-08-23T06:38:32.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这个博客用来记录一些看过的论文</p><h2 id="Frustratingly-Easy-Neural-Domain-Adaptation"><a href="#Frustratingly-Easy-Neural-Domain-Adaptation" class="headerlink" title="Frustratingly Easy Neural Domain Adaptation"></a>Frustratingly Easy Neural Domain Adaptation</h2><p>主要任务：slot tagging, domain adaptation<br>Extension of feature argumentation</p><h2 id="Learning-Joint-Semantic-Parsers-from-Disjoint-Data"><a href="#Learning-Joint-Semantic-Parsers-from-Disjoint-Data" class="headerlink" title="Learning Joint Semantic Parsers from Disjoint Data"></a>Learning Joint Semantic Parsers from Disjoint Data</h2><h2 id="Instructions-for-EMNLP-IJCNLP-2019-Proceedings"><a href="#Instructions-for-EMNLP-IJCNLP-2019-Proceedings" class="headerlink" title="Instructions for EMNLP-IJCNLP 2019 Proceedings"></a>Instructions for EMNLP-IJCNLP 2019 Proceedings</h2><p>记录一下 EMNLP-2019的 camera ready的注意事项</p><ol><li>初次提交：页码；camera ready：不需要页码</li><li>作者不可变动</li><li>使用 pdflatex编译</li><li>abstract 不超过 200 words</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;这个博客用来记录一些看过的论文&lt;/p&gt;
&lt;h2 id=&quot;Frustratingly-Easy-Neural-Domain-Adaptatio
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Abstract-meaning-representations</title>
    <link href="http://yoursite.com/2019/06/27/Abstract-meaning-representations/"/>
    <id>http://yoursite.com/2019/06/27/Abstract-meaning-representations/</id>
    <published>2019-06-27T07:18:05.000Z</published>
    <updated>2019-07-14T03:42:25.834Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="AMR" scheme="http://yoursite.com/tags/AMR/"/>
    
  </entry>
  
  <entry>
    <title>End-to-End-SRL</title>
    <link href="http://yoursite.com/2019/05/30/End-to-End-SRL/"/>
    <id>http://yoursite.com/2019/05/30/End-to-End-SRL/</id>
    <published>2019-05-30T10:00:25.000Z</published>
    <updated>2019-08-10T10:12:40.158Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="SRL" scheme="http://yoursite.com/tags/SRL/"/>
    
  </entry>
  
  <entry>
    <title>Meta-Learning</title>
    <link href="http://yoursite.com/2019/01/21/Meta-Learning/"/>
    <id>http://yoursite.com/2019/01/21/Meta-Learning/</id>
    <published>2019-01-21T13:54:02.000Z</published>
    <updated>2019-01-22T07:35:24.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>This post is about my study on meta-learning and some related papers.<br><a id="more"></a></p><h1 id="Papers"><a href="#Papers" class="headerlink" title="Papers"></a>Papers</h1><h3 id="Natural-Language-to-Structured-Query-Generation-via-Meta-Learning"><a href="#Natural-Language-to-Structured-Query-Generation-via-Meta-Learning" class="headerlink" title="Natural Language to Structured Query Generation via Meta-Learning"></a>Natural Language to Structured Query Generation via Meta-Learning</h3><p>NAACL-2018的一篇短文。本文利用 domain-dependent relevance function将初始的学习问题转换为 few-shot meta-learning问题，将每一个 example视为一个 pseude-task。本文利用这种做法在 WikiSQL数据集上进行测试，性能提高了1.1%～5.4%。因为这也是一个 semantic任务，但是和传统的 semantic不太一样，所以我没有仔细阅读这篇文章，仅仅当作一个对 meta-learning的使用方法的一种科普。</p><h3 id="Meta-Multi-Task-Learning-for-Sequence-Learning"><a href="#Meta-Multi-Task-Learning-for-Sequence-Learning" class="headerlink" title="Meta Multi-Task Learning for Sequence Learning"></a>Meta Multi-Task Learning for Sequence Learning</h3><p>AAAI-2018的一篇长文。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;This post is about my study on meta-learning and some related papers.&lt;br&gt;
    
    </summary>
    
    
      <category term="Meta-Learning" scheme="http://yoursite.com/tags/Meta-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Study-on-Syntax-Aware-SRL</title>
    <link href="http://yoursite.com/2018/09/19/Study-on-Syntax-Aware-SRL/"/>
    <id>http://yoursite.com/2018/09/19/Study-on-Syntax-Aware-SRL/</id>
    <published>2018-09-19T06:27:18.000Z</published>
    <updated>2019-02-25T08:31:45.366Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pytorch-DeepATT</title>
    <link href="http://yoursite.com/2018/06/25/Pytorch-DeepATT/"/>
    <id>http://yoursite.com/2018/06/25/Pytorch-DeepATT/</id>
    <published>2018-06-25T10:02:57.000Z</published>
    <updated>2019-01-21T13:49:53.330Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Contact Kiro to get the key.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="SRL" scheme="http://yoursite.com/tags/SRL/"/>
    
  </entry>
  
  <entry>
    <title>Syntax-for-SRL</title>
    <link href="http://yoursite.com/2018/03/19/Syntax-for-SRL/"/>
    <id>http://yoursite.com/2018/03/19/Syntax-for-SRL/</id>
    <published>2018-03-19T13:37:25.000Z</published>
    <updated>2019-01-21T13:49:53.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>为了 EMNLP2018的工作, 尝试在 SRL的工作中加入句法的信息, 用以提升 SRL的性能.<br><a id="more"></a></p><h1 id="参考的工作"><a href="#参考的工作" class="headerlink" title="参考的工作"></a>参考的工作</h1><p>本工作参考 <a href="https://github.com/luheng/deep_srl" target="_blank" rel="noopener">deep_srl</a>. 工作参考了 deep_srl中的神经网络结构, 并且在开源代码的支持下, 很方便的从 theano切换到了 pytoch框架. 在使用 Pytorch重现论文工作的过程中, 还受到了作者的指导, 十分感谢.</p><h1 id="看过的论文："><a href="#看过的论文：" class="headerlink" title="看过的论文："></a>看过的论文：</h1><p><a href="https://homes.cs.washington.edu/~luheng/files/acl2017_hllz.pdf" target="_blank" rel="noopener">He Highway LSTM Deep SRL</a><br><a href="https://www.aclweb.org/anthology/D16-1007" target="_blank" rel="noopener">Position Encoding TPF2</a><br><a href="http://www.aclweb.org/anthology/D15-1206" target="_blank" rel="noopener">SDP</a><br><a href="https://arxiv.org/pdf/1712.01586.pdf" target="_blank" rel="noopener">Attention SRL</a><br><a href="http://www.aclweb.org/anthology/W17-4305" target="_blank" rel="noopener">SA-LSTM for SRL</a><br><a href="http://www.aclweb.org/anthology/P16-1113" target="_blank" rel="noopener">Dependency Path Embedding</a><br><a href="http://www.cs.upc.edu/~srlconll/st05/papers/intro.pdf" target="_blank" rel="noopener">CoNLL-2005 SRL Introduction</a></p><h1 id="显著性检验"><a href="#显著性检验" class="headerlink" title="显著性检验"></a>显著性检验</h1><p><a href="/documents/SRL/significance_test.txt">显著性检验 ensemble all vs He ensemble || single he vs TPF</a><br><a href="/documents/SRL/log_conll05_devel_baseline_and_tree_gru.txt">显著性检验 baseline vs TreeGRU</a><br><a href="/documents/SRL/log_devel_conll05_baseline_and_sdp.txt">显著性检验 baseline vs SDP</a><br><a href="/documents/SRL/log_devel_conll05_baseline_and_tpf.txt">显著性检验 baseline vs TPF</a><br><a href="/documents/SRL/log_devel_conll05_baseline_and_pattern.txt">显著性检验 baseline vs Pattern</a><br><a href="/documents/SRL/log_test_both_conll05_baseline_ours_and_treegru.txt">显著性检验 Test both baseline vs TreeGRU</a><br><a href="/documents/SRL/log_conll05_test_both_sdp.txt">显著性检验 Test both baseline vs SDP</a><br><a href="/documents/SRL/log_conll05_test_both_tpf.txt">显著性检验 Test both baseline vs TPF</a><br><a href="/documents/SRL/log_test_both_conll05_baseline_and_pattern.txt">显著性检验 Test both baseline vs Pattern</a><br><a href="/documents/SRL/log_test_both_treegru_elmo_compare_baseline_elmo.txt">显著性检验 Test both baseline w ELMo vs Tree-GRU w ELMo</a>  高<br><a href="/documents/SRL/log_test_both_sdp_elmo_compare_baseline_elmo.txt">显著性检验 Test both baseline w ELMo vs SDP w ELMo</a><br><a href="/documents/SRL/log_test_both_baseline_elmo_and_tpf_elmo.txt">显著性检验 Test both baseline w ELMo vs tpf w ELMo</a><br><a href="/documents/SRL/log_test_both_pattern_elmo_compare_baseline_elmo.txt">显著性检验 Test both baseline w ELMo vs pattern w ELMo</a><br><a href="/documents/SRL/log_test_both_baseline_pos_and_tpf_poe.txt">显著性检验 Test both baseline poe vs tpf poe</a><br><a href="/documents/SRL/log_test_both_baseline_poe_and_five_ensemble.txt">显著性检验 Test both baseline poe vs four methods poe</a><br><a href="/documents/SRL/log_test_both_tpf_poe_compare_four_methods_poe.txt">显著性检验 Test both TPF poe vs four methods poe</a> 有点高<br><a href="/documents/SRL/log_test_both_tpf_poe_and_tpf_elmo.txt">显著性检验 Test both baseline poe elmo vs tpf poe elmo</a><br><a href="/documents/SRL/log_test_both_baseline_elmo_and_tpf_elmo_append_five_methods.txt">显著性检验 Test both baseline poe elmo vs four methods ensemble elmo</a><br><a href="/documents/SRL/log_test_both_tpf_elmo_ensemble_compare_four_methods_elmo_ensemble.txt">显著性检验 Test both tpf elmo ensemble vs four methods elmo ensemble</a> 还算正常</p><h1 id="2018-8-4-记录一下-ELMo的相关实验"><a href="#2018-8-4-记录一下-ELMo的相关实验" class="headerlink" title="2018-8-4-记录一下 ELMo的相关实验"></a>2018-8-4-记录一下 ELMo的相关实验</h1><p>因为 ELMo的出现，DeepSRL的性能又被往前推了很多，所以我们尝试加入 ELMo，学习一下 ELMo的相关使用方法，顺便看看性能如何。</p><table><thead><tr><th><strong>Model</strong></th><th><strong>Path</strong></th><th><strong>Dev</strong></th><th><strong>Test WSJ</strong></th><th><strong>Test Brown</strong></th></tr></thead><tbody><tr><td>DeepATT (FFN)</td><td>论文结果</td><td>83.1</td><td>84.8</td><td>74.1</td></tr><tr><td>DeepSRL (re-impl)</td><td>141/data/qrxia/DeepSRL-w-ELMO/exp-baseline/</td><td>81.6</td><td>82.9</td><td>72.2</td></tr><tr><td>LSGN</td><td>论文结果</td><td>–</td><td>83.9</td><td>73.7</td></tr><tr><td>——-</td><td>——</td><td>——</td><td>——-</td><td>—–</td></tr><tr><td>DeepSRL w ELMo (offline)</td><td>143~/DeepSRL-w-ELMo/exp-baseline-w-ELMo-hdf5-full-formulation</td><td>85.5</td><td>86.3</td><td>74.7</td></tr><tr><td>DeepSRL w ELMo + syn label (offline)</td><td>126~/DeepSRL-w-ELMo/exp-baseline-w-ELMo-syn-label</td><td>85.6</td><td>86.0</td><td>77.1</td></tr><tr><td>DeepSRL w ELMo + TPF (offline)</td><td>126~/DeepSRL-w-ELMo/exp-baseline-w-ELMo-syn-label</td><td>85.3</td><td>86.9</td><td>76.8</td></tr><tr><td>LSGN w ELMo</td><td>论文结果</td><td>–</td><td>87.4</td><td>80.4</td></tr></tbody></table><h1 id="开始跑-CoNLL-2012的实验"><a href="#开始跑-CoNLL-2012的实验" class="headerlink" title="开始跑 CoNLL-2012的实验"></a>开始跑 CoNLL-2012的实验</h1><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th><th><strong>iter</strong></th></tr></thead><tbody><tr><td>141/data/qrxia/EMNLP2018/deep_syntactic_for_srl/exp-conll2012-baseline</td><td>baseline</td><td></td></tr></tbody></table><h1 id="分析-CoNLL2005-SRL结构和-句法结构之间的关系-2018-4-26"><a href="#分析-CoNLL2005-SRL结构和-句法结构之间的关系-2018-4-26" class="headerlink" title="分析 CoNLL2005 SRL结构和 句法结构之间的关系 (2018-4-26)"></a>分析 CoNLL2005 SRL结构和 句法结构之间的关系 (2018-4-26)</h1><p>同时分析了 predicate_argument 在句法树中的相对位置，这里的 predicate_argument 包含了”O”<br>详细的数据在 <a href="/documents/srl/predicate_argument_frequence.txt">这里</a></p><p>分析了 predicate_argument_pair (从predicate word 走到 argument word 是否可以在句法树中找到一条父子线) 和 head_modifier_pair之间的重合度。在一条父子线可以找到 predicate-argument<br>最高达到 <a href="/documents/srl/overlapping.txt">89.46%</a>， 意味着在所有的有效的 predicate_argument_pair当中，存在着 81.9%能够在 head_modifier中找到，即能够在句法树中找到。</p><h1 id="TPF2-的-Ensemble-5-fold-实验-2018-5-10"><a href="#TPF2-的-Ensemble-5-fold-实验-2018-5-10" class="headerlink" title="TPF2 的 Ensemble (5-fold)实验 (2018-5-10)"></a>TPF2 的 Ensemble (5-fold)实验 (2018-5-10)</h1><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th><th><strong>iter</strong></th></tr></thead><tbody><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_5fold_0_tpf2_model</td><td>5 fold 0</td><td>80.96%</td><td>417 / 500</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_5fold_1_tpf2_model</td><td>5 fold 1</td><td>80.71%</td><td>461 / 500</td></tr><tr><td>kiro@ubuntu14-04:~/Work/Semantic/deep_srl-master/conll05_5fold_2_tpf2_model</td><td>5 fold 2</td><td>80.98%</td><td>482 / 500</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_5fold_3_tpf2_model</td><td>5 fold 3</td><td>81.08%</td><td>491 / 500</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_5fold_4_tpf2_model</td><td>5 fold 4</td><td>80.93%</td><td>443 / 500</td></tr></tbody></table><h1 id="使用-Gold-syntax进行-TPF2-以及-SDP的实验-2018-5-10"><a href="#使用-Gold-syntax进行-TPF2-以及-SDP的实验-2018-5-10" class="headerlink" title="使用 Gold syntax进行 TPF2 以及 SDP的实验 (2018-5-10)"></a>使用 Gold syntax进行 TPF2 以及 SDP的实验 (2018-5-10)</h1><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th><th><strong>iter</strong></th></tr></thead><tbody><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_whole_tpf2_model_gold_syntax</td><td>gold syntax for tpf2</td><td>87.75%</td><td>443 / 500</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_whole_sdp_model_gold_syntax</td><td>gold syntax for sdp</td><td></td></tr></tbody></table><h1 id="根据新架构的实验-2018-5-1"><a href="#根据新架构的实验-2018-5-1" class="headerlink" title="根据新架构的实验 (2018-5-1)"></a>根据新架构的实验 (2018-5-1)</h1><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th><th><strong>iter</strong></th></tr></thead><tbody><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_train_model/</td><td>2w Train Baseline old architecture</td><td><strong>72.04%</strong></td><td></td></tr><tr><td>kiro@ubuntu14-04:~/Work/Semantic/deep_srl-master/exp-new-architecture-baseline/</td><td>2w Train Baseline</td><td><strong>71.39%</strong></td><td></td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/exp-new-architecture-baseline</td><td>2w Train Baseline in Server 141</td><td>71.35%</td><td></td></tr><tr><td>kiro@ubuntu14-04:~/Work/Semantic/deep_srl-master/exp-new-architecture-baseline-w-bucket</td><td>2w Train Baseline w bucket</td><td>71.11% (w viterbi 73.28%)</td><td>211 / 261</td></tr><tr><td>kiro@ubuntu14-04:~/Work/Semantic/deep_srl-master/exp-new-architecture-baseline-w-bucket-outer-random</td><td>2w Train Baseline w bucket and outer random</td><td>71.09%</td><td>220 / 270</td></tr><tr><td>kiro@ubuntu14-04:~/Work/Semantic/deep_srl-master/exp-new-architecture-baseline-w-bucket-viterbi</td><td>2w Train Baseline w bucket viterbi</td><td><strong>73.08%</strong></td><td>155 / 205</td></tr></tbody></table><ol><li>新的架构的模型的效果比不上之前的 Baseline， 因为新的架构有一个操作是 50次评价不更新， 就直接杀掉程序，所以效果并不好，停留在了 383次迭代 (71.59%，是old architecture的效果)</li><li>加入了 bucket，速度确实能够得到很大的提升，从原来的2min30s -&gt; 1min10s ，粗略估计，个人台式机 1080Ti</li><li>因为在 Train过程中，使用 viterbi解码的结果作为评判标准，从结果上来看，会损失 0.2%个点。</li><li>给 Bucket加入了桶之间的随机，发现结果还是和不加桶之间的随机差不多，基本一致。依旧不如 Baseline.</li></ol><h1 id="deep-srl-架构图"><a href="#deep-srl-架构图" class="headerlink" title="deep srl 架构图"></a>deep srl 架构图</h1><p><img src="/images/srl/highway-example.png" alt="deep_srl"></p><h1 id="我的实验的测试记录-2018-5-14"><a href="#我的实验的测试记录-2018-5-14" class="headerlink" title="我的实验的测试记录 (2018-5-14)"></a>我的实验的测试记录 (2018-5-14)</h1><table><thead><tr><th><strong>Path</strong></th><th><strong>内容</strong></th><th><strong>Dev Precision</strong></th><th><strong>Dev Recall</strong></th><th><strong>Dev FScore</strong></th><th><strong>Dev Comp.</strong></th><th><strong>Test WSJ Precision</strong></th><th><strong>Test WSJ Recall</strong></th><th><strong>Test WSJ FScore</strong></th><th><strong>Test WSJ Comp.</strong></th><th><strong>Test Brown Precision</strong></th><th><strong>Test Brown Recall</strong></th><th><strong>Test Brown FScore</strong></th><th>__Test Brown Comp.</th><th><strong>Test Both P</strong></th><th><strong>Test Both R</strong></th><th><strong>Test Both F</strong></th></tr></thead><tbody><tr><td>Paper</td><td>He <strong>POE</strong></td><td>83.1%</td><td>82.4%</td><td>82.7%</td><td>64.1%</td><td>85.0%</td><td>84.3%</td><td>84.6%</td><td>66.5%</td><td>74.9%</td><td>72.4%</td><td>73.6%</td><td>46.4</td><td>-</td><td>-</td><td><strong>83.2%</strong></td></tr><tr><td>Paper</td><td>He <strong>Single</strong></td><td>81.6%</td><td>81.6%</td><td>81.6%</td><td>62.3%</td><td>83.1%</td><td>83.0%</td><td>83.1%</td><td>64.3%</td><td>72.9%</td><td>71.4%</td><td>72.1%</td><td>44.8%</td><td>-</td><td>-</td><td>81.6%</td></tr><tr><td>141:…exp-conll05-syn-label-predict</td><td>syntactic label 测试</td><td>82.46%</td><td>82.85%</td><td>82.66%</td><td>63.55%</td><td>83.58%</td><td>83.70%</td><td>83.64%</td><td>65.45%</td><td>73.19%</td><td>71.98%</td><td>72.58%</td><td>45.65%</td><td>82.21%</td><td>82.13%</td><td>82.17%</td></tr><tr><td>n141:…exp-conll05-tpf2-predict</td><td>TPF2 测试</td><td>82.77%</td><td>82.20%</td><td>82.48%</td><td>63.21%</td><td>84.32%</td><td>83.78%</td><td>84.05%</td><td>65.86%</td><td>73.68%</td><td>72.03%</td><td>72.85%</td><td>45.52%</td><td>82.92%</td><td>82.21%</td><td>82.56%</td></tr><tr><td>n141:…exp-conll05-whole-tpf-syn-label</td><td>TPF2 and Syn label</td><td>82.39%</td><td>82.61%</td><td>82.50%</td><td>63.73%</td><td>84.04%</td><td>83.91%</td><td>84.98%</td><td>65.65%</td><td>73.58%</td><td>72.67%</td><td>73.12%</td><td>47.26%</td><td>82.65%</td><td>82.40%</td><td>82.53%</td></tr><tr><td>n143:…exp-conll05-tree-gru-predict</td><td>Tree-GRU 测试</td><td>82.71%</td><td>82.78%</td><td>82.75%</td><td>63.70%</td><td>83.92%</td><td>83.59%</td><td>83.75%</td><td>65.22%</td><td>72.90%</td><td>71.66%</td><td>72.27%</td><td>44.90%</td><td>82.46%</td><td>81.99%</td><td>82.22%</td></tr><tr><td>n143:…exp-conll05-whole-sdp-predict</td><td>SDP 测试</td><td>82.60%</td><td>82.47%</td><td>82.53%</td><td>64.01%</td><td>84.21%</td><td>83.86%</td><td>84.03%</td><td>65.86%</td><td>73.96%</td><td>72.03%</td><td>72.98%</td><td>45.27%</td><td>82.86%</td><td>82.28%</td><td>82.57%</td></tr><tr><td>n143:…exp-conll05-whole-pattern-predict</td><td>pattern</td><td>82.50%</td><td>82.47%</td><td>82.49%</td><td>62.93%</td><td>83.70%</td><td>83.84%</td><td>83.77%</td><td>65.26%</td><td>73.40%</td><td>72.49%</td><td>72.94%</td><td>46.14%</td><td>82.34%</td><td>82.32%</td><td>82.33%</td></tr><tr><td>n141:…exp-ensemble-scores-predict</td><td>syntactic label + TPF2</td><td>84.15%</td><td>83.58%</td><td>83.87%</td><td>65.67%</td><td>85.23%</td><td>84.93%</td><td>85.08%</td><td>67.65%</td><td>75.82%</td><td>73.91%</td><td>74.85%</td><td>48.76%</td><td>84.00%</td><td>83.45%</td><td>83.72%</td></tr><tr><td>n141:…exp-ensemble-scores-predict(no pattern)</td><td>ensemble all four</td><td>84.61%</td><td>84.03%</td><td>84.32%</td><td>66.72%</td><td>85.67%</td><td>85.37%</td><td>85.52%</td><td>68.43%</td><td>76.53%</td><td>74.41%</td><td>75.45%</td><td>49.13%</td><td><strong>84.47%</strong></td><td><strong>83.91%</strong></td><td><strong>84.19%</strong></td></tr><tr><td>n141:…exp-ensemble-scores-predict(all)</td><td>ensemble all five</td><td>84.57%</td><td>84.04%</td><td>84.30%</td><td>66.41%</td><td>85.79%</td><td>85.48%</td><td>85.63%</td><td>68.71%</td><td>76.26%</td><td>74.51%</td><td>75.37%</td><td>49.25%</td><td><strong>84.54%</strong></td><td><strong>84.01%</strong></td><td><strong>84.27%</strong></td></tr><tr><td>n143:…exp-conll05-whole-tpf2-gold-syntax-predict</td><td>tpf2 gold syntax</td><td>88.31%</td><td>88.41%</td><td>88.36%</td><td>72.91%</td><td>89.60%</td><td>89.62%</td><td>89.61%</td><td>75.05%</td><td>80.27%</td><td>79.24%</td><td>79.75%</td><td>55.72%</td><td>88.36%</td><td>88.23%</td><td>88.30%</td></tr><tr><td>n143:…conll05_5fold_0_tpf2_model</td><td>tpf2 5fold 0</td><td>81.95%</td><td>81.99%</td><td>81.97%</td><td>62.38%</td><td>83.55%</td><td>83.43%</td><td>83.49%</td><td>65.22%</td><td>73.02%</td><td>71.98%</td><td>72.50%</td><td>45.27%</td><td>82.15%</td><td>81.90%</td><td>82.03%</td></tr><tr><td>n143:…conll05_5fold_1_tpf2_model</td><td>tpf2 5fold 1</td><td>81.74%</td><td>81.33%</td><td>81.54%</td><td>61.67%</td><td>83.46%</td><td>82.94%</td><td>83.20%</td><td>64.25%</td><td>72.85%</td><td>71.11%</td><td>71.97%</td><td>44.53%</td><td>82.06%</td><td>81.35%</td><td>81.70%</td></tr><tr><td>kiro:…conll05_5fold_2_tpf2_model</td><td>tpf2 5fold 2</td><td>82.00%</td><td>81.86%</td><td>81.93%</td><td>62.35%</td><td>83.10%</td><td>83.02%</td><td>83.06%</td><td>64.50%</td><td>72.40%</td><td>70.74%</td><td>71.56%</td><td>44.15%</td><td>81.70%</td><td>81.38%</td><td>81.54%</td></tr><tr><td>n143:…conll05_5fold_3_tpf2_model</td><td>tpf2 5fold 3</td><td>82.31%</td><td>81.72%</td><td>82.01%</td><td>62.38%</td><td>83.46%</td><td>82.89%</td><td>83.17%</td><td>64.44%</td><td>73.77%</td><td>71.43%</td><td>72.58%</td><td>45.40%</td><td>82.19%</td><td>81.36%</td><td>81.77%</td></tr><tr><td>n143:…conll05_5fold_4_tpf2_model</td><td>tpf2 5fold 4</td><td>82.16%</td><td>81.51%</td><td>81.84%</td><td>61.61%</td><td>83.94%</td><td>83.15%</td><td>83.54%</td><td>64.95%</td><td>72.14%</td><td>70.28%</td><td>71.20%</td><td>43.91%</td><td>82.38%</td><td>81.43%</td><td>81.90%</td></tr><tr><td>n141:…exp-POE-tpf2-scores-predict</td><td>tpf2 POE</td><td>84.01%</td><td>83.39%</td><td>83.70%</td><td>65.09%</td><td>85.59%</td><td>85.01%</td><td>85.30%</td><td>68.05%</td><td>75.89%</td><td>73.37%</td><td>74.79%</td><td>48.13%</td><td>84.31%</td><td>83.50%</td><td>83.91%</td></tr></tbody></table><table><thead><tr><th><strong>Path</strong></th><th><strong>内容</strong></th><th><strong>Dev Precision</strong></th><th><strong>Dev Recall</strong></th><th><strong>Dev FScore</strong></th><th><strong>Dev Comp.</strong></th><th><strong>Test WSJ Precision</strong></th><th><strong>Test WSJ Recall</strong></th><th><strong>Test WSJ FScore</strong></th><th><strong>Test WSJ Comp.</strong></th><th><strong>Test Brown Precision</strong></th><th><strong>Test Brown Recall</strong></th><th><strong>Test Brown FScore</strong></th><th>__Test Brown Comp.</th><th><strong>Test Both P</strong></th><th><strong>Test Both R</strong></th><th><strong>Test Both F</strong></th></tr></thead><tbody><tr><td>n141:…exp-baseline-w-ELMo-hdf5-full-formulation</td><td>w ELMo</td><td>85.42%</td><td>85.56%</td><td>85.49%</td><td>68.04%</td><td>86.36%</td><td>86.21%</td><td>86.29%</td><td>69.43%</td><td>75.15%</td><td>74.32%</td><td>74.73%</td><td>48.13%</td><td>84.87%</td><td>84.63%</td><td>84.75%</td></tr><tr><td>n126:…exp-baseline-w-ELMo-syn-label</td><td>w ELMo + syn label</td><td>85.55%</td><td>85.66%</td><td>85.60%</td><td>68.17%</td><td>86.07%</td><td>85.97%</td><td>86.02%</td><td>68.96%</td><td>77.61%</td><td>76.57%</td><td>77.09%</td><td>51.12%</td><td>84.95%</td><td>84.71%</td><td>84.83%</td></tr><tr><td>85.36 n126:…exp-baseline-w-ELMo-TreeGRU</td><td>w ELMo + TreeGRU</td><td>85.74%</td><td>85.63%</td><td>85.69%</td><td>68.20%</td><td>86.16%</td><td>86.16%</td><td>86.16%</td><td>68.86%</td><td>77.85%</td><td>75.56%</td><td>76.69%</td><td>50.75%</td><td>85.07%</td><td>84.74%</td><td>84.90%</td></tr><tr><td>85.40 n126:…exp-baseline-w-ELMo-SDP</td><td>w ELMo + SDP</td><td>85.61%</td><td>85.66%</td><td>85.63%</td><td>68.75%</td><td>86.89%</td><td>86.67%</td><td>86.78%</td><td>70.17%</td><td>77.97%</td><td>76.25%</td><td>77.10%</td><td>52.36%</td><td>85.71%</td><td>85.27%</td><td>85.49%</td></tr><tr><td>n126:…exp-baseline-w-ELMo-TPF</td><td>w ELMo + TPF</td><td>85.45%</td><td>85.12%</td><td>85.28%</td><td>67.89%</td><td>87.03%</td><td>86.76%</td><td>86.89%</td><td>70.40%</td><td>77.63%</td><td>75.88%</td><td>76.75%</td><td>51.62%</td><td>85.79%</td><td>85.30%</td><td>85.55%</td></tr><tr><td>n126:…exp-baseline-w-ELMo-TPF-Gold-syntax</td><td>w ELMo + TPF Gold syntax</td><td>90.14%</td><td>89.54%</td><td>89.84%</td><td>75.40%</td><td>91.07%</td><td>91.04%</td><td>91.06%</td><td>77.48%</td><td>82.30%</td><td>82.04%</td><td>82.17%</td><td>59.45%</td><td>89.90%</td><td>89.84%</td><td>89.87%</td></tr><tr><td>n126:…exp-baseline-w-ELMo-pattern</td><td>w ELMo + pattern</td><td>85.53%</td><td>85.44%</td><td>85.49%</td><td>68.17%</td><td>86.51%</td><td>86.31%</td><td>86.41%</td><td>69.62%</td><td>77.36%</td><td>76.44%</td><td>76.89%</td><td>51.49%</td><td>85.29%</td><td>84.98%</td><td>85.13%</td></tr><tr><td>n141:…exp-ensemble-scores-predict</td><td>ensemble four w elmo TPF</td><td>86.53%</td><td>86.07%</td><td>86.30%</td><td>69.74%</td><td>87.62%</td><td>87.31%</td><td>87.46%</td><td>71.52%</td><td>78.81%</td><td>77.40%</td><td>78.10%</td><td>53.48%</td><td>86.46%</td><td>85.98%</td><td>86.22%</td></tr><tr><td>n141:…exp-ensemble-scores-predict</td><td>ensemble TPF + elmo TPF</td><td>86.32%</td><td>85.74%</td><td>86.03%</td><td>69.33%</td><td>87.51%</td><td>87.02%</td><td>87.26%</td><td>71.12%</td><td>78.55%</td><td>76.53%</td><td>77.52%</td><td>52.49%</td><td>86.33%</td><td>85.62%</td><td>85.97%</td></tr><tr><td>n126:…exp-baseline-5-fold-0</td><td>baseline 5fold 0</td><td>80.68%</td><td>80.55%</td><td>80.62%</td><td>60.41%</td><td>82.33%</td><td>82.29%</td><td>82.31%</td><td>62.94%</td><td>70.79%</td><td>69.13%</td><td>69.95%</td><td>41.67%</td><td>80.82%</td><td>80.53%</td><td>80.67%</td></tr><tr><td>n126:…exp-baseline-5-fold-1</td><td>baseline 5fold 1</td><td>81.08%</td><td>80.64%</td><td>80.86%</td><td>61.18%</td><td>82.41%</td><td>81.83%</td><td>82.12%</td><td>62.31%</td><td>72.30%</td><td>70.97%</td><td>71.63%</td><td>44.90%</td><td>81.07%</td><td>80.37%</td><td>80.72%</td></tr><tr><td>n126:…exp-baseline-5-fold-2</td><td>baseline 5fold 2</td><td>81.08%</td><td>80.40%</td><td>80.74%</td><td>61.11%</td><td>82.61%</td><td>81.89%</td><td>82.24%</td><td>62.41%</td><td>71.04%</td><td>69.41%</td><td>70.21%</td><td>41.04%</td><td>81.08%</td><td>80.21%</td><td>80.64%</td></tr><tr><td>n126:…exp-baseline-5-fold-3</td><td>baseline 5fold 3</td><td>80.61%</td><td>80.41%</td><td>80.51%</td><td>59.98%</td><td>82.34%</td><td>81.94%</td><td>82.14%</td><td>62.46%</td><td>72.42%</td><td>69.73%</td><td>71.05%</td><td>43.16%</td><td>81.05%</td><td>80.31%</td><td>80.68%</td></tr><tr><td>n126:…exp-baseline-5-fold-4</td><td>baseline 5fold 4</td><td>80.41%</td><td>80.81%</td><td>80.61%</td><td>60.16%</td><td>81.81%</td><td>81.44%</td><td>81.62%</td><td>61.65%</td><td>71.07%</td><td>69.50%</td><td>70.27%</td><td>40.92%</td><td>80.39%</td><td>79.84%</td><td>80.11%</td></tr><tr><td>n126:…exp-baseline-POE</td><td>baseline 5fold</td><td>83.05%</td><td>82.47%</td><td>82.76%</td><td>64.16%</td><td>84.63%</td><td>84.00%</td><td>84.31%</td><td>66.36%</td><td>74.90%</td><td>72.12%</td><td>73.48%</td><td>46.14%</td><td>83.36%</td><td>82.41%</td><td>82.88%</td></tr><tr><td>n126:…exp-ensemble</td><td>baseline 5fold ensemble baseline ELMo</td><td>86.26%</td><td>86.16%</td><td>86.21%</td><td>69.55%</td><td>87.20%</td><td>86.79%</td><td>86.99%</td><td>70.80%</td><td>77.67%</td><td>75.75%</td><td>76.70%</td><td>50.37%</td><td>85.94%</td><td>85.31%</td><td>85.63%</td></tr><tr><td>n126:…exp-ensemble-five-2…</td><td>ensemble 5 methods w ELMo 3</td><td>86.99%</td><td>86.92%</td><td>86.95%</td><td>71.09%</td><td>87.95%</td><td>87.64%</td><td><strong>87.80%</strong></td><td>72.24%</td><td>79.65%</td><td>78.04%</td><td>78.84%</td><td>53.23%</td><td>86.87%</td><td>86.37%</td><td>86.62%</td></tr></tbody></table><p><strong>备注</strong>：ensemble w elmo TPF: 0.5 0.1 0.1 0.1 0.1 0.1</p><p>past process results.<br>|n126:…exp-ensemble-five-… |ensemble 5 methods w ELMo|87.07%|86.77%|86.92%|70.75%|87.97%|87.55%|87.76%|72.13%|79.56%|77.95%|78.75%|53.48%|86.87%|86.27%|86.57%|<br>|n126:…exp-ensemble-five-2… |ensemble 5 methods w ELMo 2|86.95%|86.89%|86.92%|70.84%|87.91%|87.58%|87.74%|72.11%|79.52%|78.14%|78.82%|53.61%|86.80%|86.31%|86.55%|</p><h3 id="按照-Dev试试调整一下-ensemble的系数"><a href="#按照-Dev试试调整一下-ensemble的系数" class="headerlink" title="按照 Dev试试调整一下 ensemble的系数"></a>按照 Dev试试调整一下 ensemble的系数</h3><table><thead><tr><th></th><th><strong>Baseline 5fold ensemble ELMo</strong></th><th><strong>TPF 5fold ensemble ELMo</strong></th></tr></thead><tbody><tr><td>0.1  0.5</td><td>86.21%  / 86.99%</td><td>86.03%  /  87.26%</td></tr><tr><td>0.1  0.8</td><td>85.93%  / 86.99%</td><td>85.92%  /87.28%</td></tr><tr><td>0.15 0.8</td><td>86.09%  / 87.05%</td><td>86.11%  /  87.29%</td></tr></tbody></table><h1 id="编写论文使用到的一些技巧"><a href="#编写论文使用到的一些技巧" class="headerlink" title="编写论文使用到的一些技巧"></a>编写论文使用到的一些技巧</h1><h3 id="vim-拼写检查"><a href="#vim-拼写检查" class="headerlink" title="vim 拼写检查"></a>vim 拼写检查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:set spell spelllang=en_us</span><br><span class="line">:set nospell</span><br></pre></td></tr></table></figure><h1 id="使用原版代码跑出来的实验结果"><a href="#使用原版代码跑出来的实验结果" class="headerlink" title="使用原版代码跑出来的实验结果"></a>使用原版代码跑出来的实验结果</h1><p>测试集分为 WSJ, Brown, -Combined-</p><table><thead><tr><th><strong>路径</strong></th><th><strong>说明</strong></th><th><strong>Dev FScore</strong></th><th><strong>Dev FScore w constrain</strong></th><th><strong>Test FScore</strong></th><th><strong>Test FScore w constrain</strong></th></tr></thead><tbody><tr><td>–</td><td>论文结果</td><td>大约80.1%, 从图表看出,并未直接给出结果</td><td>81.6%</td><td></td><td>83.1%/72.1%/81.6%</td></tr><tr><td>gpu-no-1:~/deep_srl-master/conll05_model</td><td>代码结果</td><td>81.01%</td><td>82.08%</td><td></td><td></td></tr><tr><td>ubuntu14-04:~/Work/Semantic/deep_srl-master/conll05_model</td><td>Pytorch重现结果</td><td>80.47%</td><td>81.53%</td><td></td><td>83.19%/71.57%/81.64%</td></tr></tbody></table><h1 id="进行句法信息第一步-Biaffine-隐层信息"><a href="#进行句法信息第一步-Biaffine-隐层信息" class="headerlink" title="进行句法信息第一步: Biaffine 隐层信息"></a>进行句法信息第一步: Biaffine 隐层信息</h1><h2 id="5-fold获取PTB-Train的自动句法结果-2018-3-22"><a href="#5-fold获取PTB-Train的自动句法结果-2018-3-22" class="headerlink" title="5-fold获取PTB Train的自动句法结果 (2018-3-22)"></a>5-fold获取PTB Train的自动句法结果 (2018-3-22)</h2><table><thead><tr><th><strong>路径</strong></th><th><strong>n-fold</strong></th><th><strong>Dev FScore (UAS/LAS)</strong></th><th><strong>Test FScore (UAS/LAS)</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/BiaffineParser-pytorch-new/experiments/ptb_model_fold_0</td><td>0-7965</td><td>95.51%/93.60%</td><td>95.54%/93.54%</td></tr><tr><td>gpu-no-1:~/BiaffineParser-pytorch-new/experiments/ptb_model_fold_1</td><td>7966-15931</td><td>95.59%/93.77%</td><td>95.61%/93.68%</td></tr><tr><td>gpu-no-1:~/BiaffineParser-pytorch-new/experiments/ptb_model_fold_2</td><td>15932-23897</td><td>95.39%/93.46%</td><td>95.44%/93.50%</td></tr><tr><td>gpu-no-1:~/BiaffineParser-pytorch-new/experiments/ptb_model_fold_3</td><td>23898-31863</td><td>95.42%/93.43%</td><td>95.36%/93.36%</td></tr><tr><td>gpu-no-1:~/BiaffineParser-pytorch-new/experiments/ptb_model_fold_4</td><td>31864-39831</td><td>95.54%/93.71%</td><td>95.37%/93.40%</td></tr></tbody></table><p>其中: Test数据集是5-fold当中, 剩下的那一份数据. 在实验的合并阶段, 发现 Biaffine代码的输出中包含了 “unk”字段替换了原先的字段, 词性部分也是省略了一列. 所以利用原本的 train数据, 和生成的自动弧和标签的 train数据进行了合并的操作, 进行接下来的5-fold模型的训练. 另外一个小的测试: Train集合的封闭测试: UAS 98.25%</p><p>接下来的工作是: 抽取语料中句子对应的 LSTM output.</p><h2 id="分析CONLL05-SRL的数据和-PTB-句法的数据构成关系"><a href="#分析CONLL05-SRL的数据和-PTB-句法的数据构成关系" class="headerlink" title="分析CONLL05 SRL的数据和 PTB 句法的数据构成关系"></a>分析CONLL05 SRL的数据和 PTB 句法的数据构成关系</h2><ul><li>CONLL05 SRL: Train 36085</li><li>CONLL05 SRL: Dev 1240</li><li>CONLL05 SRL: Test Brown/WSJ/Total 361/2156/2517</li><li>PTB: Train 39832</li><li>PTB: Dev 1700</li><li>PTB: Test 2416</li></ul><p>其中, Train训练集合: PTB完全包含了 SRL; Dev集合和 PTB <strong>完全没有</strong> 重合的部分; Test集合中 WSJ在 PTB的 Test里面可以完全找到, 但是 Brown完全没有.<br>PTB 句法:2-21 train; 22 devel; 23 test; (2018-5-4)<br>因为句法的数据中不包含 wsj24的部分，所以只能通过使用 stanford parser进行获取，经过2个小时的研究，终于给跑出来了。记录相关日志如下：</p><ul><li>在本机上进行 stanford parser的运行，路径：kiro@ubuntu14-04:~/Work/DependencyParsing/stanford-parser-full-2013-11-12</li><li>执行的命令是：java -cp “*” -mx1g edu.stanford.nlp.trees.EnglishGrammaticalStructure -basic -keepPunct -conllx -treeFile wsj_24.mrg &gt; wsj_24.conll.punct</li><li>需要注意的是，PTB的数据文件是 LDC1999T42，而不是 PennTreenbankv2</li></ul><h3 id="Train-Test-wsj的自动-dep和-Biaffine-LSTM-Representation的获取-2018-3-24"><a href="#Train-Test-wsj的自动-dep和-Biaffine-LSTM-Representation的获取-2018-3-24" class="headerlink" title="Train, Test-wsj的自动 dep和 Biaffine LSTM Representation的获取 (2018-3-24)"></a>Train, Test-wsj的自动 dep和 Biaffine LSTM Representation的获取 (2018-3-24)</h3><p>因为在上述的分析中, SRL CONLL05的 Train (PTB Train 5-fold model) 和 Test-wsj (PTB Train model) 是 PTB的子集, 所以可以从 PTB的子集中进行抽取, 抽取的数据存在以下目录:</p><ul><li>autodep: gpu-no-1:~/EMNLP2018/PTB_CONLL05_analysis/conll05_autodep/</li><li>lstm representation: gpu-no-1:~/EMNLP2018/PTB_CONLL05_analysis/conll05_biaffine_lstm_representation/</li></ul><h3 id="处理-CONLL05的数据-Dev-Test-brown-2018-3-25"><a href="#处理-CONLL05的数据-Dev-Test-brown-2018-3-25" class="headerlink" title="处理 CONLL05的数据 Dev, Test-brown (2018-3-25)"></a>处理 CONLL05的数据 Dev, Test-brown (2018-3-25)</h3><ol><li>首先抽取 Dev, Test-brown的文本数据</li><li>利用 Stanford POSTagger-2017-06-09 + models/english-bidirectional-distsim.tagger 进行词性标注</li><li>利用获取到的词性, 进行 BiaffineParser (PTB Train model)的分析, 得到: 自动依存句法+LSTM Representation</li></ol><p>数据保存在如上路径</p><h2 id="开始跑-Biaffine的-LSTM-句法信息的实验-2018-3-26"><a href="#开始跑-Biaffine的-LSTM-句法信息的实验-2018-3-26" class="headerlink" title="开始跑 Biaffine的 LSTM 句法信息的实验 (2018-3-26)"></a>开始跑 Biaffine的 LSTM 句法信息的实验 (2018-3-26)</h2><p>读取 Biaffine的 LSTM的代码已经书写完毕, 并且添加了检查功能, 确保读取的 Biaffine LSTM Out能和 CONLL05的句子对应上.现在开始跑实验, 但是目前有一个问题就是 <strong>Biaffine LSTM维度太高:800</strong> 我们可能需要利用 Linear Projection将它降维, 变成一个合理的维度, 就像张老师的论文一样. 但是从目前的结果来看, 出现了一个非常奇怪的现象: Train集合可以和往常一样正常收敛, 但是 Dev上的效果至始至终没有太大的变化, 暂时不知道是什么原因导致的, 正在分析原因. (目前打算将 800维度降维至 200)</p><h3 id="直接利用-Biaffine-LSTM-output-Softmax进行的实验-2018-3-27"><a href="#直接利用-Biaffine-LSTM-output-Softmax进行的实验-2018-3-27" class="headerlink" title="直接利用 Biaffine LSTM output + Softmax进行的实验 (2018-3-27)"></a>直接利用 Biaffine LSTM output + Softmax进行的实验 (2018-3-27)</h3><p>实验结果表示, 结果很差, 从输出的结果 (经过了log_softmax)来看, 就是 O 所对应的位置的得分最高, 为-0.*左右, 其他的几乎全部集中在-4及以下, 这是一个很奇怪的现象. <strong>按道理:</strong> 应该Train集合能够收敛 loss, Dev的结果不应该是这么差, 正在排查原因.<br>发现了一个非常诡异的现象:</p><ol><li>我直接输出了 LSTM的浮点数信息, 但是居然在文件中 egrep不到???查到了一个可能的问题,  Biaffine LSTM的文件中, 有小数点后18位, 但是只保留了11位, 在numpy读取的时候. 乌龙: 其实是一样的, 只不过是输出精度的问题.原本我以为我想错了, 可是 Batch之后输出出来在 LSTM文件中还是查找不到??</li><li>第二个问题: 为什么在连续的 LSTM Out中, 会有 全是零的存在? 原来是自己制造的乌龙: LSTM Minus</li></ol><p><strong>好了</strong> 哈哈哈! 为什么这么说呢, 因为在 Dev的封测上面, 利用 Biaffine 的 LSTM Output 能够达到99.84%的 F值 (貌似还在继续上涨, 直接kill掉, 目标不是这个), 算是可以了. 接下来就是用 Train训练集试试看, 看看结果如何! 至于是怎么调试好的, <strong>尘归尘, 土归土</strong>:)<br>悲伤, Train集合训练, 在 Dev上面还是不行. 但是有一个非常奇怪的地方: 在利用 Train封闭测试得到的 LSTM Output上得到的模型, Dev目前可以达到 58% FScore; 但是切换到 5-fold的Train LSTM Output, Dev就不可以了, FScore还是只有0.几.</p><h3 id="利用-TreeLSTM-2018-3-30"><a href="#利用-TreeLSTM-2018-3-30" class="headerlink" title="利用 TreeLSTM (2018-3-30)"></a>利用 TreeLSTM (2018-3-30)</h3><p>在张梅山老师的代码基础之上, 需要稍做修改就可以进行我们的 SRL的实验. 目前采用的方式是直接利用 TreeLSTM的输出替换掉原本 Model的输出, 直接进行实验.<br>实验记录:</p><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th></tr></thead><tbody><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_tree_lstm_model</td><td>TreeLSTM + 2 Highway BiLSTM</td><td>因为设备不够用, 已经 kill, 效果也不行</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_tree_lstm_model</td><td>TreeLSTM + 4 Highway BiLSTM</td><td>79.36%, 运行了268次迭代, 设备不够用, 已经kill</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_tree_lstm_4_layers_model</td><td>TreeLSTM + 8 Highway BiLSTM</td></tr></tbody></table><h3 id="利用-Syntactic-Label-2018-3-31"><a href="#利用-Syntactic-Label-2018-3-31" class="headerlink" title="利用 Syntactic Label (2018-3-31)"></a>利用 Syntactic Label (2018-3-31)</h3><p>直接利用 Biaffine Parser的句法输出结果, 以 Embedding的形式加入到 神经网络的输入中, 以这种最简单直接的方式试一试效果.</p><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th></tr></thead><tbody><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_syn_label_model/</td><td>Input Embedding + auto syntactic label embedding</td><td><strong>81.75%</strong></td></tr></tbody></table><p>从以上的结果来看, 即便是这样子基本的句法信息, 也是能够产生很好的效果, 这里的 FScore还是w/o constrain</p><h3 id="利用-TPF2-2018-4-26"><a href="#利用-TPF2-2018-4-26" class="headerlink" title="利用 TPF2 (2018-4-26)"></a>利用 TPF2 (2018-4-26)</h3><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th></tr></thead><tbody><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_whole_tpf2_model/</td><td>Input Embedding + tpf2 embedding</td><td><strong>81.57%</strong></td></tr></tbody></table><h3 id="利用-SDP-2018-4-26"><a href="#利用-SDP-2018-4-26" class="headerlink" title="利用 SDP (2018-4-26)"></a>利用 SDP (2018-4-26)</h3><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th></tr></thead><tbody><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_whole_sdp_model</td><td>SDP</td><td><strong>81.68%</strong></td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_whole_sdp_model_gold_syntax</td><td>SDP with gold syntax</td></tr></tbody></table><h3 id="利用-Pattern的实验-2018-5-7"><a href="#利用-Pattern的实验-2018-5-7" class="headerlink" title="利用 Pattern的实验 (2018-5-7)"></a>利用 Pattern的实验 (2018-5-7)</h3><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th></tr></thead><tbody><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/exp-conll05-whole-pattern</td><td>Input + Pattern representation</td><td><strong>81.57%</strong></td></tr></tbody></table><h3 id="加入-Bucket"><a href="#加入-Bucket" class="headerlink" title="加入 Bucket"></a>加入 Bucket</h3><p>为了加速的效果, 加入 Bucket, 1w Train的速度由 5:50 降低到了 4:46</p><h2 id="因为速度的问题-现在开始-2w-Train的实验"><a href="#因为速度的问题-现在开始-2w-Train的实验" class="headerlink" title="因为速度的问题, 现在开始 2w Train的实验"></a>因为速度的问题, 现在开始 2w Train的实验</h2><h3 id="Baseline以及其他的一些实验-2018-4-6"><a href="#Baseline以及其他的一些实验-2018-4-6" class="headerlink" title="Baseline以及其他的一些实验 (2018-4-6)"></a>Baseline以及其他的一些实验 (2018-4-6)</h3><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th></tr></thead><tbody><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_train_model/</td><td>2w Train Baseline</td><td><strong>72.04%</strong></td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_tpf2_model</td><td>2w Train with TPF2</td><td><strong>75.92%</strong></td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_only_syn_label_model</td><td>2w Train with syntactic label</td><td><strong>74.31%</strong></td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_syn_label_model</td><td>2w Train with syntactic label + PE</td><td>73.89%</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_syn_label_tree_lstm_model</td><td>2w Train with syntactic label + TreeLSTM</td><td><strong>75.87%</strong></td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/exp-conll05-2w-pattern</td><td>2w Train with Pattern</td><td><strong>76.50%</strong></td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_sdp_model</td><td>2w Train with SDP</td><td><strong>76.76%</strong></td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_tree_lstm_model</td><td>2w Train with syntactic TreeLSTM</td><td>72.02%</td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_highway_tree_lstm_mean_model</td><td>2w Train with syntactic Highway TreeLSTM</td><td>72.00%</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_tree_lstm_model</td><td>2w Train with syntactic TreeLSTM w sorted training corpus</td><td>71.74%</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_pool_tree_lstm_model</td><td>2w Train with syntactic TreeLSTM (max pooling node forward)</td><td>72.35%</td></tr></tbody></table><h3 id="跟着张老师做实验-from-2018-4-11"><a href="#跟着张老师做实验-from-2018-4-11" class="headerlink" title="跟着张老师做实验 (from 2018-4-11)"></a>跟着张老师做实验 (from 2018-4-11)</h3><p>现在的工作转向于试图改变 Baseline的结构, 从而获取更快的速度.</p><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th></tr></thead><tbody><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_train_model/</td><td>2w Train Baseline</td><td><strong>72.04%</strong></td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_baseline_highway_mlp_output_model</td><td>2w Train Baseline + mlp + output</td><td><strong>72.24%</strong></td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_baseline_minus_model</td><td>2w Train Baseline-Minus, 取消 predicate embedding</td><td>54.31%</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_baseline_concate_minus_model</td><td>同line3 + output layer concate(h_i - h_p, hi)</td><td>56.24%</td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_minus_concate_nonlinear_model</td><td>同line4 + nonlinear layer</td><td>66.76%</td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_concate_minus_predicate_model</td><td>同line3 + output layer concate(h_i - h_p, hi, predicate_embedding)</td><td>56.09%</td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_baseline_m_biaffine_model</td><td>同line3 + output layer Biaffine Layer</td><td>67.80%</td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/exp-conll05-2w-biaffine-sentence-level-predicates</td><td>sentence level predicates + Biaffine Layer</td><td>67.20% 待续</td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/exp-conll05-2w-biaffine-layer-3-mlp/conll05_model</td><td>同2 + 3 layer mlp + Biaffine Layer</td><td>65.32%</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/exp-conll05-2w-biaffine-layer</td><td>2w Train Biaffine Layer w baseline input MLP size 100</td><td>71.96%</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/exp-conll05-2w-biaffine-layer-200</td><td>2w Train Biaffine Layer w baseline input w MLP size 200</td><td>71.14%</td></tr></tbody></table><p>实验结果：</p><ol><li>在 Baseline的 highway后加了一层 Linear Layer。 效果稍有提高 + 0.2%， 但是如果是全部数据，实验结果就不确定了，全部数据可能会有补缺短板的功能。</li><li>尝试着简化输入，input layer仅仅是 word embedding：1) h_i - h_p : 54.31; 2) concate(h_i - h_p, h_i) 56.24%; 3) concate(h_i - h_p, h_i, i_predicate_embedding) : 56.09%。通过取消 softmax layer，改换以上三种方式的预测 layer，结果都不如人意</li><li>concate(h_i - h_p, h_i) + NonLinear Layer + Softmax Layer， 效果接近于 MLP + Biaffine Layer 66.76% vs 67.80%</li><li>Baseline 和 Baseline + Biaffine Layer的效果基本一致：72.04% vs 71.96%, 相差 0.9%； 但是在全部数据上，Biaffine的效果要比 Baseline高0.3%. 可能是数据量的原因？导致Biaffine的效果不能很好地学习到？</li><li>尝试通过增加 MLP的层数来模拟 Highway的层数的功能，实验效果并不好：65.32% 相比较于一层 MLP + Biaffine：67.80%</li><li>增加 MLP的 HiddenSize的实验也是没有明显效果的：71.14%</li><li>尝试通过加入 sentence level predicate embedding + Highway + MLP + Biaffine 但是还是不行：67.20%</li></ol><p><a href="/documents/srl/label_freq.txt">conll05-label分布</a></p><h3 id="调查105个-SRL-Label是什么意思-2018-4-13"><a href="#调查105个-SRL-Label是什么意思-2018-4-13" class="headerlink" title="调查105个 SRL Label是什么意思? (2018-4-13)"></a>调查105个 SRL Label是什么意思? (2018-4-13)</h3><p>O:    不在语义框架之内<br>V, A0, A1, A2, A3, A4, A5<br>AM-LOC, AM-MNR, AM-TMP, AM-NEG, AM-MOD, AM-DIS, AM-EXT, AM-ADV, AM-PNC, AM-DIR, AM-PRD, AM-CAU, AM-REC, AM-TM, AM, AA<br>其中, 以上每一个标签都有两个组合 <strong>R-*</strong>, <strong>C-*</strong>, 例如: R-AM-LOC, C-AM-LOC…, 分别表示 <strong>r</strong>eference, <strong>c</strong>ontinuation, 表示对*的一种引用; 这种组合可以看成是一个独立的标签<br>另外: 有两个标签可以与以上进行组合, <strong>B, I</strong>: <strong>b</strong>egin, <strong>i</strong>nternal, 每一个标签都能有 2种组合 (B-*, I-*) 的可能. B, I的作用不言而喻<br><img src="/images/srl/srl-c.png" alt="一个C-*的列子"></p><h4 id="一个奇怪的现象-2018-4-16"><a href="#一个奇怪的现象-2018-4-16" class="headerlink" title="一个奇怪的现象 (2018-4-16)"></a>一个奇怪的现象 (2018-4-16)</h4><p>在李老师发现的他跑的实验会比我跑的实验少一个点的情况下, 我尝试了恢复原本的代码, 一块一块的恢复, 发现最终的问题居然出现在 hidden_drop初始化的部分, 简直匪夷所思.<br>不过我猜想这个对最终的实验结果应该不会有影响.</p><h1 id="这个工作的心得："><a href="#这个工作的心得：" class="headerlink" title="这个工作的心得："></a>这个工作的心得：</h1><p>总的来讲，这个工作旨在利用句法的信息来帮助语义角色标注的工作。<br>在这里，我主要记录一下自己写论文时候的一些想法。</p><ol><li>于我而言，写论文中最难的部分莫过于 abstract, introduction, related work and conclusion.</li><li>对于 abstract，是论文中很重要的部分：总结论文的工作，给出“摘要”</li><li>对于 introduction，介绍任务，简单介绍本文的动机，任务的发展呢</li><li>对于 related work，充分体现了自己对于领域内他人工作的熟知程度，更加的体现了自己在阅读论文中记录的多少。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;为了 EMNLP2018的工作, 尝试在 SRL的工作中加入句法的信息, 用以提升 SRL的性能.&lt;br&gt;
    
    </summary>
    
    
      <category term="SRL" scheme="http://yoursite.com/tags/SRL/"/>
    
  </entry>
  
  <entry>
    <title>KAMR开发记录</title>
    <link href="http://yoursite.com/2018/01/31/KAMR%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/01/31/KAMR开发记录/</id>
    <published>2018-01-31T05:42:52.000Z</published>
    <updated>2019-01-21T13:49:53.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>新开一篇博客记录一下AMR Parser (KAMR)的开发经过<br><a id="more"></a></p><h1 id="FCL相关工作"><a href="#FCL相关工作" class="headerlink" title="FCL相关工作"></a>FCL相关工作</h1><h2 id="AMR-LDC2014T12近几年来的实验结果"><a href="#AMR-LDC2014T12近几年来的实验结果" class="headerlink" title="AMR LDC2014T12近几年来的实验结果"></a>AMR LDC2014T12近几年来的实验结果</h2><p>整理一下 AMR最近几年来的实验结果：</p><table><thead><tr><th><strong>Data</strong></th><th><strong>Parser</strong></th><th><strong>Dev</strong></th><th><strong>Test</strong></th></tr></thead><tbody><tr><td>LDC2014T12</td><td>JAMR</td><td>–</td><td>58.2%</td></tr><tr><td>LDC2014T12</td><td>CAMR</td><td>–</td><td>66.5%</td></tr><tr><td>LDC2014T12</td><td>Zhou et al., 2016 EMNLP</td><td>–</td><td>66%</td></tr><tr><td>LDC2014T12</td><td>Wang et al., 2017 EMNLP</td><td>–</td><td>68.07%</td></tr><tr><td>LDC2014T12</td><td>SBMT (Pust, 2015 ACL)</td><td>–</td><td>67%</td></tr></tbody></table><h2 id="2-18-2-5"><a href="#2-18-2-5" class="headerlink" title="2-18-2-5"></a>2-18-2-5</h2><p>有一个很奇怪的现象, 利用 Biaffine LSTM Output充当上下文信息和利用产自于 Concept Identification LSTM Output, 虽然在给定 JAMR的 Concepts的基础之上, 两者的效果相差无几, 但是当使用预测得到的 Concepts的时候, 利用 Concept LSTM的效果要明显优于 Biaffine的 LSTM的结果.</p><h2 id="2018-2-3"><a href="#2018-2-3" class="headerlink" title="2018-2-3"></a>2018-2-3</h2><p>结论: 发现, 预测 Concept Label和 Concept共享参数是不会有什么明显的影响的. 试一试换一下梯度更新的算法? Adam?</p><h2 id="2018-2-2"><a href="#2018-2-2" class="headerlink" title="2018-2-2"></a>2018-2-2</h2><p>通过实验发现，Biaffine LSTM Output还是有作用的</p><table><thead><tr><th>____</th><th><strong>Concept Label Precision Compared w JAMR</strong></th><th><strong>Concept Precision Compared w JAMR</strong></th><th><strong>Path</strong></th></tr></thead><tbody><tr><td>w/o Biaffine</td><td>27089 / 29269 = 92.552</td><td>13214 / 16499 = 80.09</td><td></td></tr><tr><td>w Biaffine (Concept Label)</td><td>27115 / 29269 = 92.641</td><td>13294 / 16337 = 81.374</td><td>n174:~/KAMR/v1.4.28.7.3-exp</td></tr><tr><td>w Biaffine (Concept Label + Identification)</td><td>27089 / 29269 = 92.552</td><td>13374 / 16517 = 80.971</td><td></td></tr><tr><td>w Biaffine (Concept Label + Identification + concept table window 5)</td><td>27060 / 29269 = 92.453</td><td>13278 / 16432 = 80.806</td></tr></tbody></table><p><strong>结论:</strong>我们可以看到:</p><ol><li>Biaffine的结果对于 Concept Label的预测是有效果的, 但是对于之后的 Concept Identification并没有明显的提升的效果.</li><li>对于试图扩展 conceptTable, 从理论上来讲是可行的的, 但是从实际的效果来看, 反而有所下降, 感觉是很奇怪的一个现象.</li></ol><h2 id="2018-1-31"><a href="#2018-1-31" class="headerlink" title="2018-1-31"></a>2018-1-31</h2><p>自从发现了Bug，到现在，终于又有了一点的起色。<br>方法：对<strong>未在</strong> Concept Table中的 PREDICATE 进行 规则+FCL 处理，能够有所作用，最新的实验结果如下：</p><table><thead><tr><th>____</th><th><strong>Smatch FScore Dev</strong></th><th><strong>Smatch FScore Test</strong></th></tr></thead><tbody><tr><td>Baseline</td><td>64.00%</td><td>63.69%</td></tr><tr><td>规则+FCL</td><td>64.22%</td><td>64.10%</td></tr></tbody></table><h2 id="2018-1-21"><a href="#2018-1-21" class="headerlink" title="2018-1-21"></a>2018-1-21</h2><p>发现了一个比较严重的Bug，concept identification部分的时候，使用了 JAMR的concept label，所以原来的实验结果都偏高。现在就在原来的实验结果之上，重新跑一遍测试。</p><table><thead><tr><th>____</th><th><strong>Smatch FScore Dev</strong></th><th><strong>Smatch FScore Test</strong></th></tr></thead><tbody><tr><td>before</td><td>66.64%</td><td>66.83%</td></tr><tr><td>Fix Bug</td><td>64.00%</td><td>63.69%</td></tr></tbody></table><h3 id="加入-Biaffine-LSTM-Representation"><a href="#加入-Biaffine-LSTM-Representation" class="headerlink" title="加入 Biaffine LSTM Representation"></a>加入 Biaffine LSTM Representation</h3><p>考虑了一下，还是决定加入 Biaffine LSTM Representation，因为明显的发现，在 concept identification这一步骤中，concept label的预测是十分重要的，也可以是看做之后的工作的基础，而这一步的结果也并没有很理想。从之前的实验结果来看，实验结果相对于 JAMR略去了很多类似于主语 i的内容，将之识别为<strong>N</strong>。猜想，如果加入 Biaffine的信息，能够识别出来这是一个主语，应当就能够保留这一部分的内容，具体的效果还要从实验结果来看。</p><table><thead><tr><th><strong>Ideas</strong></th><th><strong>Concept FScore</strong></th></tr></thead><tbody><tr><td>在 concept label部分加入 biaffine lstm output</td><td>78.65%</td></tr><tr><td>在 concept identification部分加入 biaffine lstm output</td></tr></tbody></table><h2 id="2018-1-18"><a href="#2018-1-18" class="headerlink" title="2018-1-18"></a>2018-1-18</h2><p>在融合代码的时候，出现了一个问题，为什么对 concept进行测试的时候，准确率等指标会和训练的时候不一致？同样的代码，同样的环境，居然能够跑出相差挺大的实验结果？有随机的成份？可是哪里会有随机的成分？</p><h2 id="2018-1-9"><a href="#2018-1-9" class="headerlink" title="2018-1-9"></a>2018-1-9</h2><p>在修正了融合的代码之后，跑了几个实验：</p><table><thead><tr><th>____</th><th><strong>Smatch FScore Dev</strong></th></tr></thead><tbody><tr><td>merged, max pooling, update relation lstm loss</td><td></td></tr><tr><td>merged, max pooling, no update relation lstm loss</td><td></td></tr><tr><td>merged, minus, update relation lstm loss</td><td></td></tr><tr><td>merged, minus, no update relation lstm loss</td><td></td></tr><tr><td>no merged, minus, biaffine lstm</td></tr></tbody></table><h2 id="2018-1-8"><a href="#2018-1-8" class="headerlink" title="2018-1-8"></a>2018-1-8</h2><p>记录一些代码中，容易出现前后不一致的情况：</p><ol><li>BatchState中，使用的是 SumPooling还是 MaxPooling</li><li>Relation 中，一定要首先 sort concepts再进行后续的操作，抽取 states等等</li></ol><h2 id="2018-1-4"><a href="#2018-1-4" class="headerlink" title="2018-1-4"></a>2018-1-4</h2><p>记录一下最近发现的一些Bug：</p><ol><li>因为在 Relation Identification这一步骤需要首先对 JAMR识别出来的 concepts进行排序，而我先前写的排序算法是根据每一个 concept的 begin_index进行的，但是现在发现，在语聊中存在着2个 concepts的 begin_index是同一个的情况，这就导致了排序之后，同一个 concept会出现两次！所以在 delete的时候会出现内存错误的情况。这个 Bug对之前跑的实验都有一定的影响，正在重新跑实验进行验证!不需要验证，原来 Relation Identification步骤使用的函数的实现不一样，是对的。</li></ol><h2 id="2018-1-2"><a href="#2018-1-2" class="headerlink" title="2018-1-2"></a>2018-1-2</h2><p>测试一下在<strong>v1.4.25</strong> (加入了update the loss of the concept lstm in the other two models)模型的 concept lstm output的<strong>v1.3.2-train-max-pooling</strong>实验结果：</p><table><thead><tr><th><strong>KAMR iter</strong></th><th><strong>Smtach FScore Dev</strong></th><th><strong>Smatch FScore Test</strong></th></tr></thead><tbody><tr><td>5</td><td>65.95%</td><td>66.02%</td></tr><tr><td>10</td><td>66.61%</td><td>66.65%</td></tr><tr><td>20</td><td>66.64%</td><td>66.83%</td></tr></tbody></table><h2 id="2017-12-27"><a href="#2017-12-27" class="headerlink" title="2017-12-27"></a>2017-12-27</h2><p>将 concept identification stage’s lstm output得到两个模型 (concept identification, fcl)的 loss，并且更新， 直接在 Biaffine的 lstm output的实验来验证效果。</p><table><thead><tr><th><strong>KAMR</strong></th><th><strong>Smatch Fscore Dev</strong></th><th><strong>Smatch Fscore Test</strong></th></tr></thead><tbody><tr><td>v1.4.24</td><td>66.34%</td><td></td></tr><tr><td>同上+lstm loss update</td><td>66.66%</td><td>66.59%</td></tr></tbody></table><h2 id="2017-12-26"><a href="#2017-12-26" class="headerlink" title="2017-12-26"></a>2017-12-26</h2><p>处理一些可以使用规则处理的部分事情：date, time, person…</p><table><thead><tr><th><strong>KAMR</strong></th><th><strong>Smatch Fscore Dev</strong></th></tr></thead><tbody><tr><td>v1.4.22.2</td><td>66.14%</td></tr><tr><td>同上+date (Dev里面差不多有36个 date)</td><td>66.34%</td></tr></tbody></table><h2 id="2017-12-25"><a href="#2017-12-25" class="headerlink" title="2017-12-25"></a>2017-12-25</h2><p>Relation Identification w JAMR concepts and v1.4.22.2 concept lstm output on LDC2014T12的实验结果:<br><img src="/images/kamr/relationIdentification.bmp" alt="relation"><br>比较奇怪的是，从上面的结果中，并没有发现与之前的结论一致的地方（之前发现，iter=20(74.5%)与iter=40(77.8%)有明显的差距）。为什么这一次的几次实验结果都差不多？但是也没有达到78%？都可以达到77.5%左右。是因为加入了 NER信息的缘故？</p><table><thead><tr><th><strong>iter</strong></th><th><strong>relation identification</strong></th><th><strong>Dev</strong></th><th><strong>Test</strong></th></tr></thead><tbody><tr><td>10</td><td>77.35%</td><td>65.46%</td><td>65.37%</td></tr><tr><td>20</td><td>77.44%</td><td>65.67%</td><td>65.40%</td></tr><tr><td>30</td><td>77.49%</td><td>64.23%</td><td>63.52%</td></tr><tr><td>40</td><td>77.27%</td><td>59.98%</td><td>60.27%</td></tr></tbody></table><h3 id="测试-stemmer和-lemmatize"><a href="#测试-stemmer和-lemmatize" class="headerlink" title="测试 stemmer和 lemmatize"></a>测试 stemmer和 lemmatize</h3><p>在v1.4.24-debug中，分别测试 stemmer和 lemmatize作为 -NON-PREDICATE处理方法的效果：</p><table><thead><tr><th><strong>word lemmatize method</strong></th><th><strong>concept precision</strong></th></tr></thead><tbody><tr><td>lemmatize</td><td>80.47%</td></tr><tr><td>stemmer</td><td>79.72%</td></tr></tbody></table><h2 id="2017-12-18"><a href="#2017-12-18" class="headerlink" title="2017-12-18"></a>2017-12-18</h2><p>记录一下加入了 NER之后的相关实验结果。</p><table><thead><tr><th></th><th><strong>introduction</strong></th><th><strong>concept identification</strong></th><th><strong>relation identification</strong></th><th><strong>Final</strong></th></tr></thead><tbody><tr><td>FScore</td><td>将NER直接已embedding的形式加入</td><td>79.98%</td><td>78%(v1.3.2-test)</td><td>–%</td></tr><tr><td>FScore</td><td>同上+去除span==1的限制</td><td>80.32%</td><td>78%(v1.3.2-test)</td><td><strong>66.14%</strong></td></tr><tr><td>FScore</td><td>同上+强制根据NER选择FCL+去除span==1的限制</td><td>80.33%</td><td>78%(v1.3.2-test)</td><td>–%</td></tr><tr><td>FScore</td><td>同上+强制根据NER选择FCL+去除span==1的限制+oracle PREDICATE</td><td>81.15%</td><td>78%(v1.3.2-test)</td><td><strong>66.68%</strong></td></tr></tbody></table><table><thead><tr><th></th><th><strong>introduction</strong></th><th><strong>concept identification</strong></th><th><strong>relation identification</strong></th><th><strong>Final</strong></th></tr></thead><tbody><tr><td>FScore in Test</td><td>同上+强制根据NER选择FCL+去除span==1限制</td><td>80.40%</td><td>78%(v1.3.2-test)</td><td>65.93%</td></tr></tbody></table><p>从第二条结果，我们看到了很奇怪的现象，明明没有 concept identification的 FScore都还没有下面的80.82%来的高，但是 Pipeline结果却是出奇的好。为了验证一下结果的准确性，我重新跑了一下测试，发现结果是对的，这就很奇怪了。可能的解释：因为是 Pipeline的模式，可能加入了 NER信息的结果更加适合 downstream的代码，所以产生了更好的结果。</p><h2 id="2017-12-15"><a href="#2017-12-15" class="headerlink" title="2017-12-15"></a>2017-12-15</h2><p>将 stanford ner tagger处理完成的语料和之前的进行合并，这里记载一个比较重要的<font color="blue">人工修改</font>：</p><ol><li>在 Dev中，bolt12_64556_5620.8，因为句子最后有特殊字符，做 pos的时候，会漏掉一个，人工补上。</li><li>在生成的 fcls.gz里面，最后一个 polarity因为考虑不周到的原因，需要人工加入 place holder ‘X’</li></ol><font color="blue">发现一个问题：为什么当初加 char embedding的时候，没有加入到预测 boundary label的模型中？</font><table><thead><tr><th></th><th><strong>introduction</strong></th><th><strong>concept identification</strong></th><th><strong>relation identification</strong></th><th><strong>Final</strong></th></tr></thead><tbody><tr><td>FScore</td><td></td><td>79.98%</td><td>78%(v1.3.2-test)</td><td>–%</td></tr></tbody></table><h2 id="2017-12-13"><a href="#2017-12-13" class="headerlink" title="2017-12-13"></a>2017-12-13</h2><p>利用从 PropBaank里面提取出来的 frameset，融合进从 LDC2014 train里面提取的 conceptTable，直接进行训练，最终的 FScore又得到了一点提升：</p><table><thead><tr><th></th><th><strong>concept identification</strong></th><th><strong>relation identification</strong></th><th><strong>Final</strong></th></tr></thead><tbody><tr><td>FScore</td><td>80.82%</td><td>78%(v1.3.2-test)</td><td>65.39%</td></tr><tr><td>FScore(w/o oracle FCL PREDICATE)</td><td>79.88%</td><td>78%(v1.3.2-test)</td><td>64.79%</td></tr><tr><td>FScore(w/o oracle FCL PREDICATE, using stemmer’s concept)</td><td>80.00%</td><td>78%(v1.3.2-test)</td><td>64.87%</td></tr></tbody></table><p>表格中的三行的详细记录：</p><ol><li>在 concept identification部分，当在 FCL部分的时候，直接对 PREDICATE部分利用 oracle PREDICATE进行替代。</li><li>还是在和1. 相同的部分，不使用 oracle PREDICATE，直接赋值为空。</li><li>在预测的时候，如果一个 word没有能够找到它的 concept map，则尝试该 word的 stemmer，再次尝试查询是否存在 concept map，如果存在，则选择使用；否则，赋值为空。</li></ol><p>应该能够做一些提升：加入 NER的信息能够更加准确的识别出一些目前还判断错误的地名。</p><p>附 stemmer, lemmatizer地址：<br><a href="http://www.nltk.org/howto/stem.html" target="_blank" rel="noopener">stemmer</a>, <a href="https://pythonprogramming.net/lemmatizing-nltk-tutorial/" target="_blank" rel="noopener">lemmatizer</a></p><h2 id="2017-12-12"><a href="#2017-12-12" class="headerlink" title="2017-12-12"></a>2017-12-12</h2><p>采用了 lemmatize，对 PREDICATE进行处理：</p><table><thead><tr><th></th><th><strong>concept identification</strong></th><th><strong>relation identification</strong></th><th><strong>Final</strong></th></tr></thead><tbody><tr><td>FScore</td><td>80.35%</td><td>78%(v1.3.2-test)</td><td>65.04%</td></tr></tbody></table><p>但是还是采取了 oracle PREDICATE的做法。</p><h2 id="2017-12-11"><a href="#2017-12-11" class="headerlink" title="2017-12-11"></a>2017-12-11</h2><p>对 FCL进行了一些修改：1. 不再执行大小写转换，一律保留 word在句子中的形式；2. 对于 multi-concepts中包含 name字段的 placeholder部分进行填充的时候，在 word两端加上双引号。最新的实验结果如下：</p><table><thead><tr><th></th><th><strong>concept identification</strong></th><th><strong>relation identification</strong></th><th><strong>Final</strong></th></tr></thead><tbody><tr><td>FScore</td><td>78.31%</td><td>78%(v1.3.2-test)</td><td>63.93%</td></tr></tbody></table><p>使用的 relation identification部分的内容是有 biaffine output的，有两个原因使用这一部分的测试代码：</p><ol><li>biaffine output的模型可以随时拿来测试，并且和 concept identificaton的 lstm output模型的效能基本一样。</li><li>如果每一次修改一下 concept identification部分，都要根据这一部分的 lstm output重新训练一个 relation部分，有点拖沓。</li></ol><p>尝试了一个想法：如果利用 oracle PREDICATE暂时处理当前未在词典里面的 PREDICATE，FScore能够达到64.76%.</p><h2 id="2017-12-8"><a href="#2017-12-8" class="headerlink" title="2017-12-8"></a>2017-12-8</h2><p>Bug: 发现在进行 concept评价的时候，发现进行 concept number计数的时候，存在着一些问题：没有排除空白字符的情况，所以 predicted concepts的总数和正确的数目都是有问题的。更新了评价，发现没有加入 FCL之前的一些 FScore大都维持在77.52%。最近的粗糙的 FCL的FScore，78.15%。</p><h2 id="调研了lemmatize的相关内容"><a href="#调研了lemmatize的相关内容" class="headerlink" title="调研了lemmatize的相关内容"></a>调研了lemmatize的相关内容</h2><p>发现这一部分的内容只能在 NON-PREDICATE这一部分应用；在 PREDICATE这一部分并没有什么用。因为 PREDICATE这一部分大都是 verb+number 的组合，而 lemmatizer并没有这个功能 (non to verb)。</p><h1 id="将-sumpooling修改为-maxpooling的结果-2017-12-6"><a href="#将-sumpooling修改为-maxpooling的结果-2017-12-6" class="headerlink" title="将 sumpooling修改为 maxpooling的结果 (2017-12-6)"></a>将 sumpooling修改为 maxpooling的结果 (2017-12-6)</h1><table><thead><tr><th></th><th><strong>concept identification</strong></th><th><strong>relation identification</strong></th><th><strong>Final</strong></th></tr></thead><tbody><tr><td>FScore</td><td>81.3%</td><td>78%</td><td>60.48%</td></tr></tbody></table><p>从结果上来看，没有明显的变化。<br>fix the bug: when do the concept identification from the “B, I, E, S, O”, use the LSTM[<font color="blue">i</font>], actually the LSTM[<font color="blue">index</font>] is true where the index = i + begin_index !</p><h1 id="初步的实验结果-2017-12-5"><a href="#初步的实验结果-2017-12-5" class="headerlink" title="初步的实验结果 (2017-12-5)"></a>初步的实验结果 (2017-12-5)</h1><table><thead><tr><th></th><th><strong>concept identification</strong></th><th><strong>relation identification</strong></th><th><strong>Final</strong></th></tr></thead><tbody><tr><td>FScore</td><td>81.3%</td><td>78%</td><td>60.4%</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h1&gt;&lt;p&gt;新开一篇博客记录一下AMR Parser (KAMR)的开发经过&lt;br&gt;
    
    </summary>
    
    
      <category term="amr" scheme="http://yoursite.com/tags/amr/"/>
    
  </entry>
  
  <entry>
    <title>SRL-papers</title>
    <link href="http://yoursite.com/2018/01/09/SRL-papers/"/>
    <id>http://yoursite.com/2018/01/09/SRL-papers/</id>
    <published>2018-01-09T11:00:33.000Z</published>
    <updated>2019-08-09T08:23:32.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>新开一篇博客，记录在阅读AMR论文的时候的一些收获。<br><a id="more"></a></p><h2 id="A-Progressive-Learning-Approach-to-Chinese-SRL-Using-Heterogeneous-Data"><a href="#A-Progressive-Learning-Approach-to-Chinese-SRL-Using-Heterogeneous-Data" class="headerlink" title="A Progressive Learning Approach to Chinese SRL Using Heterogeneous Data"></a>A Progressive Learning Approach to Chinese SRL Using Heterogeneous Data</h2><p>该篇论文主要利用 PNN+Gated Recurrent Adapter构建了一个可以利用异构数据的 SRL分析器。另外，还发布了一个数据 CSB。但是，和我的目标（尝试了解 SRL）并不一致。<br>本文几个重点：</p><ol><li>CSB的构建与其他 SRL语料的区别</li><li>PNN + Gated Recurrent Adapter</li></ol><h2 id="Deep-Semantic-Role-Labeling-What-Works-and-What’t-Next"><a href="#Deep-Semantic-Role-Labeling-What-Works-and-What’t-Next" class="headerlink" title="Deep Semantic Role Labeling: What Works and What’t Next"></a>Deep Semantic Role Labeling: What Works and What’t Next</h2><p>本论文使用了一个 deep <strong>highway</strong> BiLSTM的架构来处理 SRL （highway之前没有见过），并且利用了这几年的一些优秀的做法来处理初始化和正则化。本文的几个重点：</p><ol><li>新提出了一个深层神经网络来处理 SRL</li><li>详细分析了结构化的一致性和长距离的依赖问题</li><li>详述了句法在 SRL上的应用</li></ol><p>本文提到的几个对我目前工作有用的几个点：</p><ol><li>初始化十分重要：正交初始化？（这个点在论文中表现得很重要）</li><li>句法的信息十分重要+Biaffine</li><li>有约束的Decoding？</li><li>gated highway connections?</li><li>BIO VS BIESO?</li><li>Dropout: 0.1?</li></ol><h2 id="Linguisticaly-Informed-Self-Attention-for-Semantic-Role-Labeling"><a href="#Linguisticaly-Informed-Self-Attention-for-Semantic-Role-Labeling" class="headerlink" title="Linguisticaly-Informed Self-Attention for Semantic Role Labeling"></a>Linguisticaly-Informed Self-Attention for Semantic Role Labeling</h2><p>本文利用 self-attention做了一个 multi-task learning：词性、句法、谓词预测以及语义角色标注。旨在利用语言学的信息来进行端到端的语义角色标注。<br>模型的优化目标是：最大化各个子任务的 likelihood的 sum<br>本篇论文相对比与 He的工作，在使用 predicted predicates的情况下，效果有提高。</p><h2 id="Jointly-Predicting-Predicates-and-Arguments-in-Neural-Semantic-Role-Labeling"><a href="#Jointly-Predicting-Predicates-and-Arguments-in-Neural-Semantic-Role-Labeling" class="headerlink" title="Jointly Predicting Predicates and Arguments in Neural Semantic Role Labeling"></a>Jointly Predicting Predicates and Arguments in Neural Semantic Role Labeling</h2><p>最近的一些基于 BIO-tagging的神经网络模型，都是假设给定了 gold predicate进行的 argument的预测，而且还不能够利用 span-level的特征。<br>本篇论文提出了一个 end-to-end的模型用来同时预测 predicates和 arguments，实验结果表明，本篇论文达到了目前不使用 gold predicate的最好的结果。<br>纵观整个论文，论文的模型架构来自于指代消除这个任务。值得注意的是，这个指代消除的工作同样是 He的工作。</p><h2 id="Syntax-for-Semantic-Role-Labeling-To-Be-Or-Not-to-Be"><a href="#Syntax-for-Semantic-Role-Labeling-To-Be-Or-Not-to-Be" class="headerlink" title="Syntax for Semantic Role Labeling, To Be, Or Not to Be"></a>Syntax for Semantic Role Labeling, To Be, Or Not to Be</h2><p>这篇论文提出了一个使用扩展的 k-order argument pruning 加强 argument labeling的模型，并且取得了 state-of-the-art的结果。<br>本文的 SRL模型很普通，唯一比较特殊的就是 MLP的层数多了一点。<br>而且，本文利用了一个 argument pruning的策略来有效的利用句法信息，但是比较不好是，本文并没有明确指出该方法是用在了模型的哪一个地方，直接引用了以前的论文，让读者感觉知其所以然，不知其所以然。<br>这篇文章的模型唯一用到句法信息的地方就是在输入层里面加入了 dependency label的信息。<br>这篇文章的 argument pruning从论文里面看是在 preprocessing里面进行应用的，难道是在 dependency label上表现出来的？不是在 Decoder部分进行 constrained decoding？</p><h2 id="Encoding-Sentences-with-Graph-Convolutional-Networks-for-Semantic-Role-Labeling"><a href="#Encoding-Sentences-with-Graph-Convolutional-Networks-for-Semantic-Role-Labeling" class="headerlink" title="Encoding Sentences with Graph Convolutional Networks for Semantic Role Labeling"></a>Encoding Sentences with Graph Convolutional Networks for Semantic Role Labeling</h2><p>本文提出了 graph convolutional networks (GCN)，用在基于图的神经网络。<br>本文将 GCN和 LSTM进行了 stack操作，然后得到了 state-of-the-art的结果。总的来说，对于一个图中的每一个节点来说，GCN用来 encode这个节点相关联的一些节点的信息。(本文的贡献有点好玩)</p><h2 id="A-Full-End-to-End-Semantic-Role-Labeler-Syntax-agnostic-Over-Syntax-aware"><a href="#A-Full-End-to-End-Semantic-Role-Labeler-Syntax-agnostic-Over-Syntax-aware" class="headerlink" title="A Full End-to-End Semantic Role Labeler, Syntax-agnostic Over Syntax-aware?"></a>A Full End-to-End Semantic Role Labeler, Syntax-agnostic Over Syntax-aware?</h2><p>本文提出了一个端到端的统一处理谓词消岐和论元标注的模型。<br>本文的模型还是比较简单的，采用了 3层 BiLSTM + Biaffine Scorer的模型架构来处理这个任务。本文的一个亮点就是对 Biaffine Scorer进行了加强，加入了 bias term。同时，类似于 Biaffine Parser，本文对 predicate和 argument也利用两个不同的 W进行了非线性编码。<br>本文在 CoNLL-2008和 CoNLL-2009的数据集上都取得了目前最高的结果。</p><h2 id="Syntactic-Scaffolds-for-Semantic-Structures"><a href="#Syntactic-Scaffolds-for-Semantic-Structures" class="headerlink" title="Syntactic Scaffolds for Semantic Structures"></a>Syntactic Scaffolds for Semantic Structures</h2><p>本篇论文提出了一个利用 multi-task learning的方法利用短语结构句法树 (在 PropBank SRL实验上利用的是 OntoNotes 5.0，和 CoNLL-2012 SRL数据是完整重叠的。CoNLL-2012 SRL就是 OntoNotes 5.0)进行语义任务的处理，称之为句法“梯子”。<br>模型主要通过将句法端的 span作为模型句法部分的训练目标；同时，在进行语义预测的时候，利用强化的 span表示进行 argument的预测：1）BiLSTM产生的上下文相关的表示；2）attention机制产生的 span summary；3）span的特征。</p><h2 id="An-Empirical-Study-of-Building-a-Strong-Baseline-for-Constituency-Parsing"><a href="#An-Empirical-Study-of-Building-a-Strong-Baseline-for-Constituency-Parsing" class="headerlink" title="An Empirical Study of Building a Strong Baseline for Constituency Parsing"></a>An Empirical Study of Building a Strong Baseline for Constituency Parsing</h2><p>在这边插播一个短语结构树句法的工作，本篇文章是 EMNLP2018年的一篇short。本文利用最近在 NLG领域一些比较新颖的技术来提升基于 sequence-to-sequence的 constitutency parsering。并且取得了比较好的结果。利用了一些技术，比如 subword（BPE），unknown token embedding as a bias, multi-task learning, output length controlling, pre-trained word embedding, model ensemble and LM reranking. 本文的实验结果还是比较详细的，能够从实验结果中看出每一个 technic带来的效益是多少。</p><h2 id="Multi-Task-Identification-of-Entities-Relations-and-Coreference-for-Scientific-Knowledge-Graph-Construction"><a href="#Multi-Task-Identification-of-Entities-Relations-and-Coreference-for-Scientific-Knowledge-Graph-Construction" class="headerlink" title="Multi-Task Identification of Entities, Relations, and Coreference for Scientific Knowledge Graph Construction"></a>Multi-Task Identification of Entities, Relations, and Coreference for Scientific Knowledge Graph Construction</h2><p>这篇文章是 18年 EMNLP的一篇文章，是华盛顿大学的一篇文章。本文利用了之前他们组的积累，span-based model来处理科学知识图谱的构建。将三个任务做一个multi-task learning，实体的识别，实体之间关系的识别，以及指代消歧。除了这个 multi-task learning的模块之外，本文还发布了一个数据集，并且在此基础上构建了科学知识图谱。</p><h2 id="Deep-MultiTask-Learning-for-Semantic-Dependency-Parsing"><a href="#Deep-MultiTask-Learning-for-Semantic-Dependency-Parsing" class="headerlink" title="Deep MultiTask Learning for Semantic Dependency Parsing"></a>Deep MultiTask Learning for Semantic Dependency Parsing</h2><p>本篇文章是 2017 ACL的一篇长文。文章的主要工作是提出了一个基于深度神经网络的框架来讲一个句子分析称3种语义依存图。本文的主要贡献有两个，1）提出了一个比较好的 baseline. 2）探究了两种应用于 multitask learning的方法：parameter sharing and higher-order structure scores.</p><h2 id="Graph-Convolutional-Networks-for-Text-Classification"><a href="#Graph-Convolutional-Networks-for-Text-Classification" class="headerlink" title="Graph Convolutional Networks for Text Classification"></a>Graph Convolutional Networks for Text Classification</h2><p>本文是 AAAI2019的一篇工作，本文利用 GCN来处理文本分类，本文的主要贡献在于利用 GCN，将数据集的所有的 word以及 document是作为 node，然后通过建立邻接矩阵A，利用了两层 GCN来达到分类的目的。</p><h2 id="Syntax-aware-Neural-Semantic-Role-Labeling-with-Supertags"><a href="#Syntax-aware-Neural-Semantic-Role-Labeling-with-Supertags" class="headerlink" title="Syntax-aware Neural Semantic Role Labeling with Supertags"></a>Syntax-aware Neural Semantic Role Labeling with Supertags</h2><p>本文是 NAACL-2019的一篇短文。本文利用了前人提出的 Supertags，作为一种 external embeddings输入到 SRL模型中。本文的贡献在于提出了一个 TAG supertags，略微区别于前人提出的一些 supertags，略有提升效果。在 ELMo的加持下，略有提升（没有 significant test）。</p><h2 id="Towards-Semi-Supervised-Learning-for-Deep-Semantic-Role-Labeling"><a href="#Towards-Semi-Supervised-Learning-for-Deep-Semantic-Role-Labeling" class="headerlink" title="Towards Semi-Supervised Learning for Deep Semantic Role Labeling"></a>Towards Semi-Supervised Learning for Deep Semantic Role Labeling</h2><p>文本是 EMNLP-2018年的一篇短文。本文提出，在训练基于神经网络的模型的时候加入句法结构能够获得鲁棒的性能，特别是对于低资源的情况。本文的贡献在于：1）在训练模型的时候将句法树作为硬约束，2）半监督的模型。大部分前人的工作都是在 decoder部分引入 constraints，本文则在 training部分引入 constraints。</p><h2 id="Constituency-Parsing-with-a-Self-Attentive-Encoder"><a href="#Constituency-Parsing-with-a-Self-Attentive-Encoder" class="headerlink" title="Constituency Parsing with a Self-Attentive Encoder"></a>Constituency Parsing with a Self-Attentive Encoder</h2><p>插播一个 短语结构树的 论文，这个论文利用了 self-attention as the encoder，本文主要记录主要的 self-attention部分的见解</p><ol><li>hamming loss </li><li>only + 0.45% compared with the BiLSTM encoder</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;新开一篇博客，记录在阅读AMR论文的时候的一些收获。&lt;br&gt;
    
    </summary>
    
    
      <category term="SRL" scheme="http://yoursite.com/tags/SRL/"/>
    
  </entry>
  
  <entry>
    <title>AMR-papers</title>
    <link href="http://yoursite.com/2017/11/20/AMR-papers/"/>
    <id>http://yoursite.com/2017/11/20/AMR-papers/</id>
    <published>2017-11-20T07:12:10.000Z</published>
    <updated>2019-01-21T13:49:53.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>新开一篇博客，记录在阅读AMR论文的时候的一些收获。<br><a id="more"></a></p><h1 id="论文列表以及收获"><a href="#论文列表以及收获" class="headerlink" title="论文列表以及收获"></a>论文列表以及收获</h1><h2 id="Parsing-English-into-Abstract-Meaning-Representation-Using-Syntax-Based-Machine-Translation"><a href="#Parsing-English-into-Abstract-Meaning-Representation-Using-Syntax-Based-Machine-Translation" class="headerlink" title="Parsing English into Abstract Meaning Representation Using Syntax-Based Machine Translation"></a>Parsing English into Abstract Meaning Representation Using Syntax-Based Machine Translation</h2><p>本片论文主要采用了SBMT的方法将English sentences转换成AMR。主要的工作在于，SBMT是一个机器翻译的框架，这个框架所需要的是一个Tree，而AMR Graph是一个有向图。所以，需要做一些Transformation：</p><ol><li>拆分具有多个节点的节点，但是因为这样子的结构过于“扁平”，所以效果不好</li><li>进一步转换，进行 concept reconstruct，role reconstruct等一系列的工作</li></ol><p>本文还建立了一个AMR的语言模型，采用了一些外部的语义资料<br>最终的Smtach FScore: 67%<br>值得注意的是，在使用了一些外部的tricks (data/number/name rules, semantic categories, morphological normalization, rule-based alignments)之前，该篇工作在2014的Dev上面的F值是62.3%</p><h2 id="Getting-the-Most-out-of-AMR-Parsing"><a href="#Getting-the-Most-out-of-AMR-Parsing" class="headerlink" title="Getting the Most out of AMR Parsing"></a>Getting the Most out of AMR Parsing</h2><p>本片论文主要处理了目前AMR Parsing的瓶颈问题：concept identification 和 alignment，本篇论文通过：</p><ol><li>建立一个基于双向LSTM的 concept分类器，通过利用丰富的上下文信息学习 AMR concept labels。FCL：对于具有多个 concept node的concept，我们根据 word和 concept leaf节点进行判断，如果 char个数大于4那么就进行 category操作，构成FCL。而对于谓语的情况，我们仅仅利用它的 sense tag? CNN-based Character-level Embedding，为了充分利用 character的信息，本文利用了窗口化的 character + CNN + Max Pooling构成一个词的 character，再加上 word embedding + NER embedding，构成双向 LSTM的input，即 concept identifier的输入。</li><li>然后通过扩展一个基于 HMM的 word-to-concept 对齐器，在 AMR Parsing的 decoding阶段起作用。</li></ol><h2 id="CU-NLP-at-SemEval-2016-Task-8-AMR-Parsing-using-LSTM-based-Recurrent-Neural-Networks"><a href="#CU-NLP-at-SemEval-2016-Task-8-AMR-Parsing-using-LSTM-based-Recurrent-Neural-Networks" class="headerlink" title="CU-NLP at SemEval-2016 Task 8: AMR Parsing using LSTM-based Recurrent Neural Networks"></a>CU-NLP at SemEval-2016 Task 8: AMR Parsing using LSTM-based Recurrent Neural Networks</h2><p>目的：得到怎么处理 FCL中 PREDICATE部分的方法<br>没有得到解决方案，论文没有那么详细。。<br>一些收获，在论文提到的评测中：语料是包含了 Alignments的。</p><h2 id="Neural-Semantic-Parsing-by-Character-based-Translation-Experiments-with-Abstract-Meaning-Representations"><a href="#Neural-Semantic-Parsing-by-Character-based-Translation-Experiments-with-Abstract-Meaning-Representations" class="headerlink" title="Neural Semantic Parsing by Character-based Translation: Experiments with Abstract Meaning Representations"></a>Neural Semantic Parsing by Character-based Translation: Experiments with Abstract Meaning Representations</h2><p>本文主要采用了机器翻译的技术来处理 AMR Parsing。其中，以 character做为基本单位，OpenNMT为模型，采用的数据是 LDC2016E25。本文还采用了很多其他的辅助方法用来提高这个基于机器翻译技术的 AMR Parsing：</p><ol><li>AMR Re-ordering：可以用来 argument训练数据</li><li>Introducting Super Characters：在 character-based技术中，并不完全全部地死板的以 character为单位。像 relation、pos这种信息，以其本身作为 character！</li><li>加入词性的信息，但是利用的并不是 stanford pos tagger，而是一个 POS-tagger of the C&amp;C tools (Clark et al.2003)。</li><li>加入了称之为 “Silver Standard Data”的额外的训练数据，在所有的提升方法中，这一种方法的提升最大，有10个点的提升。那么什么是 “Silver Standard Data”呢？其实，就是利用现有的模型 (JAMR, CAMR)对数据 the Groningen Meaning Bank (Basile et al. 2012)进行分析，然后通过阈值 (55%)进行提取。最后，通过选取适量 (包括选取 JAMR还是 CAMR产生的 Graph的问题)的数据进行训练语料的扩充，用来达到提升性能的目的，实际效果也是非常好。</li><li>对于模型的一些优化方法，设计机器翻译相关的一些专业知识。<br>这是第一篇在 LDC2016E25的数据。但是这个模型在 LDC2015E86的数据上面仍然稍微逊色于 5 bi-LSTM (Foland and Martin 2017)。通过这一篇论文，我大致还猜到 2016其实就是 2015数据的训练数据的扩充版本？但是很奇怪的是，这两年的数据现在在 AMR官网上面已经找不到了，目前只剩下了 2014和 2017，称为 1.0和 2.0。</li></ol><h2 id="Abstract-Meaning-Representation-Parsing-using-LSTM-Recurrent-Neural-Networks"><a href="#Abstract-Meaning-Representation-Parsing-using-LSTM-Recurrent-Neural-Networks" class="headerlink" title="Abstract Meaning Representation Parsing using LSTM Recurrent Neural Networks"></a>Abstract Meaning Representation Parsing using LSTM Recurrent Neural Networks</h2><p>本篇论文采用5个LSTM组成了Parser处理 AMR Parsing问题。下面简单介绍一下该篇论文提出的 Parser的大致流程。</p><ol><li>给定一个句子，利用 aligner进行处理，得到 word span和 concept的对应。</li><li>利用 word span就可以对每一个 word生成一个{I, O, B, E, S}标签，然后就可以利用这样的数据训练SG Network（SubGraph），子图扩展成为 concept在测试阶段。</li><li>预测 Args，Nargs，Attr，NCat四个模型。</li></ol><p>在2016的数据上面，该篇论文的F值达到了70.9%.（2016年的评测 semeval 2016 task 8）</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;新开一篇博客，记录在阅读AMR论文的时候的一些收获。&lt;br&gt;
    
    </summary>
    
    
      <category term="AMR" scheme="http://yoursite.com/tags/AMR/"/>
    
  </entry>
  
  <entry>
    <title>AMR</title>
    <link href="http://yoursite.com/2017/07/10/AMR/"/>
    <id>http://yoursite.com/2017/07/10/AMR/</id>
    <published>2017-07-10T13:29:22.000Z</published>
    <updated>2019-01-21T13:49:53.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>从现在开始，开启我的新方向、新征程！AMR Parsing！</p><h1 id="问题的一些基本概念"><a href="#问题的一些基本概念" class="headerlink" title="问题的一些基本概念"></a>问题的一些基本概念</h1><a id="more"></a><h2 id="AMR-Graph"><a href="#AMR-Graph" class="headerlink" title="AMR Graph"></a>AMR Graph</h2><p>AMR Graph is a <strong>rooted</strong>, <strong>directed</strong>, <strong>acyclic</strong> graph.</p><h3 id="数据样例"><a href="#数据样例" class="headerlink" title="数据样例"></a>数据样例</h3><p><img src="/images/amr/GraphStructureFile.png" alt="amr data file"><br><img src="/images/amr/sample.bmp" alt="amr graph"></p><h3 id="为什么需要alignment"><a href="#为什么需要alignment" class="headerlink" title="为什么需要alignment"></a>为什么需要alignment</h3><p>因为在AMR的数据中，我们仅仅只有一个pair，一个sentence以及其对应的AMR Graph。所以，从第一个任务(concept identification)来看，我们需要知道which span of words invoke which concept fragments in the amr graph。这个时候，就需要一个AMR Aligner的存在。<br><a href="https://github.com/jflanigan/jamr/blob/Semeval-2016/docs/Alignment_Format.md" target="_blank" rel="noopener">Alignment的格式</a><br>alignment是以AMR graph为基准的(顺序什么的，重要吗？)<br>评价alignment是需要人工的Gold alignment的，JAMR的Aligner也不能够得到100%的F值。</p><h3 id="利用stanford-pos-tagger进行词性标注"><a href="#利用stanford-pos-tagger进行词性标注" class="headerlink" title="利用stanford pos tagger进行词性标注"></a>利用stanford pos tagger进行词性标注</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -mx300m -classpath stanford-postagger.jar edu.stanford.nlp.tagger.maxent.MaxentTagger -model models/english-bidirectional-distsim.tagger -sentenceDelimiter newline -tokenize false -textFile ../../full-w-pos/amr-release-1.0-training-alignment-one-sentence-a-line.txt &gt; amr-release-1.0-training-alignment-w-pos.txt</span><br></pre></td></tr></table></figure><p>在处理词性的时候，发现stanford-postagger，会过度分词，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Freedom_NN of_IN speech_NN \_CD thought_NN ,_, if_IN people_NNS express_VBP a_DT view_NN somewhat_RB different_JJ than_IN the_DT traditional_JJ view_NN</span><br></pre></td></tr></table></figure></p><ol><li>其中的 speech\thought 就被分析成了 speech \ thought 三个词，然后标成了三个词性。</li><li>etc.<em>NN .</em>. ,多分析出来了一个英文句号。。。</li></ol><p>人工修复</p><h4 id="记录MKL的有时候没有使用"><a href="#记录MKL的有时候没有使用" class="headerlink" title="记录MKL的有时候没有使用"></a>记录MKL的有时候没有使用</h4><p>在敲完代码后，使用和GN3Parser同样的Makefile进行编译，发现eigen居然利用不了MKL，后来有相当一段长的时间使用不了MKL。到后来发现新的服务器（126.172, 126.173）都不能够利用MKL，最后实在没办法，讲代码copy到m175上进行编译和运行，发现可以完美的运行和利用MKL；然后再将m175上面的代码和实验copy到新服务器上，make clean + make，发现同样可以使用MKL，玄学！</p><h3 id="KAMR可能需要继续进行修改的一些地方"><a href="#KAMR可能需要继续进行修改的一些地方" class="headerlink" title="KAMR可能需要继续进行修改的一些地方"></a>KAMR可能需要继续进行修改的一些地方</h3><ol><li>agenda的初始化长度，设置太小可能导致内存错误</li><li>特征部分仍然需要继续修改</li></ol><h3 id="JAMR的一些明显错误"><a href="#JAMR的一些明显错误" class="headerlink" title="JAMR的一些明显错误"></a>JAMR的一些明显错误</h3><h4 id="concept的分割重复"><a href="#concept的分割重复" class="headerlink" title="concept的分割重复"></a>concept的分割重复</h4><p>句子id：nw.wsj_0003.17，node：0.1.0.2.0.1.0.0.0.1.0.0<br>12-30 和 29-30 重复<br>这个问题将会导致两个问题：</p><ol><li>在给定“正确”的concept用以产生AMR Graph的时候，会出现重复的node。</li><li>在做Concept Identification的时候，会产生一些标签上的错误！对于标签上面的错误，将错就错？</li></ol><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>初步smath F值:50%</p><h4 id="第一阶段代码的初步说明："><a href="#第一阶段代码的初步说明：" class="headerlink" title="第一阶段代码的初步说明："></a>第一阶段代码的初步说明：</h4><ol><li>v1.4.4， Concept Identification，利用Train进行训练，并且进行测试，产生predicted concepts。</li><li>v1.3.2， Relation Identification，利用Train以及正确的Concept进行模型的训练，产生模型。</li><li>v1.3.3， 在v1.3.2的基础之上修改了读取文件的格式，利用1.3.2训练好的模型进行Relation Identification。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;从现在开始，开启我的新方向、新征程！AMR Parsing！&lt;/p&gt;
&lt;h1 id=&quot;问题的一些基本概念&quot;&gt;&lt;a href=&quot;#问题的一些基本概念&quot; class=&quot;headerlink&quot; title=&quot;问题的一些基本概念&quot;&gt;&lt;/a&gt;问题的一些基本概念&lt;/h1&gt;
    
    </summary>
    
    
      <category term="AMR" scheme="http://yoursite.com/tags/AMR/"/>
    
  </entry>
  
  <entry>
    <title>SemanticKnowledgeResearch</title>
    <link href="http://yoursite.com/2017/05/12/SemanticKnowledgeResearch/"/>
    <id>http://yoursite.com/2017/05/12/SemanticKnowledgeResearch/</id>
    <published>2017-05-12T04:09:38.000Z</published>
    <updated>2019-01-21T13:49:53.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>因为Parsing的需要，现开始调研Semantic Knowledge相关的知识，做一些记录。:)</p><a id="more"></a><h1 id="2-外部词典的应用"><a href="#2-外部词典的应用" class="headerlink" title="2. 外部词典的应用"></a>2. 外部词典的应用</h1><p>《Parsing the Penn Chinese Treebank with Semantic Knowledge》</p><ol><li>从两个外部词典抽取类型 (category)和启发式规则 (heuristic rules).</li><li>在抽取出的类别的基础之上建立一个用于优先选择的子模型</li></ol><p>有效解决：</p><ol><li>nominal compund, coordination and POS tagging ambiguity</li><li>alleviate the data sparseness<h2 id="2-1-抽取语义类别-Semantic-Categories"><a href="#2-1-抽取语义类别-Semantic-Categories" class="headerlink" title="2.1 抽取语义类别 (Semantic Categories)"></a>2.1 抽取语义类别 (Semantic Categories)</h2>外部词典：HowNet and TongYiCi CiLin（同义词词林）<h3 id="HowNet"><a href="#HowNet" class="headerlink" title="HowNet"></a>HowNet</h3>语义类别 == 义位 (sememe)。通过不同类别之间的上下位关系，我们可以抽取具有不同粒度等级的语义类别。我们仅仅使用词的第一定义（定义：每一个词有很多的定义 definitions）<h3 id="CiLin"><a href="#CiLin" class="headerlink" title="CiLin"></a>CiLin</h3>每一个节点代表一个语义类别，总计有三个类别，类别总计有 (12-97-1400种)<h3 id="HowNet-CiLin"><a href="#HowNet-CiLin" class="headerlink" title="HowNet + CiLin"></a>HowNet + CiLin</h3>以HowNet为主，CiLin为辅。如果有一个word在HowNet里面没有找到，但是在CiLin里面找到了，我们会找这个word的同义词，然后使用这个同义词在HowNet当中的类别 (category)。<h3 id="Heuristic-Rules-HR"><a href="#Heuristic-Rules-HR" class="headerlink" title="Heuristic Rules (HR)"></a>Heuristic Rules (HR)</h3>启发式规则。使用简单的启发式规则识别数字和时间表达式。<h2 id="2-2-建立一个基于类-Class-Based-的优先选择子模型"><a href="#2-2-建立一个基于类-Class-Based-的优先选择子模型" class="headerlink" title="2.2 建立一个基于类 (Class-Based)的优先选择子模型"></a>2.2 建立一个基于类 (Class-Based)的优先选择子模型</h2>使用从语义词典当中抽取的类别 (classes)对head和modifier的语义弧进行建模。建立一个类似bilexical-class的子模型</li></ol><h1 id="我们利用HowNet的过程"><a href="#我们利用HowNet的过程" class="headerlink" title="我们利用HowNet的过程"></a>我们利用HowNet的过程</h1><p>记录一下我们利用HowNet的过程：</p><ol><li>首先，利用API，将CONLL09的中文数据，所有的词，在API里面都查找一遍，找出能够找到的定义 (Definition)，并计数</li><li>写一个Python脚本，利用字典合并所有的相同的定义</li><li>统计HowNet覆盖的词的数量，并且得到相同定义不同词的文本文件。<br>统计的结果如下：</li></ol><table><thead><tr><th></th><th><strong>Words</strong></th><th><strong>HN1</strong></th><th><strong>HN2</strong></th><th><strong>HN2+CL</strong></th></tr></thead><tbody><tr><td>Words in train</td><td>40878</td><td>22207</td><td>22206</td><td>23787</td></tr><tr><td>Words in dev</td><td>8497</td><td>6270</td><td>6270</td><td>6493</td></tr><tr><td>Words in test</td><td>11196</td><td>8183</td><td>8183</td><td>8510</td></tr><tr><td>Classes in train</td><td>-</td><td>1562</td><td>465</td><td>465</td></tr><tr><td>Classes in dev</td><td>-</td><td>1094</td><td>391</td><td>392</td></tr><tr><td>Classes in test</td><td>-</td><td>1200</td><td>411</td><td>411</td></tr></tbody></table><p>在抽取HN2的时候，我发现以下两个问题：</p><ol><li>有一个义项：Entity|实体，已经是最顶层的的义项了，并没有再上一层的义项了，所以默认它本身就是上一层义项。</li><li>还有一个义项：Attribute|属性，并没有再上一层的义项了。</li><li>从上面的数据中，我们看到，其实Train数据集的覆盖率还是挺低的；输出了数据，但是我发现词频都很低2次的很多（可能是1次，不确定抽取word的时候，有没有重复，明天确定一下TODO）</li><li>在Dev中的words，6270；和Train重合的部分，5694；在Test中的words，8183.和Train重合的部分，7116<br><img src="/images/Semantic/CoNLL09-Train-HN2.png" alt="CoNLL09-Train-HN2"><h3 id="HowNet-聚类-2017-7-1"><a href="#HowNet-聚类-2017-7-1" class="headerlink" title="HowNet+聚类(2017-7-1)"></a>HowNet+聚类(2017-7-1)</h3>因为在调用HowNet的过程中，我们发现了语料中存在着大量的词没有HN2，而且这些词基本都是低频词，所以我们希望利用聚类来弥补这个HN2的缺失。<br>在Train、Dev、Test三个语料中，总计有21630种词没有HN2，利用聚类之后，只剩下9种词没有HN2.<br>下面记录详细的实验结果。</li></ol><table><thead><tr><th><strong>Corpus</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>81.10%</td><td>77.50%</td><td>Greedy</td><td>gpu-no-1:~/GN3Parser-beta/3.9.5.1-w-HN2+Word-cluster</td></tr><tr><td>Test</td><td>81.22%</td><td>77.55%</td><td>Greedy</td><td>gpu-no-1:~/GN3Parser-beta/3.9.5.1-w-HN2+Word-cluster</td></tr><tr><td>Dev</td><td>84.66%</td><td>81.15%</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/3.9.5.1-w-HN2+Word-cluster</td></tr><tr><td>Test</td><td>84.90%</td><td>81.38%</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/3.9.5.1-w-HN2+Word-cluster</td></tr></tbody></table><h3 id="HowNet细化词性的工作-2017-6-25"><a href="#HowNet细化词性的工作-2017-6-25" class="headerlink" title="HowNet细化词性的工作(2017-6-25)"></a>HowNet细化词性的工作(2017-6-25)</h3><p>我们尝试了一个工作，利用HowNet抽取语料里面的词的HN2，再按照词性进行分类，合并。<br>实验结果：</p><table><thead><tr><th><strong>Bias</strong></th><th><strong>Corpus</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th></tr></thead><tbody><tr><td>120</td><td>Dev</td><td>78.11%</td><td>74.14%</td></tr><tr><td>120</td><td>Test</td><td>79.68%</td><td>75.75%</td></tr><tr><td>200</td><td>Dev</td><td>75.61%</td><td>70.98%</td></tr><tr><td>200</td><td>Test</td><td>78.32%</td><td>74.14%</td></tr></tbody></table><h3 id="HowNet-with-GN3Parser实验-2017-6-4"><a href="#HowNet-with-GN3Parser实验-2017-6-4" class="headerlink" title="HowNet with GN3Parser实验(2017-6-4)"></a>HowNet with GN3Parser实验(2017-6-4)</h3><p>我们尝试利用HowNet的知识，组织相关的实验。如何利用HowNet？在GN3Parser中，抽取每一个word的时候，会同时抽取该word的HN2，HN2的相关信息在上面已经给出。我们设置HN2的维度为50维，以embedding的方式加入到Parser中。</p><table><thead><tr><th><strong>Corpus</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>80.66%</td><td>77.03%</td><td>Greedy</td><td>gpu-no-1:~/GN3Parser-beta/debug-3.9.5.1</td></tr><tr><td>Test</td><td>81.11%</td><td>77.39%</td><td>Greedy</td><td>gpu-no-1:~/GN3Parser-beta/debug-3.9.5.1</td></tr><tr><td>Dev</td><td>84.48%</td><td>80.98%</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/debug-3.9.5.1-global</td></tr><tr><td>Test</td><td>84.62%</td><td>81.10%</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/debug-3.9.5.1-global</td></tr><tr><td>Dev</td><td>81.19%</td><td>77.57%</td><td>Greedy</td><td>gpu-no-1:~/GN3Parser-beta/3.9.5.1-w-<strong>HN2+CL</strong></td></tr><tr><td>Test</td><td>81.28%</td><td>77.53%</td><td>Greedy</td><td>gpu-no-1:~/GN3Parser-beta/3.9.5.1-w-<strong>HN2+CL</strong></td></tr><tr><td>Dev</td><td>84.53%</td><td>81.19%</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/3.9.5.1-w-<strong>HN2+CL</strong></td></tr><tr><td>Test</td><td>84.75%</td><td>81.28%</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/3.9.5.1-w-<strong>HN2+CL</strong></td></tr></tbody></table><p>(<font color="red">这些实验的代码有问题，所以实验结果忽略不计，也是错误的</font>)</p><table><thead><tr><th><strong>Corpus</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>79.32%</td><td>75.43%</td><td>Only train HN2, Greedy</td><td>gpu-no-1:~/GN3Parser-beta/debug-4.0</td></tr><tr><td>Test</td><td>80.14%</td><td>76.14%</td><td>Only train HN2, Greedy</td><td>gpu-no-1:~/GN3Parser-beta/debug-4.0</td></tr><tr><td>Dev</td><td>79.24%</td><td>75.33%</td><td>merged HN2, Greedy</td><td>gpu-no-1:~/GN3Parser-beta/4.0-w-mergeHN2</td></tr><tr><td>Test</td><td>80.19%</td><td>76.20%</td><td>merged HN2, Greedy</td><td>gpu-no-1:~/GN3Parser-beta/4.0-w-mergeHN2</td></tr><tr><td>Dev</td><td>82.88%</td><td>79.15%</td><td>merged HN2, Global</td><td>gpu-no-1:~/GN3Parser-beta/4.0-w-mergeHN2</td></tr><tr><td>Test</td><td>82.97%</td><td>79.05%</td><td>merged HN2, Global</td><td>gpu-no-1:~/GN3Parser-beta/4.0-w-mergeHN2</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h1&gt;&lt;p&gt;因为Parsing的需要，现开始调研Semantic Knowledge相关的知识，做一些记录。:)&lt;/p&gt;
    
    </summary>
    
    
      <category term="semantic knowledge" scheme="http://yoursite.com/tags/semantic-knowledge/"/>
    
  </entry>
  
  <entry>
    <title>GN3Parser-POS</title>
    <link href="http://yoursite.com/2017/05/09/GN3Parser-POS/"/>
    <id>http://yoursite.com/2017/05/09/GN3Parser-POS/</id>
    <published>2017-05-09T01:35:27.000Z</published>
    <updated>2019-01-21T13:49:53.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这个工作是做的POS Tagging。因为在词性句法联合模型中，遇到了阻力。从模型输出的结果来看，词性的Accuracy明显低于我们在GN3Parser中利用的自动词性的Accuracy。所以，我们暂停了Joint-GN3Parser的工作，暂时全面的重现Google论文的词性结果。<br><a id="more"></a></p><h1 id="确定模型的输入"><a href="#确定模型的输入" class="headerlink" title="确定模型的输入"></a>确定模型的输入</h1><ol><li>在Google论文中，提到了一些输入： word，cluster，character n-gram up to length 3，the tag predicted for the previous 4 tokens</li><li>我们目前使用的输入：word，character n-gram up to lenght 2，the tag predicted for the previous 4 tokens.</li></ol><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p>目前我们最好的实验结果在Greedy过程中比Google论文中的结果(94.56%)还差0.3%.<br><strong>Dev数据集</strong></p><table><thead><tr><th><strong>comments</strong></th><th><strong>POS</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>w/o previous 4 predicted tags</td><td>94.62%</td><td>gpu-no-1:~/GN3Parser-POS/debug-v0.2</td></tr><tr><td>w previous 4 predicted tags</td><td>94.60%</td><td>gpu-no-1:~/GN3Parser-POS/debug-v0.3</td></tr></tbody></table><p><strong>Test数据集</strong></p><table><thead><tr><th><strong>comments</strong></th><th><strong>POS</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>w/o previous 4 predicted tags</td><td>94.21%</td><td>gpu-no-1:~/GN3Parser-POS/debug-v0.2</td></tr><tr><td>w previous 4 predicted tags</td><td>94.28%</td><td>gpu-no-1:~/GN3Parser-POS/debug-v0.3</td></tr></tbody></table><p><img src="/images/GN3Parser-POS/gn3parser-pos.bmp" alt="POS-Accuracy"></p><p>目前的Global实验我已经跑过，beam大小设置成和Google论文中一样8，但是实验结果一直不可以，不论怎样调参，差不多收敛的时候，POS Accuracy都是只能够达到94.2%左右，完全赶不上Greedy的效果；已经确认过代码，目前看不到什么问题。</p><h1 id="5-fold实验"><a href="#5-fold实验" class="headerlink" title="5-fold实验"></a>5-fold实验</h1><p>跑了POS的5-fold的实验：gpu-no-1:~/n-fold/n-fold<br>train: 95.01%  |dev: 94.60%  |test: 94.29%</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;这个工作是做的POS Tagging。因为在词性句法联合模型中，遇到了阻力。从模型输出的结果来看，词性的Accuracy明显低于我们在GN3Parser中利用的自动词性的Accuracy。所以，我们暂停了Joint-GN3Parser的工作，暂时全面的重现Google论文的词性结果。&lt;br&gt;
    
    </summary>
    
    
      <category term="work" scheme="http://yoursite.com/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>Joint-GN3Parser工程</title>
    <link href="http://yoursite.com/2017/04/05/Joint-GN3Parser%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/04/05/Joint-GN3Parser工程/</id>
    <published>2017-04-05T06:10:53.000Z</published>
    <updated>2019-01-21T13:49:53.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Joint-GN3Parser工程"><a href="#Joint-GN3Parser工程" class="headerlink" title="Joint-GN3Parser工程"></a>Joint-GN3Parser工程</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Joint-GN3Parser是GN3Parser的一个变种,基于GN3Parser做的一个联合词性句法分析的项目.<br><a id="more"></a></p><h2 id="相关实验的记录"><a href="#相关实验的记录" class="headerlink" title="相关实验的记录"></a>相关实验的记录</h2><h3 id="加入了Load-pretrained-Model的功能-2017-5-27"><a href="#加入了Load-pretrained-Model的功能-2017-5-27" class="headerlink" title="加入了Load pretrained Model的功能 (2017-5-27)"></a>加入了Load pretrained Model的功能 (2017-5-27)</h3><p>因为Joint-GN3Parser的效果一直不是很好，所以考虑，利用训练好的GN3Parser-POS和GN3Parser的两个模型，作为pretrained model，初始化Joint-GN3Parser。看看效果如何？同时也发现了Joint-GN3Parser中的一个bug，在Shift动作之后，在POS动作的情况下，获取当前的标注的词性的word index的时候，获取的还是State._j所以，是存在着问题的，因为_j始终都是队列中queue0的位置，而现在需要进行词性标注的是stack0的位置。在修正了这个bug，之后，我发现UAS还是没有什么变化。以下便是这一版本代码的效果记录：<br><strong>Greedy</strong></p><table><thead><tr><th><strong>comments</strong></th><th><strong>Corpus</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>without pretrained model</td><td>Dev</td><td>94.15%</td><td>80.22%</td><td>75.98%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.9</td></tr><tr><td>without pretrained model</td><td>Test</td><td>94.08%</td><td>80.12%</td><td>76.07%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.9</td></tr><tr><td>with pretrained model</td><td>Dev</td><td>94.33%</td><td>80.71%</td><td>76.79%</td><td>gpu-no-1:~/Joint-GN3Parser/1.9-w-pretrained-model</td></tr><tr><td>with pretrained model</td><td>Test</td><td>94.07%</td><td>80.76%</td><td>76.69%</td><td>gpu-no-1:~/Joint-GN3Parser/1.9-w-pretrained-model</td></tr></tbody></table><p><strong>Global</strong></p><table><thead><tr><th><strong>comments</strong></th><th><strong>Corpus</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>without pretrained model</td><td>Dev</td><td>94.54%</td><td>83.63%</td><td>79.92%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.9</td></tr><tr><td>without pretrained model</td><td>Test</td><td>94.36%</td><td>83.56%</td><td>79.76%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.9</td></tr><tr><td>with pretrained model</td><td>Dev</td><td>94.50%</td><td>83.55%</td><td>79.88%</td><td>gpu-no-1:~/Joint-GN3Parser/1.9-w-pretrained-model</td></tr><tr><td>with pretrained model</td><td>Test</td><td>94.09%</td><td>83.43%</td><td>79.66%</td><td>gpu-no-1:~/Joint-GN3Parser/1.9-w-pretrained-model</td></tr></tbody></table><h3 id="修正了抽取Left-Label时的错误-2017-5-15"><a href="#修正了抽取Left-Label时的错误-2017-5-15" class="headerlink" title="修正了抽取Left_Label时的错误 (2017-5-15)"></a>修正了抽取Left_Label时的错误 (2017-5-15)</h3><p>因为在GN3Parser中，抽取Left_arc 和 Left_label的特征是一样的，这两个action是同时执行的，所以这两个动作的特征模板时一样的；但是在联合模型中，将Left_arc 和Left_label两个动作拆开了，首先执行Left_arc，那么栈里面的元素就会有变化，所以Left_label抽取出来的特征就和原来的不一样了。所以需要修正。<br>（<font color="red">log已经覆盖</font>）</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>0.05</td><td>93.89%</td><td>79.87%</td><td>75.82%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.8</td></tr><tr><td>Test</td><td>0.05</td><td>93.63%</td><td>79.69%</td><td>75.42%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.8</td></tr></tbody></table><p>从实验结果来看，非但Parsing的结果没有得到很好的提升，连POS的准确率都下降了不少，觉着与预想的不合，很奇怪；应该不是代码的问题，就修改了一点点代码。需要验证一下抽取特征的代码和predict的时候代码。<br>在写GN3Parser分为三个模型的时候，发现了一个bug，在right_label的操作：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next-&gt;action = action</span><br></pre></td></tr></table></figure></p><p>这一部分的代码错误，应当是ac！这样子就把right_arc这一个动作直接复制到了action里面，以后所有的动作都会是right_label！！！但是这个bug好像没有影响？因为在Joint模型中，有奇数步和偶数步的作用。<br>我们看对应的Global的实验结果。（在正确的Feature List的结果下）(2017-5-17)</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>0.03</td><td>94.26%</td><td>83.46%</td><td>79.92%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.8</td></tr><tr><td>Test</td><td>0.03</td><td>93.95%</td><td>83.69%</td><td>79.76%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.8</td></tr></tbody></table><h3 id="增加了prefix和suffix-length-1的特征用作POS-2017-5-10"><a href="#增加了prefix和suffix-length-1的特征用作POS-2017-5-10" class="headerlink" title="增加了prefix和suffix, length=1的特征用作POS(2017-5-10)"></a>增加了prefix和suffix, length=1的特征用作POS(2017-5-10)</h3><p>因为在GN3Parser-POS中，POS准确率达到了94.2%在test数据集上，所以，尝试将POS特征集合(<strong>Greedy</strong>)。</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>0.03</td><td>94.16%</td><td>79.59%</td><td>75.25%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.7-greedy-eta-0.03</td></tr><tr><td>Dev</td><td>0.05</td><td>94.08%</td><td>79.91%</td><td>75.48%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.7-greedy-eta-0.05</td></tr><tr><td>Dev</td><td>0.08</td><td>93.98%</td><td>79.16%</td><td>74.66%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.7</td></tr><tr><td>Test</td><td>0.03</td><td>94.00%</td><td>79.79%</td><td>75.31%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.7-greedy-eta-0.03</td></tr><tr><td>Test</td><td>0.05</td><td>93.92%</td><td><strong>80.06%</strong></td><td>75.59%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.7-greedy-eta-0.05</td></tr><tr><td>Test</td><td>0.08</td><td>93.94%</td><td>79.72%</td><td>75.18%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.7</td></tr></tbody></table><h3 id="修改POS的相关特征-2017-4-30"><a href="#修改POS的相关特征-2017-4-30" class="headerlink" title="修改POS的相关特征(2017-4-30)"></a>修改POS的相关特征(2017-4-30)</h3><p>再次调研SyntaxNet的词性标注的特征模板，发现其不仅仅使用了Word Embedding，还使用了Char Embedding，使用了前缀和后缀，length=2<br>另外，我貌似发现了为什么GPU服务器上面编译就不能使用MKL加速，乃是因为不知道为什么在GPU服务器上面编译的时候，main总不是最有一个编译的，编译顺序有点不对。</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev   (64;8;8-128)</td><td>0.08</td><td>79.91%</td><td>75.27%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.5.3</td></tr><tr><td>Test  (64;8;8-128)</td><td>0.08</td><td>80.19%</td><td>75.49%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.5.3　</td></tr><tr><td>Dev   (64;50;50-200;200)</td><td>0.08</td><td>80.12%</td><td>75.49%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.5.4</td></tr><tr><td>Test  (64;50;50-200;200)</td><td>0.08</td><td>80.32%</td><td>75.63%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.5.4</td></tr></tbody></table><h3 id="修改词性Embedding的使用-2017-4-29"><a href="#修改词性Embedding的使用-2017-4-29" class="headerlink" title="修改词性Embedding的使用(2017-4-29)"></a>修改词性Embedding的使用(2017-4-29)</h3><p>一个想法：将模型预测出来的词性和1-best词性使用同一套embedding，测试这样子的模型效果如何(实验完)</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>0.05</td><td>79.91%</td><td>75.35%</td><td>m175 ~/Joint-GN3Parser/v1.5.2-greedy-eta-0.05</td></tr><tr><td>Dev</td><td>0.08</td><td>79.85%</td><td>75.34%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.2-greedy-eta-0.08</td></tr><tr><td>Dev(Bad hyper parameter)</td><td>0.12</td><td>30%</td><td></td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.2-greedy-eta-0.12</td></tr><tr><td>Test</td><td>0.05</td><td><strong>80.36%</strong></td><td><strong>75.61%</strong></td><td>m175 ~/Joint-GN3Parser/v1.5.2-greedy-eta-0.05</td></tr><tr><td>Test</td><td>0.08</td><td>80.10%</td><td>75.40%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.2-greedy-eta-0.08</td></tr><tr><td>Test</td><td>0.12</td><td></td><td></td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.2-greedy-eta-0.12</td></tr></tbody></table><p>在v1.5.2-greedy-eta-0.05得到的Greedy模型的前提下，我们进行了Global的实验，实验结果如下：(2017-5-2)</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>0.01</td><td>82.09%</td><td>78.05%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.2-global-eta-0.01</td></tr><tr><td>Test</td><td>0.01</td><td>82.51%</td><td>78.23%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.2-global-eta-0.01</td></tr><tr><td>Dev</td><td>0.03</td><td>82.80%</td><td>78.65%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.2-global-eta-0.03</td></tr><tr><td>Test</td><td>0.03</td><td>83.26%</td><td>79.02%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.2-global-eta-0.03</td></tr></tbody></table><p>从实验结果来看，在将1-best词性添加到特征模板里面，又使用同一套词性Embedding，Global的结果并没有得到很好的改善。反而没有原先的来得高（UAS：84.10%，不使用1-best词性，不知道是什么的原因）</p><h3 id="再添加预测POS的相关特征-2017-4-26"><a href="#再添加预测POS的相关特征-2017-4-26" class="headerlink" title="再添加预测POS的相关特征 (2017-4-26)"></a>再添加预测POS的相关特征 (2017-4-26)</h3><p>用于POS预测的特征模板如下图所示：<br><img src="/images/Joint-GN3Parser/FeatureTemplates-POS.bmp" alt="FeatureTemplates"></p><p>首先记录一下加入了额外特征用作POS的效果，Greedy(现在模型跑得越来越慢)<br><strong>结论</strong>:在添加了State里面的相关特征之后，模型的效果反而变差了，一定程度上面可以说明我们添加的这几个特征是无效的、或者说是效果更差的(2017-4-30)</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>0.05</td><td>78.00%</td><td>73.06%</td><td>m175 ~/Joint-GN3Parser/v1.5.1-greedy-eta-0.08</td></tr><tr><td>Test</td><td>0.05</td><td>78.61%</td><td>73.65%</td><td>m175 ~/Joint-GN3Parser/v1.5.1-greedy-eta-0.08</td></tr><tr><td>Dev</td><td>0.08</td><td>77.04%</td><td>71.98%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.1-greedy-eta-0.08</td></tr><tr><td>Test</td><td>0.08</td><td>77.79%</td><td>72.62%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.1-greedy-eta-0.08</td></tr></tbody></table><p>从目前的结果来看，我们添加的几个用于POS的特征，反而起到了反作用。UAS反而降低了，可能是超参没有调整好，也有可能添加的几个特征就是不会有很好的效果。。</p><h3 id="添加了1-best-词性特征的效果-2017-4-25"><a href="#添加了1-best-词性特征的效果-2017-4-25" class="headerlink" title="添加了1-best 词性特征的效果 (2017-4-25)"></a>添加了1-best 词性特征的效果 (2017-4-25)</h3><p>在尝试了将Joint-GN3Parser的模型按照功能分隔开之后，我们还尝试了将1-best tags词性加入到模型中，分别在Atomic Model, Left Label, Right Label抽取特征的时候，在词性特征的里面加上1-best tags的信息。所以，总共的磁性特征的总数为15 + 18 = 33.使用的Atomic、Left Label、Right Label的特征模板如下图所示：</p><p><img src="/images/Joint-GN3Parser/FeatureTemplates-w-auto-tags-features.bmp" alt="FeatureTemplates"><br>记录一下在Greedy训练过程中，相关结果。</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev Corpus</td><td>0.03</td><td>79.41%</td><td>75.11%</td><td>m175 ~/Joint-GN3Parser/v1.5-greedy-eta-0.03</td></tr><tr><td>Dev Corpus</td><td>0.05</td><td>79.95%</td><td>75.34%</td><td>m175 ~/Joint-GN3Parser/v1.5-greedy-eta-0.05</td></tr><tr><td>Dev Corpus</td><td>0.08</td><td>79.46%</td><td>75.12%</td><td>m175 ~/Joint-GN3Parser/v1.5-greedy</td></tr><tr><td>Test Corpus</td><td>0.03</td><td>79.93%</td><td>75.44%</td><td>m175 ~/Joint-GN3Parser/v1.5-greedy-eta-0.03</td></tr><tr><td>Test Corpus</td><td>0.05</td><td>80.00%</td><td>75.42%</td><td>m175 ~/Joint-GN3Parser/v1.5-greedy-eta-0.05</td></tr><tr><td>Test Corpus</td><td>0.08</td><td><strong>80.12%</strong></td><td><strong>75.57%</strong></td><td>m175 ~/Joint-GN3Parser/v1.5-greedy</td></tr><tr><td>eta设置不对，实验直接kill</td><td>0.12</td><td>30%</td><td>3%</td><td>m175 ~/Joint-GN3Parser/v1.5-greedy-eta-0.12</td></tr></tbody></table><p>暂时使用了Test数据集80.03%那个模型、进行Global的实验。(2017-4-29)</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev Corpus 文件夹名字忘记修改了～</td><td>0.01</td><td>82.70%</td><td>78.66%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5-global-eta-0.03</td></tr><tr><td>Test Corpus</td><td>0.01</td><td>83.20%</td><td>79.10%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5-global-eta-0.03</td></tr><tr><td>Dev Corpus</td><td>0.03</td><td>83.07%</td><td>78.99%</td><td>m175 ~/Joint-GN3Parser/v1.5-global-eta-0.03</td></tr><tr><td>Test Corpus</td><td>0.03</td><td>83.53%</td><td>79.32%</td><td>m175 ~/Joint-GN3Parser/v1.5-global-eta-0.03</td></tr></tbody></table><h3 id="Joint-GN3Parser-beam-size的影响"><a href="#Joint-GN3Parser-beam-size的影响" class="headerlink" title="Joint-GN3Parser beam size的影响"></a>Joint-GN3Parser beam size的影响</h3><p>因为现在想起来现在Global的实验beam size = 32，但是先前GN3Parser得到最好的效果的beam size = 64</p><table><thead><tr><th><strong>Comments</strong></th><th><strong>Beam Size</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>32</td><td>84.31%</td><td>80.70%</td><td>m175 ~/GN3Parser-beta/chinese-global-beam-32-fix-save-model</td></tr><tr><td>GN3Parser移除3个queue POS特征</td><td>32</td><td>83.73%</td><td>79.94%</td><td>m175 ~/GN3Parser-beta/3.8-debug</td></tr><tr><td>Joint-GN3Parser</td><td>32</td><td>83.61%</td><td>79.56%</td><td>m175 ~/Joint-GN3Parser/v1.3.1-global-eta-0.03</td></tr><tr><td>GN3Parser</td><td>64</td><td>84.60%</td><td>81.02%</td><td>gpu-no-1:~/GN3Parser-beta/global_v_3.5</td></tr><tr><td>GN3Parser移除3个queue POS特征（没有该实验）</td><td>64</td><td></td><td></td><td></td></tr><tr><td>Joint-GN3Parser</td><td>64</td><td>84.10%</td><td>80.03%</td><td>m175 ~/Joint-GN3Parser/v1.3.1-global-eta-0.03-beam-64</td></tr></tbody></table><h3 id="Joint-GN3Parser的情况说明-2017-4-14"><a href="#Joint-GN3Parser的情况说明-2017-4-14" class="headerlink" title="Joint-GN3Parser的情况说明(2017-4-14)"></a>Joint-GN3Parser的情况说明(2017-4-14)</h3><p>在确定的新的架构之后,着手改变原先的架构,新的架构的代码的Greedy部分已经编写完成,进行了初步的实验.<br>有一些实验数据,记录如下:</p><ol><li>统计了在Conll09的Chinese的数据当中,通过依存句法分析,得到的各种的States的数量,其中,我将POP_ROOT, SHIFT, LEFT_ARC, RIGHT_ARC 统称为Atomic States.</li></ol><table><thead><tr><th><strong>Atomic States</strong></th><th><strong>POS States</strong></th><th><strong>Left Label</strong></th><th><strong>Right Label</strong></th></tr></thead><tbody><tr><td>1240397</td><td>609060</td><td>361100</td><td>247960</td></tr></tbody></table><ol start="2"><li><p>现在我阐述一下我几个Classifier的简单实现情况:atomic, left label, right label classifier的模型、抽取的特征等内容与GN3Parser完全一致，采取48个特征。但是POS classifier有所区别，在预测词性的时候，我们目前采用window size = 3的特征，所以在POS classifier中，我们的输入是7个word embedding的组合，模型的 hidden layer size和前面提到的atomic等模型一致，激活函数等都是一样的。</p></li><li><p>几个实验记录（汇报的均是Test数据集的结果）：</p></li></ol><table><thead><tr><th><strong>comments</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>a batch:20\10\6\4 除以state总数 <em>Greedy</em> 没有加greedy 非法操作排除</td><td>92.93%</td><td>79.49%</td><td>71.95%</td><td>m175 ~/Joint-GN3Parser/v1.3-greedy-eta-0.12</td></tr><tr><td>a batch:20\10\6\4 除以state总数 <em>Greedy</em> 没有加greedy 非法操作排除 eta = 0.16</td><td>92.71%</td><td>79.08%</td><td>71.52%</td><td>m175 ~/Joint-GN3Parser/v1.3-greedy-eta-0.16</td></tr><tr><td>a batch:20\10\6\4 除以state总数 <em>Greedy</em></td><td>92.85%</td><td>79.28%</td><td>74.78%</td><td>m175 ~/Joint-GN3Parser/v1.3.2-greedy-eta-0.12</td></tr><tr><td>a batch:32\32\32\32 除以single state bath=32 <em>Greedy</em></td><td>92.89%</td><td>79.76%</td><td>75.22%</td><td>m175 ~/Joint-GN3Parser/v1.3.3-greedy-eta-0.12</td></tr><tr><td><font color="blue"><em>Global</em></font></td><td>93.77%</td><td>83.64%</td><td>79.59%</td><td>m175 ~/Joint-GN3Parser/v1.3.1-global-eta-0.01</td></tr></tbody></table><p>(一下有关Joint-GN3Parser的实验中，全部都是使用的老的架构)记录最初的几个实验(这里只汇报dev的结果，如果test的结果有明显的提升，单独汇报)：<br>在这几个试验中，超参都没有调试，都是沿用的原来的GN3Parser中的参数，除了batch有所调整外。</p><table><thead><tr><th><strong>position</strong></th><th><strong>comments</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th></tr></thead><tbody><tr><td>m175 ~/Joint-GN3Parser/debug-v1.0</td><td>该版本的实验的测试windown size=2的特征for POS，并且，batch为100\50\30\20</td><td>77.70%</td><td>69.76%</td></tr><tr><td>m175 ~/Joint-GN3Parser/1.0-test-batch</td><td>该版本的实验window size=2， batch为20\10\6\4</td><td>77.52%</td><td>69.79%</td></tr><tr><td>m175 ~/Joint-GN3Parser/debug-v1.1</td><td>window size=3, batch=20\10\6\4</td><td>77.81%</td><td>70.11%</td></tr><tr><td>m175 ~/Joint-GN3Parser/debug-1.2</td><td>window size=3, batch=20\10\6\4, 还使用了前面三个word 的tag</td><td>52.40%</td><td>37.36%</td></tr></tbody></table><p>从上面的几个实验来看，我发现了几个很奇怪的现象：</p><ol><li>batch的调整几乎没有带来任何的影响？连速度的影响都没有？已经确定不是代码的问题。我想可能的几个原因是：<ol><li>其实模型的计算，在Greedy过程的时间消耗中，占用的时间比例很少；</li><li>MKL的处理速度都快，仅仅5倍的数据根本体现不出来速度的差别</li></ol></li><li>为什么添加了词性特征后，UAS变得低得离谱？参数问题？还是词性的错误传递效果更大了？</li></ol><h3 id="初步调参（以下说明的实验结果都是老的架构的结果，将POS和其他的一些操作全部放在了同一个模型中）"><a href="#初步调参（以下说明的实验结果都是老的架构的结果，将POS和其他的一些操作全部放在了同一个模型中）" class="headerlink" title="初步调参（以下说明的实验结果都是老的架构的结果，将POS和其他的一些操作全部放在了同一个模型中）"></a>初步调参（以下说明的实验结果都是老的架构的结果，将POS和其他的一些操作全部放在了同一个模型中）</h3><p>因为baseline的结果不是很好,考虑到是不是参数的问题,现在做一个初步的调参,从实验结果来看,eta = 0.01的收敛过程和最终的效果要比 eta = 0.03 好很多.<br><strong>Global Dev</strong></p><table><thead><tr><th><strong>comments</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>eta = 0.03</td><td>93.71%</td><td>81.86%</td><td>78.28%</td><td>m175 ~/Joint-GN3Parser/debug-v0.3.1-global</td></tr><tr><td>eta = 0.01</td><td>93.89%</td><td>82.26%</td><td>78.67%</td><td>m175 ~/Joint-GN3Parser/debug-v0.3.1-global-eta-0.01</td></tr></tbody></table><p><strong>Global Test</strong></p><table><thead><tr><th><strong>comments</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>eta = 0.03</td><td>93.59%</td><td>82.34%</td><td>78.65%</td><td>m175 ~/Joint-GN3Parser/debug-v0.3.1-global</td></tr><tr><td>eta = 0.01</td><td>93.78%</td><td><strong>82.84%</strong></td><td>79.08%</td><td>m175 ~/Joint-GN3Parser/debug-v0.3.1-global-eta-0.01</td></tr></tbody></table><h3 id="baseline"><a href="#baseline" class="headerlink" title="baseline"></a>baseline</h3><p>这里的baseline如下描述:<br>基于GN3Parser的一个词性句法联合模型,在GN3Parser的基础之上,去掉了48个特征中,queue的4个特征;修改了抽取特征的相关情况,在有关POS的特征,都是使用的模型预测出来(SHIFT_T)的词性.在评价中,我们还给出了POS的Accuracy.<br><strong>Greedy</strong></p><table><thead><tr><th><strong>comments</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>baseline development</td><td>93.24%</td><td>79.48%</td><td>75.76%</td><td>m175 ~/Joint-GN3Parser/debug-v0.3.1</td></tr><tr><td>baseline test</td><td>93.28%</td><td>79.68%</td><td>75.85%</td><td>m175 ~/Joint-GN3Parser/debug-v0.3.1</td></tr><tr><td>GN3Parser移除了3个词性特征 development</td><td>–</td><td>80.46%</td><td>76.68%</td><td>m175 ~/GN3Parser-beta/3.8-debug</td></tr><tr><td>GN3Parser移除了3个词性特征 test</td><td>–</td><td>80.33%</td><td>76.45%</td><td>m175 ~/GN3Parser-beta/3.8-debug</td></tr></tbody></table><p><strong>Global</strong></p><table><thead><tr><th><strong>comments</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>baseline development</td><td>93.71%</td><td>81.86%</td><td>78.28%</td><td>m175 ~/Joint-GN3Parser/debug-v0.3.1-global</td></tr><tr><td>baseline test</td><td>93.59%</td><td>82.34%</td><td>78.65%</td><td>m175 ~/Joint-GN3Parser/debug-v0.3.1-global</td></tr><tr><td>GN3Parser移除了3个词性特征 development</td><td>–</td><td>83.59%</td><td>79.98%</td><td>m175 ~/GN3Parser-beta/3.8-debug</td></tr><tr><td>GN3Parser移除了3个词性特征 test</td><td>–</td><td>83.73%</td><td>79.94%</td><td>m175 ~/GN3Parser-beta/3.8-debug</td></tr></tbody></table><h2 id="一些比较容易忘记的代码部分"><a href="#一些比较容易忘记的代码部分" class="headerlink" title="一些比较容易忘记的代码部分"></a>一些比较容易忘记的代码部分</h2><ol><li>需要确保ROOT,UNKNOWN,NULL这三个在抽取词典的时候在最后.</li><li>如何将id 和 相对应的POS or Label对应起来?应用第一条规则,因为在抽词典的时候,会在词典的后面人为的加上”ROOT,UNKNOWN,NULL”(抽取特征的时候,会用到),所以在进行神经网络输出层的相关判断以及转换的时候,需要把最后几个开除掉,这个通过_g_num_null实现,很容易可以从代码中看出来.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Joint-GN3Parser工程&quot;&gt;&lt;a href=&quot;#Joint-GN3Parser工程&quot; class=&quot;headerlink&quot; title=&quot;Joint-GN3Parser工程&quot;&gt;&lt;/a&gt;Joint-GN3Parser工程&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Joint-GN3Parser是GN3Parser的一个变种,基于GN3Parser做的一个联合词性句法分析的项目.&lt;br&gt;
    
    </summary>
    
    
      <category term="work" scheme="http://yoursite.com/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>GN3Parser工程</title>
    <link href="http://yoursite.com/2017/02/18/GN3Parser%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/02/18/GN3Parser工程/</id>
    <published>2017-02-18T01:20:20.000Z</published>
    <updated>2019-01-21T13:49:53.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>开此博客记录在开发GN3Parser(重现SyntaxNet)过程中的一些问题(已经重现成功！！！)</p><a id="more"></a><h2 id="中文实验的一些说明"><a href="#中文实验的一些说明" class="headerlink" title="中文实验的一些说明"></a>中文实验的一些说明</h2><h3 id="中文embedding："><a href="#中文embedding：" class="headerlink" title="中文embedding："></a>中文embedding：</h3><p>中文的embedding，利用Giga数据、word2vec，15次迭代，300dim，进行训练，训练完成的embedding位于：<br>qrxia@m172 ~/data/giga/giga-300-dim</p><h3 id="实验总结-2017-5-10"><a href="#实验总结-2017-5-10" class="headerlink" title="实验总结(2017-5-10)"></a>实验总结(2017-5-10)</h3><p>已经重现了SyntaxNet，GN3Parser的实验数据总结如下：<br><img src="/images/GN3Parser/GN3Parser实验数据.png" alt="ExperimentResults"></p><p>可能是我们英文的Beam Size大小设置小了，所以英文效果才不行<br>补充的英文实验 (beam size = 64): (2017-5-12)</p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Global</td><td></td><td></td><td>Dev</td><td>m173 ~/GN3Parser-beta/baidu-1024-beam-size-64</td></tr><tr><td>GN3Parser</td><td>Global</td><td></td><td></td><td>Test</td><td>m173 ~/GN3Parser-beta/baidu-1024-beam-size-64</td></tr></tbody></table><h3 id="利用GN3Parser-POS-5-fold实验的数据进行GN3Parser的实验-2017-5-22"><a href="#利用GN3Parser-POS-5-fold实验的数据进行GN3Parser的实验-2017-5-22" class="headerlink" title="利用GN3Parser-POS 5-fold实验的数据进行GN3Parser的实验(2017-5-22)"></a>利用GN3Parser-POS 5-fold实验的数据进行GN3Parser的实验(2017-5-22)</h3><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Greedy</td><td>80.48%</td><td>76.66%</td><td>Dev with NN autoPOS</td><td>gpu-no-1:~/GN3Parser-beta/3.9.9-w-NN-autoPOS</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>80.32%</td><td>76.34%</td><td>Test with NN autoPOS</td><td>gpu-no-1:~/GN3Parser-beta/3.9.9-w-NN-autoPOS</td></tr><tr><td>GN3Parser</td><td>Global</td><td>82.77%</td><td>78.95%</td><td>Dev</td><td>gpu-no-1:~/GN3Parser-beta/3.9.9-w-NN-autoPOS</td></tr><tr><td>GN3Parser</td><td>Global</td><td>83.11%</td><td>79.12%</td><td>Test</td><td>gpu-no-1:~/GN3Parser-beta/3.9.9-w-NN-autoPOS</td></tr></tbody></table><h3 id="查看百度方面提供的POS的准确率-2017-5-17"><a href="#查看百度方面提供的POS的准确率-2017-5-17" class="headerlink" title="查看百度方面提供的POS的准确率(2017-5-17)"></a>查看百度方面提供的POS的准确率(2017-5-17)</h3><p>Train: 94.78% | Dev: 94.33% | Test: 94.23%</p><h3 id="验证NN-POS-Tagger的词性是否真的不好使-2017-6-3"><a href="#验证NN-POS-Tagger的词性是否真的不好使-2017-6-3" class="headerlink" title="验证NN POS Tagger的词性是否真的不好使(2017-6-3)"></a>验证NN POS Tagger的词性是否真的不好使(2017-6-3)</h3><p>因为在GN3Parser的后来的版本代码中，GN3Parser-POS输出的词性在Parsing效果中并不是很好。我怀疑是代码中可能存在着bug，所以，跑一个验证实验。利用v3.9.5版本代码（该版本代码在百度提供的数据上面效果是正常的），处理了相关的数据，看一下是否我的词性真的不行？！（明明我的词性效果要好于百度提供的词性）</p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Greedy</td><td>80.99%</td><td>77.31%</td><td>Dev</td><td>m175 ~/GN3Parser-beta/3.9.5-w-NN-POS</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>80.90%</td><td>77.01%</td><td>Test</td><td>m175 ~/GN3Parser-beta/3.9.5-w-NN-POS</td></tr><tr><td>GN3Parser</td><td>Global</td><td>84.35%</td><td>80.91%</td><td>Dev</td><td>m175 ~/GN3Parser-beta/3.9.5-w-NN-POS</td></tr><tr><td>GN3Parser</td><td>Global</td><td>84.33%</td><td>80.72%</td><td>Test</td><td>m175 ~/GN3Parser-beta/3.9.5-w-NN-POS</td></tr></tbody></table><p>src-v3.9.8的代码应该都是可以的。因为从下面的试验中，我们可以看出来，效果还是在预想中的。<br>经过查看相关的代码，我发现，src-v3.9.9的代码还是沿用的“精简”Label的特征，但是应该不会造成这么严重的影响。正在做相关的实验进行验证。(2017-6-5)</p><table><thead><tr><th><strong>Corpus</strong></th><th><strong>method</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>Greedy</td><td>80.99%</td><td>77.31%</td><td>baidu data</td><td>m175 ~/GN3Parser-beta/3.9.5-w-NN-POS</td></tr><tr><td>Test</td><td>Greedy</td><td>80.90%</td><td>77.01%</td><td>baidu data</td><td>m175 ~/GN3Parser-beta/3.9.5-w-NN-POS</td></tr><tr><td>Dev</td><td>Global</td><td>84.35%</td><td>80.91%</td><td>baidu data</td><td>m175 ~/GN3Parser-beta/3.9.5-w-NN-POS</td></tr><tr><td>Test</td><td>Global</td><td>84.33%</td><td>80.72%</td><td>baidu data</td><td>m175 ~/GN3Parser-beta/3.9.5-w-NN-POS</td></tr><tr><td>Dev</td><td>Greedy</td><td>79.22%</td><td>75.25%</td><td>3.9.9 baidu data</td><td>gpu-no-1:~/GN3Parser-beta/3.9.9-w-baidu-data</td></tr><tr><td>Test</td><td>Greedy</td><td>80.34%</td><td>76.24%</td><td>3.9.9 baidu data</td><td>gpu-no-1:~/GN3Parser-beta/3.9.9-w-baidu-data</td></tr><tr><td>Dev</td><td>Greedy</td><td>79.24%</td><td>75.36%</td><td>3.9.9.1 baidu data</td><td>m175 ~/GN3Parser-beta/3.9.9.1-w-baidu-data</td></tr><tr><td>Test</td><td>Greedy</td><td>79.81%</td><td>75.80%</td><td>3.9.9.1 baidu data</td><td>m175 ~/GN3Parser-beta/3.9.9.1-w-baidu-data</td></tr><tr><td>Dev</td><td>Greedy</td><td>79.24%</td><td>75.36%</td><td>3.9.9.2 baidu data</td><td>m175 ~/GN3Parser-beta/3.9.9.2-w-baidu-data</td></tr><tr><td>Test</td><td>Greedy</td><td>79.80%</td><td>75.80%</td><td>3.9.9.2 baidu data</td><td>m175 ~/GN3Parser-beta/3.9.9.2-w-baidu-data</td></tr></tbody></table><h3 id="将GN3Parser修改成3个模型-2017-5-16"><a href="#将GN3Parser修改成3个模型-2017-5-16" class="headerlink" title="将GN3Parser修改成3个模型(2017-5-16)"></a>将GN3Parser修改成3个模型(2017-5-16)</h3><p>因为联合模型的需要，我们尝试将原先的GN3Parser拆分为3个模型，分别进行Action的预测，总计分为以下三个模型：Atomic Model (POP_ROOT, SHIFT, LEFT_ARC, RIGHT_ARC), Left_label Model, Right_label Model.</p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Greedy</td><td>–</td><td>–</td><td>Dev w correct feature list</td><td>m175 ~/GN3Parser-beta/debug-3.9.5</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>80.90%</td><td>76.94%</td><td>Dev w error feature list</td><td>m175 ~/GN3Parser-beta/debug-3.9.6</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>–</td><td>–</td><td>Test w correct feature list</td><td>m175 ~/GN3Parser-beta/debug-3.9.5</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>81.00%</td><td>77.00%</td><td>Test w error feature list</td><td>m175 ~/GN3Parser-beta/debug-3.9.6</td></tr><tr><td>GN3Parser</td><td>Global</td><td>84.45%</td><td>80.91%</td><td>Dev w correct feature list</td><td>m175 ~/GN3Parser-beta/debug-3.9.5</td></tr><tr><td>GN3Parser</td><td>Global</td><td><strong>84.76%</strong></td><td><strong>81.12%</strong></td><td>Test w correct feature list</td><td>m175 ~/GN3Parser-beta/debug-3.9.5</td></tr></tbody></table><p>上面的打上横线的实验结果log被覆盖掉了～</p><h3 id="对Label的特征模板的测试-2017-5-19"><a href="#对Label的特征模板的测试-2017-5-19" class="headerlink" title="对Label的特征模板的测试(2017-5-19)"></a>对Label的特征模板的测试(2017-5-19)</h3><p>在以前的实验中，我们发现一个貌似“错误”的现象：在我们将GN3Parser拆分成三个模型的过程中，因为没有考虑到Arc的影响，即在做完Arc操作之后(Left Arc, Right Arc)，栈里面的位置已经发生了变化，但是我们没有考虑到这个情况，如果还是沿用原来的特征抽取函数，那么就会出现抽取的特征并不是我们原来想要使用的特征。但是，结果表明，即便我们抽取“错误”的Label 特征模板，Parser的效果并没有很大的下降 (Greedy)。于是，我们便思考，这是为何？最有可能的就是，无论是“正确”的Label的特征模板，还是“错误”的特征模板，都包含了必要的信息for Label action，于是，我们尝试了精简特征模板，尝试了下列的实验：<br><img src="/images/GN3Parser/FeatureTemplates-Label.bmp" alt="LabelFeatureTemplates"></p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Greedy</td><td>80.72%</td><td>76.92%</td><td>Dev 1024*1024</td><td>m175 ~/GN3Parser-beta/3.9.7-1024</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>81.11%</td><td>77.30%</td><td>Test 1024*1024</td><td>m175 ~/GN3Parser-beta/3.9.7-1024</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>80.37%</td><td>76.57%</td><td>Dev 200*200</td><td>m175 ~/GN3Parser-beta/3.9.8-200</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>80.70%</td><td>76.76%</td><td>Test 200*200</td><td>m175 ~/GN3Parser-beta/3.9.8-200</td></tr><tr><td>GN3Parser</td><td>Global</td><td>84.10%</td><td>80.47%</td><td>Dev 1024*1024</td><td>gpu-no-1:~/GN3Parser-beta/3.9.8-1024</td></tr><tr><td>GN3Parser</td><td>Global</td><td>84.42%</td><td>80.71%</td><td>Test 1024*1024</td><td>gpu-no-1:~/GN3Parser-beta/3.9.8-1024</td></tr></tbody></table><p>从实验的结果来看，我们“精简”之后的Label特征并没有导致明显的效果下降；但是，仍旧没有达到之前的水平！(2017-5-24)</p><h3 id="特征的使用"><a href="#特征的使用" class="headerlink" title="特征的使用"></a>特征的使用</h3><p>特征的使用如下图所示,总计有48个特征.<br><img src="/images/GN3Parser/FeatureTemplates.bmp" alt="FeatureTemplates"></p><h3 id="统一的实验汇报"><a href="#统一的实验汇报" class="headerlink" title="统一的实验汇报"></a>统一的实验汇报</h3><p>中文:(<strong>已经达到了Google论文的结果</strong>)<br>中文的全部数据都是projective的,因为在SyntaxNet上面,并没有能够重现Google论文结果,所以下面中文的数据中,并没有SyntaxNet的相关信息:<br><strong>Dev</strong>:</p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Greedy</td><td>m175 ~/GN3Parser-beta/baidu-conll-09-chinese</td><td>81.32%</td><td>77.68%</td><td>Greedy Dev w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>gpu-no-1:~/GN3Parser-beta/greedy_v_3.5</td><td>81.24%</td><td>77.10%</td><td>Greedy Dev w k best tags</td></tr><tr><td>GN3Parser</td><td>Global</td><td>m175 ~/GN3Parser-beta/chinese-global-beam-32-fix-save-model</td><td>84.07%</td><td>80.54%</td><td>Global Dev w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/global_v_3.5</td><td>84.58%</td><td>81.07%</td><td>Global Dev w k best tags</td></tr></tbody></table><p><strong>Test</strong>:</p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Greedy</td><td>m175 ~/GN3Parser-beta/chinese-global-beam-32-fix-save-model</td><td>81.31%</td><td>77.60%</td><td>Greedy Test w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>gpu-no-1:~/GN3Parser-beta/greedy_v_3.5</td><td><strong>81.72%</strong></td><td><strong>78.14%</strong></td><td>Greedy Test w/ k best tags</td></tr><tr><td>Google论文</td><td>Greedy</td><td></td><td>81.29%</td><td>77.29%</td><td>Greedy Test w/ k best tags</td></tr><tr><td>GN3Parser</td><td>Global</td><td>m175 ~/GN3Parser-beta/chinese-global-beam-32-fix-save-model</td><td>84.31%</td><td>80.70%</td><td>Global Test w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/global_v_3.5</td><td><strong>84.60%</strong></td><td><strong>81.02%</strong></td><td>Global Test w/ k best tags</td></tr><tr><td>Google论文</td><td>Global</td><td></td><td><strong>84.72%</strong></td><td>80.85%</td><td>Global Test w/ k best tags</td></tr></tbody></table><p>中文补充的几个实验, beam size的影响<br><strong>w/o k best tags</strong></p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Global</td><td>m175 ~/GN3Parser-beta/chinese-global-beam-32-fix-save-model</td><td>84.07%</td><td>80.54%</td><td>Global <strong>Dev</strong> w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Global</td><td>m172 ~/GN3Parser-beta/3.7-chinese-beam-<strong>64</strong></td><td><strong>84.33%</strong></td><td><strong>80.82%</strong></td><td>Global <strong>Dev</strong> w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Global</td><td>m175 ~/GN3Parser-beta/chinese-global-beam-32-fix-save-model</td><td>84.31%</td><td>80.70%</td><td>Global <strong>Test</strong> w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Global</td><td>m172 ~/GN3Parser-beta/3.7-chinese-beam-<strong>64</strong></td><td><strong>84.87%</strong></td><td><strong>81.17%</strong></td><td>Global <strong>Test</strong> w/o k best tags</td></tr></tbody></table><p><strong>w k best tags</strong></p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/global_v_3.5</td><td>84.58%</td><td>81.07%</td><td>Global <strong>Dev</strong> w k best tags, beam size=32</td></tr><tr><td>GN3Parser</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/global_v_3.5</td><td><strong>84.60%</strong></td><td><strong>81.02%</strong></td><td>Global <strong>Test</strong> w/ k best tags, beam size=32</td></tr><tr><td>GN3Parser</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/global_v_3.5_beam_64</td><td>84.45%</td><td>81.04%</td><td>Global <strong>Dev</strong> w/ k best tags, beam size=64</td></tr><tr><td>GN3Parser</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/global_v_3.5_beam_64</td><td><strong>84.78%</strong></td><td><strong>81.16%</strong></td><td>Global <strong>Test</strong> w/ k best tags, beam size=64</td></tr></tbody></table><h4 id="探究正交分布初始化weight的影响-2017-4-12"><a href="#探究正交分布初始化weight的影响-2017-4-12" class="headerlink" title="探究正交分布初始化weight的影响(2017-4-12)"></a>探究正交分布初始化weight的影响(2017-4-12)</h4><p>从下面的实验结果可以看出来, orthogonality weight于我们的GN3Parser并没有什么用处.因为Global过程已经和parameter没有什么关系,所以,这里,我们仅仅跑了Greedy的实验.</p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Greedy</td><td>m175 ~/GN3Parser-beta/orthogonality-3.9</td><td>80.99%</td><td>77.40%</td><td>greedy <strong>dev</strong> w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>m175 ~/GN3Parser-beta/baidu-conll-09-chinese</td><td>81.32%</td><td>77.68%</td><td>Greedy Dev w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>m175 ~/GN3Parser-beta/orthogonality-3.9</td><td>81.16%</td><td>77.42%</td><td>greedy <strong>test</strong> w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>m175 ~/GN3Parser-beta/chinese-global-beam-32-fix-save-model</td><td>81.31%</td><td>77.60%</td><td>Greedy Test w/o k best tags</td></tr></tbody></table><p>英文:<br>英文数据:</p><table><thead><tr><th></th><th><strong>train</strong></th><th><strong>dev</strong></th><th><strong>test</strong></th></tr></thead><tbody><tr><td>Total sentences</td><td>39832</td><td>1700</td><td>2416</td></tr><tr><td>Projective sentences</td><td>39793</td><td>1697</td><td>2415</td></tr><tr><td>NonProjective sentences</td><td>39</td><td>3</td><td>1</td></tr></tbody></table><p>下面的数据中,train,dev 采用projective部分; test 采用total数据<br><strong>Dev数据集的效果</strong>:</p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>m173 ~/GN3Parser-beta/baidu-1024-div-batch-size-eta-0.01</td><td>93.10%</td><td>90.90%</td><td>Greedy Dev</td></tr><tr><td>gpu-no-1:~/SyntaxNet/models/syntaxnet/nndep_baidu_data_1024_w_embedding_baidu_config</td><td>92.90%</td><td>–</td><td>Greedy Dev</td></tr><tr><td>m173 ~/GN3Parser-beta/baidu-1024-div-batch-size-eta-0.01</td><td>94.22%</td><td>92.05%</td><td>Global Dev</td></tr><tr><td>gpu-no-1:~/SyntaxNet/models/syntaxnet/nndep_baidu_data_1024_w_embedding_baidu_config</td><td>94.19%</td><td>–</td><td>Global Dev</td></tr></tbody></table><p><strong>Test数据集的效果</strong>:</p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/GN3Parser-beta/baidu-1024-div-batch-size-eta-0.01</td><td>92.78%</td><td>90.64%</td><td>Greedy Test; 代码,模型copy from 173上述目录,173太挤了!</td></tr><tr><td>gpu-no-1:~/SyntaxNet/models/syntaxnet/nndep_baidu_data_1024_w_embedding_baidu_config</td><td>92.59%</td><td>–</td><td>Greedy Test</td></tr><tr><td>Google论文</td><td>92.95%</td><td>91.02%</td><td></td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/baidu-1024-div-batch-size-eta-0.01</td><td>93.79%</td><td>91.74%</td><td>Global Test; 代码,模型copy from 173上述目录,173太挤了!</td></tr><tr><td>gpu-no-1:~/SyntaxNet/models/syntaxnet/nndep_baidu_data_1024_w_embedding_baidu_config</td><td>93.76%</td><td>–</td><td>Global Test</td></tr><tr><td>Google论文</td><td>94.61%</td><td>92.79%</td></tr></tbody></table><h3 id="实验数据记录"><a href="#实验数据记录" class="headerlink" title="实验数据记录"></a>实验数据记录</h3><p>在工程的进行过程中，会记录实验数据<br>important: <em>SyntaxNet的测试数据都是不包含标点的</em><br>有些实验已经移到当前目录的bak文件夹下面了!</p><h4 id="2017-3-28"><a href="#2017-3-28" class="headerlink" title="2017-3-28"></a>2017-3-28</h4><p>除了昨日发现的config文件中的一个毛病,我们还发现了数据中的一个问题,虽说是使用k best tags, 但是语料中的CRF模型给出句子的TOP-K词性序列中,每一个word可能含有5个k best tags,但是它们的POS是一样的.也就是说,在原来我写的代码里面,在最后面的prob会覆盖掉最前面的prob,也就是prob最大的那一个,昨天修正了这个错误,在提取k best tags的时候,仅仅保留相同POS的第一个prob,也就是score最高的那一个.并且做了Greedy的实验;但是由此也会产生一些问题,如”5 best tags”,如果当前word包含相同的POS,那么也就不能满足”5”这个条件.</p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/GN3Parser-beta/greedy_v_3.5</td><td>81.24%</td><td>with SyntaxNet config and option</td></tr></tbody></table><h4 id="2017-3-27"><a href="#2017-3-27" class="headerlink" title="2017-3-27"></a>2017-3-27</h4><p>SyntaxNet英文实验: decay_steps: 4500(greedy); 150(global)</p><p>GN3Parser:在修复了bug(config文件中没有配置decay steps)之后,貌似k best tags还是没有什么用啊…</p><table><thead><tr><th><strong>w/l best tags</strong></th><th><strong>w/o k best tags</strong></th></tr></thead><tbody><tr><td>83.80%</td><td>83.94%</td></tr></tbody></table><p>目前最好的两个Global实验,分别为包含k best tags和不包含k best tags</p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>use k best tags</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/exp-src-3.0-global-83.94</td><td>83.94%</td><td>No</td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/test-version-3.4-global</td><td>83.80%</td><td>Yes</td></tr></tbody></table><h4 id="2017-3-26"><a href="#2017-3-26" class="headerlink" title="2017-3-26"></a>2017-3-26</h4><p>应该找到bug,在什么地方了.一个很小的,几乎被忽略的地方,decay_steps的初始化,因为decay_steps被初始化为-1,需要从config文件中读取相对应的配置(应该为300, 或者4400);但是,没有初始化的话,就会在模拟退火部分,只要一个batch结束,就会更新eta = eta * 0.96,因为一次迭代,大约需要5000个batch,而1000个batch之后,eta就只剩下<strong>1.49e-19</strong>这么多了,几乎等于0,所以到后面,UAS就不会变化了!</p><h4 id="2017-3-24"><a href="#2017-3-24" class="headerlink" title="2017-3-24"></a>2017-3-24</h4><p>使用百度提供的配置,尝试进行GN3Parser中文 <em>greedy</em>的调参</p><p>eta=0.15</p><table><thead><tr><th><strong>position</strong></th><th><strong>batch size</strong></th><th><strong>UAS</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/GN3Parser-beta/test-src-v3.4</td><td>20</td><td>77.52%</td><td></td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/test-src-v3.4-batch-5</td><td>5</td><td>0.55%</td><td>17次epoch都是0.55,应该涨不上去了</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/test-src-v3.4-batch-10</td><td>10</td><td>30.37%</td><td>6次epoch都是30.37%</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/test-src-v3.4-batch-40</td><td>40</td><td>80.07%</td><td></td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/test-src-v3.4-batch-50</td><td>50</td><td>80.07%</td><td>30次迭代无增长结束</td></tr></tbody></table><h4 id="2017-3-23"><a href="#2017-3-23" class="headerlink" title="2017-3-23"></a>2017-3-23</h4><p>记录一下最近的一个bug的调试过程(UAS一直保持不变)</p><ol><li>debug1, 一次batch之后就evaluate 10个sentence, UAS是变化的.</li><li>debug2, 一次batch之后就evaluate all sentences, UAS也是变化的.</li><li>在将use k best放到config的过程中,发现了一个bug,就顺便又找到了一个bug,get_k_best_tag_id 中漏掉了return id???,利用bug找bug!~<h4 id="2017-3-22"><a href="#2017-3-22" class="headerlink" title="2017-3-22"></a>2017-3-22</h4>总结一下最近做的实验:</li></ol><p>GN3Parser 有无k best tags 特征的UAS对比, 所有的word都包含,包括标点.</p><table><thead><tr><th><strong>w/ k best tags</strong></th><th><strong>w/o k best tags</strong></th></tr></thead><tbody><tr><td>81.25%</td><td>81.32%</td></tr></tbody></table><h4 id="2017-3-21"><a href="#2017-3-21" class="headerlink" title="2017-3-21"></a>2017-3-21</h4><p>昨儿个拿到了百度提供的二进制word embedding,今儿个便在SyntaxNet上跑个对比试验,看看实验结果如何.</p><p><strong>SyntaxNet</strong></p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>commments</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/SyntaxNet/models/syntaxnet/nndep_baidu_chinese</td><td>79.08%</td><td>local, without embedding</td></tr><tr><td>gpu-no-1:~/SyntaxNet/models/syntaxnet/nndep_baidu_chinese_w_embedding</td><td>79.67%</td><td>local, with embedding</td></tr></tbody></table><p>奇怪的是,即使SyntaxNet没有使用k best tags,UAS是不是也有点低了.</p><p><strong>GN3Parser</strong></p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/test-src-v3.0</td><td>81.25%</td><td>greedy w k best tags</td></tr><tr><td>m175 ~/GN3Parser-beta/test-src-v3.2</td><td></td><td>global w k best tags</td></tr></tbody></table><h4 id="2017-3-16"><a href="#2017-3-16" class="headerlink" title="2017-3-16"></a>2017-3-16</h4><p>今天的主要事情就是折騰我这Linux系统了.<br>首先汇报一下GN3Parser的进展:(<strong>以下的有关中文实验的数据都是不准确的,排除了label为UNK的word</strong>)<br><strong>Greedy</strong></p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/baidu-conll-09-chinese</td><td><strong>81.32%</strong></td></tr><tr><td>论文的结果</td><td>81.29%</td></tr></tbody></table><p>greedy的结果目前来看就没有问题了,等待global的结果,没有添加k-best tags.</p><p>greedy结果已经出来了,目前结果都不行:</p><table><thead><tr><th><strong>position</strong></th><th><strong>eta</strong></th><th><strong>UAS</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/baidu-conll-09-chinese-global-eta-0.01</td><td>0.01</td><td>83.39%</td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-conll-09-chinese-global</td><td>0.03</td><td><strong>83.72%</strong></td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-conll-09-chinese-global-eta-0.05</td><td>0.05</td><td>83.07%</td></tr></tbody></table><p>现在来讨论一下今天折腾系统的事情:</p><ol><li>早上来的时候,就发现Linux系统的搜狗输入法崩掉了,没法输入中文了,这个对于我来说是致命的.必须把它修好</li><li>因为搜狗输入法和fcitix有关系,于是我就重新安装了fciti和搜狗输入法,悲剧的是,输入法没有安装好,还把系统的System setting给弄没了.</li><li>不能忍,继续到网上查找资料尝试解决问题,但是已经不记得自己干了什么,系统就重新启动了,然后就登录不进去了,报错”failed to start session”!根本登录不了系统.</li><li>中午到~,一上午白费了,打算放弃了,都在往服务器上面备份数据了;打算再尝试一会,尝试失败就重新安装系统.</li><li>于是乎,又查找了大量的资料,绝大数的网上的东西我都试过了,根本没有用;就连最基本的”apt-get update”都会报错:”error ‘nodata’”的错误;后来看到网上说,可能是proxy的问题啥的,最后,我的解决方案是,换源,换成教育网的源,这样居然就能update了?再把ubuntu-desktop,ubuntu-session等软件给安装回来.心累</li><li>晚上顺便就重新倒腾了一下Linux的主题,给自己一点新鲜感.最后,重新安装了搜狗输入法,居然一下子就好了?不明觉厉!还安装了QQ.  :)<h4 id="2017-3-14"><a href="#2017-3-14" class="headerlink" title="2017-3-14"></a>2017-3-14</h4><em>从3-10到现在的所有实验,数据,全部是错误的!!!</em><br>原因如下:</li><li>因为一开始拿到百度的数据,我就首先测试了一下包不包含none projective的数据(因为之前英文数据包含),但是,貌似因为编码的问题,我发现数据拿到linux上面显示全部都是乱码;</li><li>于是便在windows上面的”记事本”软件打开,并且保存为UTF-8编码格式的,再上传到服务器进行进一步的处理;</li><li>可是,后来发现,虽然中文显示正常了,在处理id 和 head的时候,编写的脚本会出错,显示不能将得到的字符串转换成int类型;</li><li>于是,后来想办法解决,什么添加decode(‘utf-8’)全部没有用,后来我就把int()给去掉了,不要求强制转换为int类型,程序正常执行,心想着以为程序就ok了.同时输出了很多的projective数据和None projective数据,如下表格所示.</li><li>鬼使神差的是,我今天还拿了一个none projective的句子进行人工检查,居然还被我看成了none projective的??可能是因为看得比较急躁.</li><li>但是,结果明显是不对的,李老师也说应该全部都是projective的!</li><li>又到师姐那边去拿了以前的旧代码进行测试;发现李老师给的数据,全部都是projective的.发现目前的代码就和旧代码几乎一样,除了”<strong>int()</strong>“;但是李老师给的数据和百度提供的数据明显label和head都是一样的?可能因为李老师的数据是UTF8编码格式的,而百度的数据是由ANSI转换成UTF-8的,可能有不同,所以脚本才不能处理百度的数据</li><li>最后,师姐想到,会不会是转换格式的问题?于是就用Notepad进行了格式转换,”UTF-8”,发现还是那个问题,int()这一步骤过不了!,于是,在转换为”无BOM”的UTF-8,代码就可以了,因为编码问题,浪费了我三天时间..</li></ol><p>今天做实验的时候,突然发现,当初提取句子的时候,用的脚本没有提示有多少句是projective,多少句是non projective,今天添加了几行代码,发现了很严重的事情,百度提供的数据中含有大量的non projective数据:</p><table><thead><tr><th><strong>Corpus</strong></th><th><strong>Total</strong></th><th><strong>Projective</strong></th><th><strong>Non projective</strong></th></tr></thead><tbody><tr><td>train</td><td>22277</td><td>4003</td><td>18274</td></tr><tr><td>dev</td><td>1762</td><td>300</td><td>1462</td></tr><tr><td>test</td><td>2556</td><td>445</td><td>2111</td></tr></tbody></table><p>受到之前实验的影响,以为Global实验的第一次结果一定会比greedy的来的高,所以之前kill掉了很多实验.事实证明,这一次的中文实验并不是这样,之后会增加的比较快的.</p><p>batch: 10</p><table><thead><tr><th><strong>position</strong></th><th><strong>eta</strong></th><th><strong>UAS in epoch 1</strong></th><th><strong>UAS</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/baidu-chinese-global-eta-0.05</td><td>0.05</td><td>80.53%</td><td>83.18%</td><td></td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/baidu-chinese-global-eta-0.03</td><td>0.03</td><td>81.93%</td><td>83.88%</td><td></td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/baidu-chinese-global-eta-0.01</td><td>0.01</td><td>80.48%</td><td>83.43%</td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-chinese-global-eta-0.008</td><td>0.008</td><td>79.98%</td><td>82.83%</td></tr></tbody></table><p>eta: 0.03</p><table><thead><tr><th><strong>position</strong></th><th><strong>batch</strong></th><th><strong>UAS in epoch 1</strong></th><th><strong>UAS</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/baidu-chinese-global-batch-5</td><td>5</td><td>80.93%</td><td>82.68%</td><td></td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/baidu-chinese-global</td><td>10</td><td>81.53%</td><td>83.88%</td><td>高峰过后,稳定在83</td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-chinese-global-batch-20</td><td>20</td><td>80.93%</td><td>83.23%</td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-chinese-global</td><td>30</td><td>81.08%</td><td>83.88%</td><td>高峰过后,稳定在82</td></tr></tbody></table><h4 id="2017-3-13"><a href="#2017-3-13" class="headerlink" title="2017-3-13"></a>2017-3-13</h4><p>中文的数据已经过来了,正在做一些数据准备的工作:</p><ol><li>embedding的准备,从百度提供的embedding,形成我们Parser所需要使用的embedding</li><li>判断中文数据是否包含交叉,全部都不包含;ANSI to utf-8</li><li>SytaxNet的评价包含标点</li></ol><p>先看看Greedy的效果,包含标点</p><table><thead><tr><th><strong>model</strong></th><th><strong>eta</strong></th><th><strong>batch</strong></th><th><strong>decay</strong></th><th><strong>momentum</strong></th><th><strong>UAS</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>SyntaxNet</td><td>0.08</td><td>32</td><td>4500</td><td>0.9</td><td>73.92%</td><td>其他的都是12.56%,明显这个参数不对,后来全部都是12.56%</td></tr><tr><td>SyntaxNet</td><td>0.15</td><td>5</td><td>300</td><td>0.9</td><td>13.86%</td><td>几乎还有其他的都是12.56%,很奇怪?<em>百度提供的配置选择之一</em></td></tr><tr><td>GN3Parser</td><td>0.08</td><td>32</td><td>4400</td><td>0.9</td><td>82.48%</td></tr></tbody></table><p>Global, GN3Parser, 1 epoch:</p><table><thead><tr><th><strong>model</strong></th><th><strong>hyper parameters</strong></th><th><strong>UAS in epoch 1</strong></th><th><strong>UAS</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>eta=0.03</td><td>81.38%</td><td></td><td>killed</td></tr><tr><td>GN3Parser</td><td>eta=0.1</td><td>33.1%</td><td></td><td>killed</td></tr><tr><td>GN3Parser</td><td>eta=0.01</td><td>81.93%</td><td></td><td>killed partial hot started</td></tr><tr><td>GN3Parser</td><td>eta=0.008</td><td>80.78%</td><td></td><td>killed parital hot started</td></tr><tr><td>GN3Parser</td><td>eta=0.03</td><td>82.68%</td><td></td><td>killed partial hot started</td></tr><tr><td>GN3Parser</td><td>eta=0.07</td><td>17.76%</td><td></td><td>killed parital hot started</td></tr><tr><td>GN3Parser</td><td>eta=0.05</td><td>80.53%</td><td></td><td>killed parital hot started</td></tr><tr><td>GN3Parser</td><td>eta=0.03, batch=3</td><td>77.03%</td><td></td><td>killed parital hot started</td></tr><tr><td>GN3Parser</td><td>eta=0.03, batch=8</td><td>82.68%</td><td></td><td>killed partial hot started</td></tr><tr><td>GN3Parser</td><td>eta=0.03, batch=20</td><td>82.83%</td><td></td><td>killed parital hot started</td></tr><tr><td>GN3Parser</td><td>eta=0.03, batch=30</td><td>81.08%</td><td>83.88%</td></tr></tbody></table><h4 id="2017-3-10"><a href="#2017-3-10" class="headerlink" title="2017-3-10"></a>2017-3-10</h4><p>今天完成了GN3Parser添加MKL.<br>完成MKL的过程略有曲折,稍加记录:<br>MKL的工作其实在之前就已经进行了,当时仅仅是从intel的<a href="https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor/" target="_blank" rel="noopener">相关网址</a>上,填写相应的信息,配置需要的编译信息.配置完成之后,尝试过直接加到Makefile里面,就当时来看,确实速度进步了不少.但是最近发现,好像greedy的时候,CPU的占用率一直就只是100%,按道理不应该只有这么一点CPU,于是尝试了各种方法,尝试正确配置MKL,直接的效果就是CPU占用率能够达到500%(人为设定的5个线程).</p><ol><li>因为接触MKL,因为dynet里面配置了MKL,效果挺好,而dynet使用的CMake,而不是Makefile;于是我又修改GN3Parser代码结构,编写相应的CMakeLists,折腾了一些时间,无果.</li><li>后来怀疑是不是LibN3L的问题,于是自己写了一个小的测试程序test.h,结果是可以的,可以利用MKL进行加速.</li><li>再后来就怀疑是不是多线程的问题,于是去掉Greedy里面的多线程,发现还是不行,无果.</li><li>后来没办法,釜底抽薪.copy一份GN3Parser,注释掉main.cpp里面的所有的include,加入test.一步步放出里面的include,一步步加入test进行测试.后来在BatchState里面的forward里面也加入test,发现程序居然可以跑了,greedy显示的是500%CPU,很兴奋(OK)</li><li>需要查找原因,于是就尝试将include进来的test进行注释,删除编译,发现,通不过了,再后来重新加回test,可是!!!居然MKL又没有用了,又只剩下了100%CPU.很奇怪</li><li>最后,将代码copy到m175里面,发现可以编译,MKL可以使用…….GPU服务器有点问题啊再后来,加回多线程仍旧可以跑,任务完成.但是test模块暂时还要保留.不想深究原因,应该编译顺序的原因.头疼</li></ol><p>现在将GN3Parser各版本的速度和SyntaxNet进行对比.</p><table><thead><tr><th><strong>model</strong></th><th><strong>greedy speed</strong></th><th><strong>global speed</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>5000 batch/ 45min</td><td>1w sentence / 9h</td><td>greedy多线程,300%CPU vs global多线程,800%CPU</td></tr><tr><td>GN3Parser-w-BatchedComputing</td><td>5000 batch/ 30min</td><td>1w sentence / 2.5h</td><td>greedy单线程, 100%CPU vs global多线程, 800%CPU</td></tr><tr><td>GN3Parser-w-BatchedComputing-w-MKL</td><td>5000 batch / 23min</td><td>1w sentence / 1h</td><td>greedy单线程, 500%CPU vs global多线程, 2700%CPU</td></tr><tr><td>SyntaxNet</td><td>5000 batch / 2min</td><td>1w sentence / 12.5min</td><td>greedy多线程1500%CPU vs global多线程2600%CPU</td></tr></tbody></table><p><em>备注:GN3Parser的CPU数均为峰值</em></p><h4 id="2017-3-7"><a href="#2017-3-7" class="headerlink" title="2017-3-7"></a>2017-3-7</h4><p>Softmax Layer加上了bias<br>大矩阵计算的代码已经修改出来了,现在做实验验证UAS以及速度的变化</p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>m173 ~/GN3Parser-beta/baidu-test-v2.5</td><td>93.04%</td><td>speed: 6min/1000batch</td></tr></tbody></table><p>Global: 全部热启动 and 部分热启动</p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/baidu-test-v2.5</td><td>93.91%</td><td>param来自于93.01% Greedy</td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-test-v2.5-eta-0.02</td><td>5%</td><td>eta设置0.02,UAS直接崩掉了?</td></tr><tr><td>m173 ~/GN3Parser-beta/baidu-test-v2.5-without-softmax-param</td><td>94.24%</td><td>部分热启动</td></tr></tbody></table><p>大矩阵重现了,没有问题.</p><h4 id="2017-3-1"><a href="#2017-3-1" class="headerlink" title="2017-3-1"></a>2017-3-1</h4><p>祝自己新的一个月快乐!<br>今天晚间终于搞定了大矩阵的计算.有两个原因,有一个乌龙~</p><ol><li>今天午间调试程序的时候,发现有的word id居然是小于1的,然后经过排查,发现,vector &lt; state_instance &gt;的指针使用的不对,这一点C++基本知识还需加强,头疼.</li><li>但是虽然找到了一个这个原因,跑实验的时候,发现结果还是不对.然后就试着不将一个batch的input组合成大矩阵,试着就使用一个input来进行实验,这样子就和原来的v1版本的代码一致了,但是结果仍然不好.</li><li>所以我干脆重新回到v1版本的代码,从v1版本一点一点修改.首先,我去掉了precomputation,ok,试验没有问题!,但是当我尝试去掉原来因为precomputation用的各种LinearLookupNode,BNode的时候,需要直接使用一个UniNode作为hidden layer1,但是,问题来了,实验仍然通不过!我就找师姐来看代码,发现改动的地方很少,就修改了hidden layer1的实现方式,结果确实相差很大.排查bug,失败~</li><li>纠结了挺长一段时间,无果.尝试调参吧,后来发现,调参有用!(eta = 0.01)即可?我表示很矛盾,不应该相同的网络,需要使用不同的参数啊.后来,只能想到一个原因,v1版本的h1实现的时候,每一个w的维度是[word_dim, hidden layer size], 但是改成大矩阵的时候,就是[all_word_dim, hidden layer size],虽然使用的是相同的初始化值,但是矩阵的大小不一样,随机初始化初来的矩阵相差也比较大??</li><li>正在跑1024的实验!从目前来看,速度确实有点变快,30分钟应该就能跑完一次迭代.5000batch.没有多线程,没有MKL(结果正常!开心~)<br>真的觉得,每次看实验结果之前需要拜个佛:)</li></ol><h4 id="2017-2-28"><a href="#2017-2-28" class="headerlink" title="2017-2-28"></a>2017-2-28</h4><p>找出了尝试大矩阵运算中的一个bug,因为原先使用precomputation的原因,evaluate的时候,使用的还是原来的parameters,第一个隐含层的参数和现在Uniparams不同,不能混合使用,需要修改.<br>又出现了UAS不更新的问题!</p><h4 id="2017-2-27"><a href="#2017-2-27" class="headerlink" title="2017-2-27"></a>2017-2-27</h4><p>SyntaxNet尝试使用全部greedy parameter参数失败,会报错,出现inf错误</p><h4 id="2017-2-25"><a href="#2017-2-25" class="headerlink" title="2017-2-25"></a>2017-2-25</h4><p>Global结果已经出来,最好的一个<strong>94.22%</strong>,已经和SyntaxNet齐平.(完工!)<br>:)</p><h4 id="2017-2-24"><a href="#2017-2-24" class="headerlink" title="2017-2-24"></a>2017-2-24</h4><ol><li>统一了老版本的pre computation和新版本的实现方式:<blockquote><ul><li>老版本,传入的是一个batch中,应该被计算pre computation的word idx</li><li>新版本,根据word idx来选择是否需要进行计算</li></ul></blockquote></li><li>根据实验表明,pre computation计算出来的值val(0, 0)会出现 &lt; 1e-3 的情况,故修改pre computation中判断条件为1e-5.</li><li>在evaluate函数里面,将greedy和global的分别测试融合了.</li></ol><h4 id="2017-2-23"><a href="#2017-2-23" class="headerlink" title="2017-2-23"></a>2017-2-23</h4><p>每天早晨来实验室看实验结果就跟拜佛似得,怀着无比虔诚的心,诶,实验结果好了~GN3Parser的Global效果第一次迭代挺好的,<strong>93.99%</strong>,这个实验用的是 / batch_size .<br>还有几点比较奇怪的:</p><blockquote><ul><li>我们的GPU服务器竟然跑的比173要慢,173已经跑完1次epoch又17000句子,GPU服务器竟然只跑了22000句子?!</li><li>mkl优化又大约1000句子1h20min,优化前大约1.7h</li></ul></blockquote><h4 id="2017-2-22"><a href="#2017-2-22" class="headerlink" title="2017-2-22"></a>2017-2-22</h4><p>因为GN3Parser实在是太慢,so,探究加速方面的事情.对<em>Eigen进行加速</em>(打开OMP: 两个1024*1024的矩阵进行相乘10次,未加速<em>86.75s</em>, 加速<em>25.23s</em>)<br><strong>OMP</strong><br>此种方式通过打开OMP,从而打开Eigen的多线程运算.但是,如果服务器的CPU核数太少,则不能用这种方法,会导致GN3Parser多线程出问题!(libgomp: Thread creation failed: Resource temporarily unavailable)<br><em>其实可以设置线程数:)</em><br>目前在171服务器上面测试GN3Parser加速后的greedy水准!<br>未加速:7s   10个batch<br>加速后:32s  10个batch  <font color="green">???what?</font><br><strong>MKL</strong><br>没法从dynet配置中获取经验!!!<br>矩阵的乘法编译通不过??(Google了很多资料,头疼~)<br>编译完成之后,运行程序又出现了新的bug:</p><blockquote><ul><li>parameter 13 was incorrect on entry to dgemm</li></ul></blockquote><p>解决之后:<br><em>OpenMP threading</em> 5s 10个batch 10个线程 | 4s 10个batch 20个线程 | 5s或者4s 10个batch <strong>5个线程</strong> (实际上用不了这么多),可能是我们的GPU服务器不行?!<br><em>Sequential threading</em> 5s或者4s(较多) 10个batch <strong>5个线程</strong><br><em>TBB threading</em> 编译不成功:/usr/bin/ld: cannot find -ltbb</p><h4 id="2017-2-21"><a href="#2017-2-21" class="headerlink" title="2017-2-21"></a>2017-2-21</h4><p>既然Greedy达到了SyntaxNet的水平,下面就开始Global的实验</p><table><thead><tr><th><strong>position</strong></th><th><strong>hyper parameters</strong></th><th><strong>Global</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/GN3Parser-beta/baidu-1024-baidu-config-div-t-beam-16</td><td>eta=0.03</td><td></td><td>baidu config, div total _t, beam=16</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/baidu-1024-baidu-config-div-t-beam-64</td><td>eta=0.03</td><td></td><td>baidu config, div total _t, beam=64</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/baidu-1024-baidu-config-div-t-beam-16-eta-0.2</td><td>eta=0.2</td><td></td><td>baidu config, div total _t, beam=16</td></tr><tr><td>m173 ~/GN3Parser-beta/baidu-1024-div-batch-size-eta-0.01</td><td>eta=0.01</td><td><strong>94.22%</strong></td><td>baidu config, div batch size(8), beam=16</td></tr><tr><td>m173 ~/GN3Parser-beta/baidu-1024-div-batch-size-eta-0.02</td><td>eta=0.02</td><td><strong>94.18%</strong></td><td>baidu config, div batch size(8), beam=16</td></tr><tr><td>m173 ~/GN3Parser-beta/baidu-1024-div-batch-size-eta-0.03</td><td>eta=0.03</td><td>kill</td><td>baidu config, div batch size(8), beam=16</td></tr></tbody></table><h4 id="2017-2-20"><a href="#2017-2-20" class="headerlink" title="2017-2-20"></a>2017-2-20</h4><p>下午发现,原来的实验都是200*200的……补充了一个实验,首先跑Greedy,1024*1024</p><table><thead><tr><th><strong>position</strong></th><th><strong>hyper parameters</strong></th><th><strong>greedy</strong></th><th><strong>global</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/baidu-hidden-size-1024-baidu-config</td><td>eta=0.08,</td><td>93.09%</td><td></td><td>baidu config</td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-hidden-size-1024</td><td>eta=0.1,</td><td>93.10%</td><td></td></tr></tbody></table><h4 id="2017-2-19"><a href="#2017-2-19" class="headerlink" title="2017-2-19"></a>2017-2-19</h4><p>Global div _t</p><table><thead><tr><th><strong>hyper parameters</strong></th><th><strong>global uas in epoch 1</strong></th><th><strong>end</strong></th></tr></thead><tbody><tr><td>eta=0.03, reg=1e-5,</td><td>92.46%</td><td>don’t care~</td></tr><tr><td>eta=0.2, reg=1e-5</td><td>93.43%</td><td>93.65%</td></tr></tbody></table><h4 id="2017-2-18"><a href="#2017-2-18" class="headerlink" title="2017-2-18"></a>2017-2-18</h4><p>补充的几个实验</p><table><thead><tr><th><strong>hyper parameter</strong></th><th><strong>global UAS in epoch 1</strong></th></tr></thead><tbody><tr><td>eta=0.08, reg=1e-5, momen=0.9, beam=64</td><td>93.07%</td></tr><tr><td>eta=0.1</td><td>93.19%</td></tr><tr><td>eta=0.15</td><td>93.32%</td></tr><tr><td>eta=0.2</td><td><strong>93.34%</strong></td></tr></tbody></table><p>one_batch_state_count那边可能有问题,state_count是指的一串state呢?还是beam里面所有的state?更新的时候是否都是beam里面最后一个State?!</p><h4 id="2017-2-17"><a href="#2017-2-17" class="headerlink" title="2017-2-17"></a>2017-2-17</h4><p>从epoch 1的实验结果来看,百度的数据在Global上可能需要调参,不能够直接沿用百度的配置</p><p>Baidu config(greedy-model.bin form 92.58%)</p><table><thead><tr><th><strong>hyper parameter</strong></th><th><strong>global uas in first epoch</strong></th></tr></thead><tbody><tr><td>eta=0.03, reg=1e-4, momen=0.9, beam=64</td><td>92.22%</td></tr><tr><td>eta=0.03, reg=1e-5, momen=0.9, beam=64</td><td>92.55%</td></tr><tr><td>eta=0.03, reg=1e-7, momen=0.9,</td><td>92.48%</td></tr><tr><td>eta=0.005, reg=1e-5,</td><td>91.16%</td></tr></tbody></table><p>My config(greedy-model.bin from 92.64%)</p><table><thead><tr><th><strong>hyper parameter</strong></th><th><strong>global uas in first epoch</strong></th></tr></thead><tbody><tr><td>eta=0.03, reg=1e-4, momen=0.9, beam=64</td><td>92.58%</td></tr><tr><td>eta=0.02, reg=1e-5, momen=0.9, beam=64</td><td>92.22%</td></tr><tr><td>eta=0.02,                     beam=128</td><td>92.37%</td></tr><tr><td>eta=0.1,</td><td><strong>93.19%</strong></td></tr><tr><td>eta=0.001,</td><td>89.45%</td></tr></tbody></table><p>个人认为有可能是beam的大小的问题,当初调试周浩数据的时候,就是增加beam从16到64,UAS一下子就增加上去了.所以又增加了一组实验.<br>Get!应该调整eta的大小,往大的调整</p><h4 id="2017-2-16"><a href="#2017-2-16" class="headerlink" title="2017-2-16"></a>2017-2-16</h4><p>GN3Parser的一些最新实验<br>python处理了embedding,将oov使用正态分布随机化了embedding.(baidu.embedding.total.for.train)</p><table><thead><tr><th><strong>position</strong></th><th><strong>greedy</strong></th><th><strong>global</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>m172 ~/GN3Parser-beta/baidu-momentum-0.9</td><td>92.51%</td><td></td><td>eta=0.1, regularization=1e-5, momentum=0.9</td></tr><tr><td>m173 ~/GN3Parser-beta/baidu-momentum-0.9-w-total-train-embedding</td><td><strong>92.64%</strong></td><td></td><td>配置同上,但是用了python处理过的embedding</td></tr><tr><td>m172 ~/GN3Parser-beta/baidu-data-baidu-config</td><td>92.40%</td><td></td><td>eta=0.08, 1e-5, 0.9</td></tr><tr><td>m173 ~/GN3Parser-beta/baidu-data-baidu-config-w-total-train-embedding</td><td>92.58%</td><td></td><td>配置同上,但是用了python处理过的embedding</td></tr></tbody></table><p>从下面的这个图片我们可以看出来,GN3Parser的收敛速度和SyntaxNet几乎差不多.且SyntaxNet有一个比较奇怪的地方,开始几次迭代的UAS都在16.3%<br><img src="/images/GN3Parser/greedy" alt="GN3Parser vs SyntaxNet"></p><p>就目前看,GN3Parser的global过程进展并不顺利,可能参数又没有设置得好?7h一次迭代完成(时间有点长)</p><h4 id="2017-2-15"><a href="#2017-2-15" class="headerlink" title="2017-2-15"></a>2017-2-15</h4><p>SyntaxNet终于复现了Google的结果</p><table><thead><tr><th><strong>Eval</strong></th><th><strong>greedy</strong></th><th><strong>global</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>SyntaxNet</td><td>92.90%</td><td>94.21%</td><td>SyntaxNet自带的评价, eval_global的时候, syntaxnet显示eval metric只有94.19?</td></tr><tr><td>eval-UAS.py</td><td>92.97%</td><td>94.26%</td><td>完全按照label列的punct来计算的</td></tr><tr><td>eval.pl</td><td>92.66%</td><td>93.99%</td><td>eval.pl应该是识别不了-LRB-之类的word的</td></tr></tbody></table><p>words.gz里面的”##”代表ROOT</p><h4 id="2017-2-14"><a href="#2017-2-14" class="headerlink" title="2017-2-14"></a>2017-2-14</h4><p>GN3Parser实现的eval过程中是否包含标点有问题:<br> eval.pl分母:35368<br> GN3Parser(c自带的接口ispunct)分母:35363;且GN3Parser测试出来的结果比eval.pl测试出来的结果少0.3%<br> Python实现(自己写的)分母:35363<br> GN3Parser词性列表的实现方法,分母:36152<br> SyntaxNet分母:35431</p><h4 id="2017-2-13"><a href="#2017-2-13" class="headerlink" title="2017-2-13"></a>2017-2-13</h4><p>今天比较了周浩的数据和百度的数据,发现words有如下差别.<br>有1585个单词,百度的数据是”*/*“,而周浩包含了转义符”\”<br>实现了GN3Prarser中,可以通过配置文件,要求评价包含不包含标点.现在默认不包含</p><p>做了几个实验,看看正则化因子GN3Parser的影响</p><table><thead><tr><th><strong>position</strong></th><th><strong>greedy</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/baidu-regularization-1e-2</td><td>kill</td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-regularization-1e-3</td><td>kill</td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-regularization-1e-4</td><td>91.43%</td></tr><tr><td>m172 ~/GN3Parser-beta/baidu-regularization-1e-5</td><td>91.40%</td></tr><tr><td>m172 ~/GN3Parser-beta/baidu-regularization-1e-6</td><td>90.73%</td></tr></tbody></table><p>上面的结果都是GN3Parser测试出来的结果</p><h4 id="2017-2-11"><a href="#2017-2-11" class="headerlink" title="2017-2-11"></a>2017-2-11</h4><p>最近在使用百度的数据尝试重现Google的结果<br>SyntaxNet:</p><table><thead><tr><th><strong>position</strong></th><th><strong>greedy</strong></th><th><strong>global</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/SyntaxNet/models/syntaxnet/nndep_baidu_data_1024_w_embedding</td><td>92.64%</td><td>93.89%</td><td>使用了embedding,但是这一版本并没有修改百度说的embedding bug</td></tr><tr><td>gpu-no-1:~/SyntaxNet/models/syntaxnet/nndep_baidu_data_1024_w_embedding_baidu_config</td><td><strong>92.90%</strong></td><td></td></tr></tbody></table><p>GN3Parser:<br>鉴于GN3Parser的Greedy在百度的数据上效果并没有那么好(90.68%,包含标点,UAS,没有使用embedding),现在尝试调参,看看是不是参数的问题.<br>和SyntaxNet相比,GN3Parser在没有使用embedding的情况下,最起码要达到91.00%才行.</p><table><thead><tr><th><strong>position</strong></th><th><strong>greedy</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/baidu-eta-0.2</td><td>90.52%</td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-eta-0.15</td><td>?</td><td>超过20次:26%</td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-eta-0.1</td><td><strong>90.73%</strong></td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-eta-0.05</td><td>90.50%</td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-eta-0.03</td><td>90.49%</td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-eta-0.01</td><td>89.34%</td><td></td></tr><tr><td>m172 ~/GN3Parser-beta/baidu-eta-0.1-embedding</td><td>90.74%</td><td></td></tr><tr><td>m172 ~/GN3Parser-beta/baidu-eta-0.08-embedding</td><td>90.58%</td><td></td></tr><tr><td>m172 ~/GN3Parser-beta/baidu-eta-0.05-embedding</td><td>90.61%</td></tr></tbody></table><blockquote><ul><li>今天发现了一个问题,百度的数据拿我们的embedding来跑实验,竟然还有141个OOV,也就是说,和周浩的数据又有不同!连words都不同?</li><li>我们发现加了embedding,并没有明显让UAS上升,有如下猜想解释:embedding只有2/3的数据有,其他的只不过是随机初始化的,跟百度提供的没法比</li></ul></blockquote><h4 id="2017-2-10"><a href="#2017-2-10" class="headerlink" title="2017-2-10"></a>2017-2-10</h4><p>今天主要完成了两项工作:</p><blockquote><ul><li>搞明白了为啥当hidden layer size为1024*1024的时候,SyntaxNet的结果一直都是16.33%?为啥呢,因为SyntaxNet可能训练的比较慢,等上差不多9次迭代之后,eval metric就增加了.可是很奇怪的是,GN3Parser就没有这个问题</li><li>解决了global训练的时候,存在着内存问题.经过排查,是State.h里面new了一个can_apply_idx,但是忘记delete了:),一个教训,谨记!</li></ul></blockquote><h4 id="2017-2-9"><a href="#2017-2-9" class="headerlink" title="2017-2-9"></a>2017-2-9</h4><p>尝试在SyntaxNet中加入embedding,复现Google的论文结果.<br>根据百度提供的bug,修改reader_ops.cc中”+ 3” -&gt; “+ 2”(修改之后,从日志上并不能看出什么差别)<br>UAS:</p><table><thead><tr><th><strong>position</strong></th><th><strong>greedy</strong></th><th><strong>global</strong></th></tr></thead><tbody><tr><td>SyntaxNet amax:~/TensorFlow/models/syntaxnet/nndep_baidu_data</td><td>91.94</td><td></td></tr><tr><td>SyntaxNet amax:~/TensorFlow/models/syntaxnet/nndep_baidu_data_w_embedding</td><td>92.38</td><td>93.70</td></tr><tr><td>GN3Parser</td><td></td></tr></tbody></table><p>如果,单纯的修改hidden layer neuron number为1024的话,SyntaxNet的greedy效果奇差:16.33%</p><h4 id="2017-2-8"><a href="#2017-2-8" class="headerlink" title="2017-2-8"></a>2017-2-8</h4><p>年后第一天来实验室,首先整理一下前几天的工作:<br>采用百度的数据,分别采用SyntaxNet &amp; GN3Parser进行测试比较,结果如下:</p><table><thead><tr><th><strong>position(已经舍弃)</strong></th><th><strong>greedy</strong></th><th><strong>global</strong></th></tr></thead><tbody><tr><td>amax:~/TensorFlow/models/syntaxnet/nndep_baidu_data(SyntaxNet)</td><td>92.05%</td><td>93.39</td></tr><tr><td>m175 ~/GN3Parser-beta/merge-globally-data-baidu</td><td>90.55%(实验已经被覆盖,因为此数据包含交叉弧数据)</td><td>?</td></tr></tbody></table><p>几点说明:</p><blockquote><ul><li>都没有使用pretrained embedding</li><li>其中,syntaxnet中,百度的数据会产生一个projectivized-training-corpus,而且不能够被替换为百度提供的training-corpus,替换的化,SyntaxNet的global过程会报错,无法完成?是否因为百度的数据是包含交叉的?</li><li>我们的GN3Parser在global过程中会报错!(use-all-pre-trained-embeddings版本代码)</li></ul></blockquote><p><em>经过验证,百度提供的数据确实存在着包含交叉弧的数据,总计1160行(包含空白行)</em></p><h4 id="2017-1-22"><a href="#2017-1-22" class="headerlink" title="2017-1-22"></a>2017-1-22</h4><p>zhouhao-data: SyntaxNet, global, UAS:<strong>93.37%</strong>(不含标点)</p><h4 id="2017-1-20这一次为什么又会是26-呢"><a href="#2017-1-20这一次为什么又会是26-呢" class="headerlink" title="2017-1-20这一次为什么又会是26%呢?"></a>2017-1-20这一次为什么又会是26%呢?</h4><p>今天尝试用src-r10跑一下beam search,突然就想起来,relu的双隐层从来就没有好过!<br>于是我就采用tanh激活函数,代替了relu,发现是可以的,没有问题.努力调参中…</p><h4 id="2017-1-18-融合greedy和global的功能"><a href="#2017-1-18-融合greedy和global的功能" class="headerlink" title="2017-1-18-融合greedy和global的功能"></a>2017-1-18-融合greedy和global的功能</h4><p>从昨天晚间开始融合两部分的代码,遇到了如下问题:</p><ol><li>greedy和global的pre computation的初始化方式以及使用方式不一致<h4 id="2017-1-17-完善Parameter-averaging功能"><a href="#2017-1-17-完善Parameter-averaging功能" class="headerlink" title="2017-1-17-完善Parameter averaging功能"></a>2017-1-17-完善Parameter averaging功能</h4></li></ol><blockquote><ul><li>添加保存averaging parameter功能(完成)</li><li>添加是否在eval的采用parameter averaging功能,选项(完成)</li><li>优化SparseParam的update功能,不再使用整个矩阵的更新,更新成update哪一row,就只计算哪一row</li></ul></blockquote><h4 id="2017-1-16-加入了parameter-averaging功能"><a href="#2017-1-16-加入了parameter-averaging功能" class="headerlink" title="2017-1-16-加入了parameter averaging功能"></a>2017-1-16-加入了parameter averaging功能</h4><p>在昨天的工作基础上,加入了parameter averaging功能,基于谷歌的第一篇论文:<br>中心思想就是eval的时候,使用的是averaging parameter<br>公式如下:<br>$$<br>\overline{\theta_{t}} = \alpha_t\overline{\theta_{t-1}} + (1 - \alpha_t) \theta_t<br>$$<br>这里的$\overline{\theta_{t}}$是t步update之后的shadow_variable,即averaging parameter<br>我们看了tensorflow的实现,加入了min操作:<br>min(decay, (1 + num_steps) / (10 + num_steps))</p><p>实验:</p><table><thead><tr><th><strong>position</strong></th><th><strong>best UAS</strong></th><th><strong>commments</strong></th></tr></thead><tbody><tr><td>m172 ~/GN3Parser-beta/greedy-state-parameter-averaging-eta-0.1</td><td>91.42</td><td>参数设置和下面的91.55一致</td></tr><tr><td>m172 ~/GN3Parser-beta/greedy-state-parameter-averaging-eta-0.08-mo-0.85</td><td><strong>91.51</strong></td><td>eta 0.08 momentum 0.85, SyntaxNet的默认配置</td></tr><tr><td>m172 ~/GN3Parser-beta/greedy-state-parameter-averaging-eta-0.08-91.51-verify</td><td><strong>91.64</strong></td><td>参数同91.51,为了查看随机化的影响</td></tr><tr><td>m172 ~/GN3Parser-beta/greedy-state-parameter-averaging-eta-verify-91.51</td><td>90.91</td><td>参数同91.51,使用的是fix-bug代码</td></tr></tbody></table><p><em>结论</em>:(2017-1-19)<br>已经各跑了两组实验,发现fix-bug之后的实验结果普遍低于没有fix-bug之后的,经排查,可能的原因有如下两种情况:</p><ol><li>SparseParam更新gradient的时候,就不能够做优化(已经确认,是这个原因2017-1-20)</li><li>是不是_g_global_label_num_no_null这个参数的问题,can_apply_idx?的长度原因?(不是这个原因)</li></ol><p><em>解释</em>:因为使用的Momentum Optimizer,accum的存在,使得SparseParam就是不能使用indexer来进行优化!(2017-1-20)</p><p>利用<strong>百度</strong>提供的数据进行的实验(train:open)(2017-1-17)</p><table><thead><tr><th><strong>position</strong></th><th><strong>best UAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/greedy-state-parameter-averaging-eta-0.08-mo-0.85</td><td>90.67</td><td>使用了parameter averaging, 参数配置同上91.51</td></tr><tr><td>m175 ~/GN3Parser-beta/greedy-state-greedy-eta-0.1-baidu</td><td>90.64</td><td>没有使用parameter averaging,参数配置同下91.55,(91.65, no punct)</td></tr><tr><td>m175 ~/GN3Parser-beta/greedy-state-greedy-eta-0.08-baidu</td><td>90.71</td><td>没有使用parameter averaging,参数配置同上91.51,(91.69, no punct)</td></tr></tbody></table><p>遇到的问题:</p><ol><li>今天在做百度实验的时候,以上的三个实验发现UAS一直都是26%,是以前经常遇到的一个错误,经过排查代码发现.<br>我们在FeatureConfig.h的文件中写死了LABEL_NUM=12,为了做百度的实验,暂时就修改为45.以后就修改这一参数,根据目标语料来动态赋值.</li><li>不能测试parameter averaging的UAS,因为averaging parameter没有保存.</li></ol><h4 id="使用syntaxnet以及Github上推荐的参数配置-跑了一遍baidu提供数据的代码"><a href="#使用syntaxnet以及Github上推荐的参数配置-跑了一遍baidu提供数据的代码" class="headerlink" title="使用syntaxnet以及Github上推荐的参数配置,跑了一遍baidu提供数据的代码"></a>使用syntaxnet以及Github上推荐的参数配置,跑了一遍baidu提供数据的代码</h4><p>实验:</p><table><thead><tr><th><strong>position</strong></th><th><strong>best UAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>amax:~/TensorFlow/models/syntaxnet/nndep_baidu_data</td><td>91.99</td><td>m171</td></tr></tbody></table><h4 id="2017-1-15-实验整理"><a href="#2017-1-15-实验整理" class="headerlink" title="2017-1-15-实验整理"></a>2017-1-15-实验整理</h4><p>SyntaxNet在周浩的数据上,greedy,使用默认参数配置,eval metric:92.48%<br>修正了GN3Parser,放弃了融合beam的功能,实现了基于state的batch的train过程.记录实验数据如下:</p><table><thead><tr><th><strong>position</strong></th><th><strong>best UAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/greedy-state-greedy-eta-0.1</td><td><strong>91.55</strong></td><td>eta=0.1, lambda=1e-4, momentum=0.9</td></tr><tr><td>m175 ~/GN3Parser-beta/greedy-state-greedy-eta-0.05</td><td>91.25</td><td>eta=0.05, …同上</td></tr><tr><td>m175 ~/GN3Parser-beta/greedy-state-greedy-eta-0.05-lambda-1e-6</td><td>90.64</td><td>eta=0.05, lamdba=1e-6, 同上</td></tr><tr><td>m175 ~/GN3Parser-beta/greedy-state-greedy-eta-0.01</td><td>90.61</td><td>eta=0.01, …同上</td></tr></tbody></table><h4 id="正则化实验整理"><a href="#正则化实验整理" class="headerlink" title="正则化实验整理"></a>正则化实验整理</h4><p>正则化的实验：参数的更新方式选择Momentum Optimizer, tensorflow 实现方式;三个Embedding的初始化方式还都是LibN3L自带的,暂时没有切换到正态分布</p><table><thead><tr><th><strong>position</strong></th><th><strong>best UAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-no-regularization</td><td>90.26</td><td>No regularization</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-w-regularization-reg-1e-4</td><td><strong>90.65</strong></td><td>with regularization;lambda 1e-4</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-w-regularization-reg-1e-4-batch-1</td><td>85.30</td><td>parameter same with 90.65, batch is 1</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-w-regularization</td><td>90.22</td><td>with regularization;lambda 1e-5</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-w-regularization-reg-1e-7</td><td>90.11</td><td>with regularization;lambda 1e-7</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-w-regularization-normalization-embedding</td><td>90.03</td><td>with regularization;normal embedding</td></tr></tbody></table><h4 id="Momentum-Optimizer实验整理"><a href="#Momentum-Optimizer实验整理" class="headerlink" title="Momentum Optimizer实验整理"></a>Momentum Optimizer实验整理</h4><p>Momentum Optimizer: 梯度更新方式的实验,本组实验总共探究了两个实现方式<br>tensorflow实现方式:<br>Sebastian博客给出的方式:</p><table><thead><tr><th><strong>position</strong></th><th><strong>best UAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-momentum-from-sebbastian</td><td>90.22</td><td>Momentum Optimizer, From sebastian</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-w-regularization</td><td>90.22</td><td>with regularization;lambda 1e-5</td></tr></tbody></table><h4 id="Words-POS-Labels-Embedding-初始化方式比较"><a href="#Words-POS-Labels-Embedding-初始化方式比较" class="headerlink" title="Words POS Labels Embedding 初始化方式比较"></a>Words POS Labels Embedding 初始化方式比较</h4><p>word pos labels embedding的初始化方法比较:<br>uniform分布:(使用了norm2one)<br>normalization分布:(没有使用norm2one)</p><table><thead><tr><th><strong>position</strong></th><th><strong>best UAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-normalization-embedding-words-pos-label</td><td>89.79</td><td>参数设置和90.65那个一样</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-normalization-embedding-words-pos-label-w-norm2one</td><td>89.82</td><td>使用了norm2one,其他参数一样</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-normalization-embedding-words-pos-label-w-norm2one-eta-0.4</td><td>88.98</td><td>使用了norm2one,eta=0.4</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-normalization-embedding-words-pos-label-eta-0.4</td><td>90.06</td><td>eta=0.4,其他参数一样</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-uniform-embedding-words-pos-label</td><td>90.15</td><td>参数设置和90.65模型一样</td></tr></tbody></table><p>从结果中,可以看出来,当使用了normalization分布的时候,还测试了eta为0.4的情况</p><h4 id="2016-10-30-实验整理"><a href="#2016-10-30-实验整理" class="headerlink" title="2016-10-30-实验整理"></a>2016-10-30-实验整理</h4><table><thead><tr><th><strong>position</strong></th><th><strong>parameters</strong></th><th><strong>current best accuracy/epoch</strong></th></tr></thead><tbody><tr><td>m176:~/GN3Parser-beta/experiment-ml-batch-1</td><td>max likelihood beam 16 batch 1</td><td>88.56(iter 11)</td></tr><tr><td>m176:~/GN3Parser-beta/experiment-ml-beam-32-batch-20</td><td>ml beam 32 batch 20</td><td>90.66(iter 12)</td></tr><tr><td>m176:~/GN3Parser-beta/experiment-ml-h-500-batch-20-beam-16</td><td>ml beam 16 hidden 500 batch 20</td><td>89.09(iter 7)</td></tr></tbody></table><p><em>跑了一个第一版本的precomputation实验，ml，用来对比实现第二版本的速度以及准确率</em><br>m176:~/GN3Parser-pre-computation/example-maxlikelihood-beam-32-batch-20<br>Accuracy:<strong>90.99(iter 19)</strong><br>可能因为是batch设置为20的原因，进一步的优化并没有明显的速度优势，第一次迭代的速度都是13min左右。<br>以前有过一次实验，当batch设置为200的时候，就能够看出明显的优势，第二版本的速度比第一版本快2倍左右。</p><h4 id="2016-10-29-实验整理"><a href="#2016-10-29-实验整理" class="headerlink" title="2016-10-29-实验整理"></a>2016-10-29-实验整理</h4><p>目前最新的代码，融合了greedy search，可供选择的loss：max margin, max likelihood损耗函数。GN3Parser-beta</p><p>#####LN3Parser: greedy search<br>parameters: beam size=##, dropout=0.0, hidden layer neuron number=200, embedding dim=50, thread num=30</p><p>batch size=5: m172 /home/yzhang/GN3Parser-greedy-search/example-dim50-batch5 第10次迭代所用时间：<font color="blue">22:31:22 - 22:39:46 = 8min24s</font><br>batch size=20: m172 /home/yzhang/GN3Parser-greedy-search/example-dim50-batch20 第10次迭代所用时间：<font color="blue">10:42:38 - 10:46:29 = 3min51s</font><br>batch size=200: m172 /home/yzhang/GN3Parser-greedy-search/example-dim50-batch200 第10次迭代所用时间：<font color="blue">23:08:48 - 23:10:06 = 1min18s</font></p><table><thead><tr><th><strong>epoch</strong></th><th><strong>batch size=5 Accuracy</strong></th><th><strong>batch size=20 Accuracy</strong></th><th><strong>batch size=200 Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>84.54</td><td>82.56</td><td>64.51</td></tr><tr><td>10</td><td>88.85</td><td>88.49</td><td>84.69</td></tr><tr><td>20</td><td>88.78/89.18(iter 16)</td><td>88.42/88.82(iter 16)</td><td>87.01</td></tr><tr><td>STOP</td><td>89.18(iter 16)</td><td>88.82(iter 16)</td><td>88.15(iter 39)</td></tr></tbody></table><p>#####GN3Parser: max likelihood<br>parameters: beam size=16, dropout=0.0, hidden layer neuron number=200, embedding dim=50, thread num=30</p><p>batch size=5: m175 ~/GN3Parser-pre-computation/example-maxlikelihood-batch-5 第10次迭代所用时间：<font color="blue">17:42:55 - 16:53:00 = 49min55s</font><br>batch size=20: m175 ~/GN3Parser-pre-computation/example-maxlikelihood-batch-20 第10次迭代所用时间：<font color="blue">12:15:20 - 12:30:46 = 15min26s</font><br>batch size=200: m172 ~/GN3Parser-pre-computation/example-maxlikelihood-batch-200 第10次迭代所用时间：<font color="blue">15:48:40 - 15:58:29 = 9min49s</font></p><table><thead><tr><th><strong>epoch</strong></th><th><strong>batch size=5 Accuracy</strong></th><th><strong>batch size=20 Accuracy</strong></th><th><strong>batch size=200 Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>81.70</td><td>80.07</td><td>54.78</td></tr><tr><td>10</td><td>89.02</td><td>88.52</td><td>85.55</td></tr><tr><td>20</td><td>88.51/89.43(iter 14)</td><td>87.90/88.70(iter 19)</td><td>86.54/87.50(iter 18)</td></tr><tr><td>STOP</td><td>89.43(iter 14)</td><td>88.70(iter 19)</td><td>87.71(iter 26)</td></tr></tbody></table><h5 id="GN3Parser-MM-VS-ML"><a href="#GN3Parser-MM-VS-ML" class="headerlink" title="GN3Parser MM VS ML"></a>GN3Parser MM VS ML</h5><p>parameters: beam size=16, dropout=0.0, hidden layer neuron number=200, embedding dim=50, thread num=30</p><p>MM: m173 ~/GN3Parser-pre-computation/example-maxmargin-batch-5 第10次迭代所用时间：<font color="blue">03:01:07 - 03:16:46 = 15min39s</font><br>ML: m175 ~/GN3Parser-pre-computation/example-maxlikelihood-batch-5 第10次迭代所用时间：<font color="blue">17:42:55 - 16:53:00 = 49min55s</font></p><table><thead><tr><th><strong>epoch</strong></th><th><strong>ML Accuracy</strong></th><th><strong>MM Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>81.70</td><td>74.21</td></tr><tr><td>10</td><td>89.02</td><td>79.55</td></tr><tr><td>20</td><td>88.51/89.43(iter 14)</td><td>80.00/80.65(iter 19)</td></tr><tr><td>STOP</td><td>89.43(iter 14)</td><td>83.53(iter 122)</td></tr></tbody></table><h4 id="加了pre-computation-和不加pre-computation的速度对比"><a href="#加了pre-computation-和不加pre-computation的速度对比" class="headerlink" title="加了pre computation 和不加pre computation的速度对比"></a>加了pre computation 和不加pre computation的速度对比</h4><p>统一查看第10次迭代的时间<br>参数配置：beam size=16,</p><table><thead><tr><th><strong>method</strong></th><th><strong>thread num</strong></th><th><strong>batch</strong></th><th><strong>word embedding size</strong></th><th><strong>hidden layer neuron number</strong></th></tr></thead><tbody><tr><td>pre computation</td><td>15</td><td>200</td><td>50</td><td>200</td></tr><tr><td>no pre computation</td><td>15</td><td>200</td><td>50</td><td>200</td></tr></tbody></table><table><thead><tr><th><strong>method</strong></th><th><strong>begin time</strong></th><th><strong>end time</strong></th><th><strong>UAS</strong></th><th><strong>end UAS</strong></th></tr></thead><tbody><tr><td>pre computation</td><td>09:04:33</td><td>09:09:31</td><td>81.46%</td><td>84.47%/113</td></tr><tr><td>no pre computation</td><td>11:21:11</td><td>11:43:12</td><td>59.46%</td><td>–</td></tr></tbody></table><p>总的来说速度快了: 5min/22min = 4<br>准确率差这么多？</p><h4 id="利用目前的代码实现greedy-search，with-pre-computation"><a href="#利用目前的代码实现greedy-search，with-pre-computation" class="headerlink" title="利用目前的代码实现greedy search，with pre computation"></a>利用目前的代码实现greedy search，with pre computation</h4><h4 id="加了pre-computation-和不加pre-computation的速度对比-1"><a href="#加了pre-computation-和不加pre-computation的速度对比-1" class="headerlink" title="加了pre computation 和不加pre computation的速度对比"></a>加了pre computation 和不加pre computation的速度对比</h4><p>统一查看第10次迭代的时间<br>参数配置：beam size=16,</p><table><thead><tr><th><strong>method</strong></th><th><strong>thread num</strong></th><th><strong>batch</strong></th><th><strong>word embedding size</strong></th><th><strong>hidden layer neuron number</strong></th></tr></thead><tbody><tr><td>pre computation</td><td>15</td><td>200</td><td>50</td><td>200</td></tr><tr><td>no pre computation</td><td>15</td><td>200</td><td>50</td><td>200</td></tr></tbody></table><table><thead><tr><th><strong>method</strong></th><th><strong>begin time</strong></th><th><strong>end time</strong></th><th><strong>UAS</strong></th><th><strong>end UAS</strong></th></tr></thead><tbody><tr><td>pre computation</td><td>09:04:33</td><td>09:09:31</td><td>81.46%</td><td>84.47%/113</td></tr><tr><td>no pre computation</td><td>11:21:11</td><td>11:43:12</td><td>59.46%</td><td>–</td></tr></tbody></table><p>总的来说速度快了: 5min/22min = 4<br>准确率差这么多？</p><h4 id="利用目前的代码实现greedy-search，with-pre-computation-1"><a href="#利用目前的代码实现greedy-search，with-pre-computation-1" class="headerlink" title="利用目前的代码实现greedy search，with pre computation"></a>利用目前的代码实现greedy search，with pre computation</h4><table><thead><tr><th><strong>epoch</strong></th><th><strong>UAS</strong></th></tr></thead><tbody><tr><td>19</td><td>88.15</td></tr></tbody></table><h4 id="中文实验数据"><a href="#中文实验数据" class="headerlink" title="中文实验数据"></a>中文实验数据</h4><p>beam_size=16, batch_size=20, threads=15, word embedding dim=50, dropout=0.2</p><h5 id="max-margin-loss"><a href="#max-margin-loss" class="headerlink" title="max margin loss:"></a>max margin loss:</h5><table><thead><tr><th><strong>epoch</strong></th><th><strong>Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>60.02</td></tr><tr><td>10</td><td>68.01</td></tr><tr><td>19</td><td>70.45</td></tr><tr><td>23</td><td>71.16</td></tr><tr><td>46</td><td>72.38</td></tr><tr><td>64</td><td>73.02</td></tr><tr><td>91</td><td>73.21</td></tr><tr><td>112</td><td>72.36/73.21</td></tr><tr><td>156</td><td>74.01</td></tr><tr><td>168</td><td>74.16</td></tr><tr><td>182</td><td>72.59/73.16</td></tr><tr><td>240</td><td>74.61</td></tr></tbody></table><p>第10次迭代所花时间：59min</p><h5 id="max-log-likelihood"><a href="#max-log-likelihood" class="headerlink" title="max log likelihood:"></a>max log likelihood:</h5><table><thead><tr><th><strong>epoch</strong></th><th><strong>Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>33.86</td></tr><tr><td>9</td><td>50.78</td></tr><tr><td>17</td><td>51.63</td></tr><tr><td>22</td><td>52.69</td></tr><tr><td>41</td><td>54.06</td></tr><tr><td>70</td><td>54.92</td></tr><tr><td>75</td><td>55.33</td></tr><tr><td>139</td><td>53.48/55.33</td></tr><tr><td>159</td><td>53.48/55.33</td></tr><tr><td>176 STOP</td><td>50.07/55.33</td></tr></tbody></table><p>第10次迭代所花时间：24min</p><h4 id="英文实验数据"><a href="#英文实验数据" class="headerlink" title="英文实验数据"></a>英文实验数据</h4><h5 id="dropout-0-2-threads-15"><a href="#dropout-0-2-threads-15" class="headerlink" title="dropout = 0.2, threads=15"></a>dropout = 0.2, threads=15</h5><table><thead><tr><th><strong>epoch</strong></th><th><strong>beam size</strong></th><th><strong>hidden layer neuron number</strong></th><th><strong>batch size</strong></th><th><strong>word embedding dim</strong></th><th><strong>Accuracy/Best Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>16</td><td>200</td><td>15</td><td>300</td><td>75.65</td></tr><tr><td>10</td><td></td><td></td><td></td><td></td><td>82.52</td></tr><tr><td>19</td><td></td><td></td><td></td><td></td><td>82.82</td></tr><tr><td>24</td><td></td><td></td><td></td><td></td><td>83.29</td></tr><tr><td>28</td><td></td><td></td><td></td><td></td><td>82.47/83.29</td></tr><tr><td>29</td><td></td><td></td><td></td><td></td><td>83.44</td></tr><tr><td>36</td><td></td><td></td><td></td><td></td><td>83.04/83.44</td></tr><tr><td>48</td><td></td><td></td><td></td><td></td><td>82.15/83.44</td></tr></tbody></table><p>第10次迭代所花时间：6h20min</p><table><thead><tr><th><strong>epoch</strong></th><th><strong>beam size</strong></th><th><strong>hidden layer neuron number</strong></th><th><strong>batch size</strong></th><th><strong>word embedding dim</strong></th><th><strong>Accuracy/Best Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>16</td><td>1024</td><td>15</td><td>300</td><td>79.05</td></tr><tr><td>6</td><td></td><td></td><td></td><td></td><td>83.39/83.45</td></tr><tr><td>7</td><td></td><td></td><td></td><td></td><td>84.49</td></tr><tr><td>9</td><td></td><td></td><td></td><td></td><td>84.80</td></tr><tr><td>10</td><td></td><td></td><td></td><td></td><td>84.87</td></tr><tr><td>12</td><td></td><td></td><td></td><td></td><td>85.59</td></tr><tr><td>15</td><td></td><td></td><td></td><td></td><td>85.89</td></tr></tbody></table><p>第9次迭代所花时间：24h…<br>第10次迭代结果还没有出来</p><p>server: 172, threads=30</p><table><thead><tr><th><strong>epoch</strong></th><th><strong>beam size</strong></th><th><strong>hidden layer neuron number</strong></th><th><strong>batch size</strong></th><th><strong>word embedding dim</strong></th><th><strong>Accuracy/Best Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>64</td><td>200</td><td>2000</td><td>50</td><td>26.67</td></tr><tr><td>20</td><td></td><td></td><td></td><td></td><td>62.53/67.77</td></tr><tr><td>32</td><td></td><td></td><td></td><td></td><td>79.53</td></tr><tr><td>38</td><td></td><td></td><td></td><td></td><td>81.48</td></tr><tr><td>51</td><td></td><td></td><td></td><td></td><td>82.52</td></tr><tr><td>58</td><td></td><td></td><td></td><td></td><td>80.87/82.52</td></tr><tr><td>60</td><td></td><td></td><td></td><td></td><td>82.53</td></tr><tr><td>68</td><td></td><td></td><td></td><td></td><td>82.73</td></tr></tbody></table><p>人为掐断<br>第10次迭代所花时间：50min</p><h5 id="google-loss"><a href="#google-loss" class="headerlink" title="google loss"></a>google loss</h5><p>dropout = 0.0， 时间：2016-10-20 07:30:22，（纯属猜测，batch设置为1试玩的）, threads=30</p><table><thead><tr><th><strong>epoch</strong></th><th><strong>beam size</strong></th><th><strong>hidden layer neuron number</strong></th><th><strong>batch size</strong></th><th><strong>word embedding dim</strong></th><th><strong>Accuracy/Best Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>16</td><td>200</td><td>1</td><td>50</td><td>54.25</td></tr><tr><td>6</td><td></td><td></td><td></td><td></td><td>63.08</td></tr><tr><td>24</td><td></td><td></td><td></td><td></td><td>67.39</td></tr><tr><td>31</td><td></td><td></td><td></td><td></td><td>67.88</td></tr><tr><td>48</td><td></td><td></td><td></td><td></td><td>61.67/67.88</td></tr><tr><td>76</td><td></td><td></td><td></td><td></td><td>58.30/67.88</td></tr><tr><td>94</td><td></td><td></td><td></td><td></td><td>59.28/67.88</td></tr><tr><td>97</td><td></td><td></td><td></td><td></td><td>68.31</td></tr><tr><td>179</td><td></td><td></td><td></td><td></td><td>53.42/68.31</td></tr></tbody></table><p>STOP<br>第10次迭代所花时间：53min</p><p>dropout = 0.2， 时间：2016-10-19 18:18:32, threads=30</p><table><thead><tr><th><strong>epoch</strong></th><th><strong>beam size</strong></th><th><strong>hidden layer neuron number</strong></th><th><strong>batch size</strong></th><th><strong>word embedding dim</strong></th><th><strong>Accuracy/Best Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>16</td><td>200</td><td>50</td><td>50</td><td>56.79</td></tr><tr><td>64</td><td></td><td></td><td></td><td></td><td>72.45</td></tr><tr><td>78</td><td></td><td></td><td></td><td></td><td>72.67</td></tr><tr><td>111</td><td></td><td></td><td></td><td></td><td>72.78</td></tr><tr><td>168</td><td></td><td></td><td></td><td></td><td>69.69/72.78</td></tr><tr><td>212 STOP</td><td></td><td></td><td></td><td></td><td>68.18/72.78</td></tr></tbody></table><p>第10次迭代所花时间：20min</p><h3 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h3><h4 id="为什么Node的lock都是50？而不是0？"><a href="#为什么Node的lock都是50？而不是0？" class="headerlink" title="为什么Node的lock都是50？而不是0？"></a>为什么Node的lock都是50？而不是0？</h4><p>因为在函数中声明定义了PAddNode，在函数中将这个PAddNode加入到了Graph中，当函数结束的时候，PAddNode会被释放掉。<br>所以lock才会是一个乱七八糟的数字.</p><h4 id="找到了为什么精度只有0-1了"><a href="#找到了为什么精度只有0-1了" class="headerlink" title="找到了为什么精度只有0.1了"></a>找到了为什么精度只有0.1了</h4><p>因为有一段代码设置了输出的时候的precision，实际上的精度是没有问题的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">basic-features/FeatureDictionary.cpp:73:&lt;&lt; &quot;\&quot; &quot; &lt;&lt; fixed &lt;&lt; setprecision(1) &lt;&lt; endl;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;开此博客记录在开发GN3Parser(重现SyntaxNet)过程中的一些问题(已经重现成功！！！)&lt;/p&gt;
    
    </summary>
    
    
      <category term="work" scheme="http://yoursite.com/tags/work/"/>
    
      <category term="depparser" scheme="http://yoursite.com/tags/depparser/"/>
    
  </entry>
  
  <entry>
    <title>eigen学习</title>
    <link href="http://yoursite.com/2017/02/17/eigen%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/02/17/eigen学习/</id>
    <published>2017-02-17T04:32:12.000Z</published>
    <updated>2019-01-21T13:49:53.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="eigen学习"><a href="#eigen学习" class="headerlink" title="eigen学习"></a>eigen学习</h1><p>最近需要学习一下eigen,开此博客记录一些笔记有些重要的东西就直接从eigen官网copy过来了~<br><a id="more"></a></p><h3 id="The-matrix-class"><a href="#The-matrix-class" class="headerlink" title="The matrix class"></a>The matrix class</h3><p>This represents a matrix of arbitrary size (hence the X in MatrixXd), in which every entry is a double (hence the d in MatrixXd).<br>Matrix &lt; typename Scalar, int RowsAtCompileTime, int ColsAtCompileTime &gt;<br>typedef Matrix &lt; float, 3, 1 &gt; Vector3f;<br>typedef Matrix &lt; double, Dynamic, Dynamic &gt; MatrixXd;<br>All Eigen matrices default to column-major storage order.<br>rows(), cols() and size().<br>use fixed sizes for very small sizes where you can, and use dynamic sizes for larger sizes or where you have to.</p><h3 id="Matrix-and-vector-arithmetric"><a href="#Matrix-and-vector-arithmetric" class="headerlink" title="Matrix and vector arithmetric"></a>Matrix and vector arithmetric</h3><p>Therefore, the instruction a = a.transpose() does not replace a with its transpose(except multiplication)<br>the dot() and cross() methods.<br>伴随矩阵?忘了..</p><h3 id="The-Array-class-and-coefficient-wise-operations"><a href="#The-Array-class-and-coefficient-wise-operations" class="headerlink" title="The Array class and coefficient-wise operations"></a>The Array class and coefficient-wise operations</h3><p>The Array class provides general-purpose arrays.<br>Furthermore, the Array class provides an easy way to perform coefficient-wise operations.<br>Array &lt; typename Scalar, int RowsAtCompileTime, int ColsAtCompileTime &gt;<br>For element-wise product?</p><h4 id="Converting-between-array-and-matrix-expressions"><a href="#Converting-between-array-and-matrix-expressions" class="headerlink" title="Converting between array and matrix expressions"></a>Converting between array and matrix expressions</h4><p>Matrix expressions have an .array() method that ‘converts’ them into array expressions.<br>Array expressions have a .matrix() method<br>Array: <font color="red">coefficient wise</font></p><h3 id="Block-operations"><a href="#Block-operations" class="headerlink" title="Block operations"></a>Block operations</h3><p>Individual columns and rows are special cases of blocks. Eigen provides methods to easily address them: .col() and .row().</p><h3 id="Advanced-initialization"><a href="#Advanced-initialization" class="headerlink" title="Advanced initialization"></a>Advanced initialization</h3><p>The finished() method is necessary here to get the actual matrix object once the comma initialization of our temporary submatrix is done.</p><h3 id="Reductions-visitors-and-broadcasting"><a href="#Reductions-visitors-and-broadcasting" class="headerlink" title="Reductions, visitors and broadcasting"></a>Reductions, visitors and broadcasting</h3><p>Norm computations?<br>Partial reductions are applied with colwise() or rowwise() .<br>The concept behind broadcasting is similar to partial reduction.</p><h3 id="Interfacing-with-raw-buffers-the-Map-class"><a href="#Interfacing-with-raw-buffers-the-Map-class" class="headerlink" title="Interfacing with raw buffers: the Map class"></a>Interfacing with raw buffers: the Map class</h3><p>You can use a Map object just like any other Eigen type:</p><h3 id="Reshape-and-Slicing"><a href="#Reshape-and-Slicing" class="headerlink" title="Reshape and Slicing"></a>Reshape and Slicing</h3><h3 id="Aliasing"><a href="#Aliasing" class="headerlink" title="Aliasing"></a>Aliasing</h3><p>Aliasing occurs more naturally when trying to shrink a matrix<br>a = a.transpose(); // !!! do NOT do this !!!<br>mat.bottomRightCorner(2,2) = mat.topLeftCorner(2,2).eval();<br>Eigen provides the special-purpose function transposeInPlace() which replaces a matrix by its transpose.<br>If an xxxInPlace() function is available, then it is best to use it, because it indicates more clearly what you are doing.<br>Thus, if matA is a squared matrix, then the statement matA = matA * matA;<br>Aliasing occurs when the same matrix or array coefficients appear both on the left- and the right-hand side of an assignment operator.</p><h3 id="Storage-orders"><a href="#Storage-orders" class="headerlink" title="Storage orders"></a>Storage orders</h3><p>If the storage order is not specified, then Eigen defaults to storing the entry in column-major.</p><h2 id="Dense-linear-problems-and-decompositions"><a href="#Dense-linear-problems-and-decompositions" class="headerlink" title="Dense linear problems and decompositions"></a>Dense linear problems and decompositions</h2><h3 id="Linear-algebra-and-decompositions"><a href="#Linear-algebra-and-decompositions" class="headerlink" title="Linear algebra and decompositions"></a>Linear algebra and decompositions</h3><p>可以求解矩阵运算<br>(中间跳过了几个章节)</p><h3 id="Sparse-matrix-manipulations"><a href="#Sparse-matrix-manipulations" class="headerlink" title="Sparse matrix manipulations"></a>Sparse matrix manipulations</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;eigen学习&quot;&gt;&lt;a href=&quot;#eigen学习&quot; class=&quot;headerlink&quot; title=&quot;eigen学习&quot;&gt;&lt;/a&gt;eigen学习&lt;/h1&gt;&lt;p&gt;最近需要学习一下eigen,开此博客记录一些笔记有些重要的东西就直接从eigen官网copy过来了~&lt;br&gt;
    
    </summary>
    
    
      <category term="eigen" scheme="http://yoursite.com/tags/eigen/"/>
    
  </entry>
  
  <entry>
    <title>span-parser</title>
    <link href="http://yoursite.com/2016/11/15/span-parser/"/>
    <id>http://yoursite.com/2016/11/15/span-parser/</id>
    <published>2016-11-15T12:37:01.000Z</published>
    <updated>2019-01-21T13:49:53.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="span-parser"><a href="#span-parser" class="headerlink" title="span parser"></a>span parser</h1><h2 id="span-parser-源码剖析"><a href="#span-parser-源码剖析" class="headerlink" title="span parser 源码剖析"></a>span parser 源码剖析</h2><p>最近在学习基于转移的句法分析，学习span parser，着重学习pycnn的使用。<br><a id="more"></a><br>LSTM类：<br>    初始化一个LSTM类，仅仅初始化参数，并没有具体实现相关的具体算法。<br>State类：<br>    包含一个LSTM单元，并且实现了网络的计算过程。</p><p>struct data: ?<br>label data: ?</p><p>PharseTree类：<br>    _parse函数，解析一句话Tree<br>    将line -&gt; tree<br>Parser.py<br>    gold_actions(tree): 得到tree的gold actions</p><h3 id="parser的一些参数设置"><a href="#parser的一些参数设置" class="headerlink" title="parser的一些参数设置"></a>parser的一些参数设置</h3><p>word dim: 50 tag dim: 20<br>lstm units: 200<br>hidden units: 200<br>batch: 10<br>dropout: 0.5<br>unknow param: 0.8375?<br>alpha: 1.0</p><h3 id="pycnn的使用细节"><a href="#pycnn的使用细节" class="headerlink" title="pycnn的使用细节"></a>pycnn的使用细节</h3><blockquote><ul><li>model.add_parameters(…)</li><li>parameters.load_array(np.random.uniform(-0.01, 0.01, self.W_i.shape()))</li><li>pycnn.logistic(self.W_i * x + self.b_i)</li><li>g = pycnn.tanh(self.W_c * x + self.b_c)</li><li>c = pycnn.cwise_multiply(f, self.c) + pycnn.cwise_multiply(i, g)</li><li>pycnn.AdadeltaTrainer(self.model, lam=0, eps=1e-7, rho=0.99)</li><li>model.add_lookup_parameters(‘word-embed’, (word_count, word_dims))</li><li>model[‘word-embed’].init_from_array(np.random.uniform(-0.01, 0.01, self.model[‘word-embed’].shape()),)</li><li>activation = pycnn.rectify</li><li>W1_struct = pycnn.parameter(self.model[‘struct-hidden-W’])</li></ul></blockquote><blockquote><ul><li>wordvec = pycnn.lookup(self.model[‘word-embed’], w)</li><li>vec = pycnn.dropout(vec, self.droprate)</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;span-parser&quot;&gt;&lt;a href=&quot;#span-parser&quot; class=&quot;headerlink&quot; title=&quot;span parser&quot;&gt;&lt;/a&gt;span parser&lt;/h1&gt;&lt;h2 id=&quot;span-parser-源码剖析&quot;&gt;&lt;a href=&quot;#span-parser-源码剖析&quot; class=&quot;headerlink&quot; title=&quot;span parser 源码剖析&quot;&gt;&lt;/a&gt;span parser 源码剖析&lt;/h2&gt;&lt;p&gt;最近在学习基于转移的句法分析，学习span parser，着重学习pycnn的使用。&lt;br&gt;
    
    </summary>
    
    
      <category term="work" scheme="http://yoursite.com/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>hlt-la demo性能测试</title>
    <link href="http://yoursite.com/2016/09/27/demo%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2016/09/27/demo性能测试/</id>
    <published>2016-09-27T09:49:52.000Z</published>
    <updated>2019-01-21T13:49:53.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在CTB7-test数据上，单独测试分词和词性的准确率和速度（不是调用demo的web-service），分词模型没有加入词典（CTB7-PD），词性（CTB7-PD）"><a href="#在CTB7-test数据上，单独测试分词和词性的准确率和速度（不是调用demo的web-service），分词模型没有加入词典（CTB7-PD），词性（CTB7-PD）" class="headerlink" title="在CTB7-test数据上，单独测试分词和词性的准确率和速度（不是调用demo的web service），分词模型没有加入词典（CTB7+PD），词性（CTB7+PD）"></a>在CTB7-test数据上，单独测试分词和词性的准确率和速度（不是调用demo的web service），分词模型没有加入词典（CTB7+PD），词性（CTB7+PD）</h1><a id="more"></a><h2 id="pos-demo性能测试，假设分词正确"><a href="#pos-demo性能测试，假设分词正确" class="headerlink" title="pos demo性能测试，假设分词正确"></a>pos demo性能测试，假设分词正确</h2><table><thead><tr><th><strong>Accuracy</strong></th><th><strong>sentence/s</strong></th><th><strong>memory</strong></th></tr></thead><tbody><tr><td>94.78</td><td>48</td><td>1.1g</td></tr></tbody></table><h2 id="ws-demo性能测试"><a href="#ws-demo性能测试" class="headerlink" title="ws demo性能测试"></a>ws demo性能测试</h2><p>测试数据，CTB7 test数据</p><table><thead><tr><th><strong>P</strong></th><th><strong>R</strong></th><th><strong>F</strong></th><th><strong>sentence/s</strong></th><th><strong>memory</strong></th></tr></thead><tbody><tr><td>95.89</td><td>95.41</td><td>95.65</td><td>103</td><td>1.2g</td></tr></tbody></table><h3 id="ctb7-pku"><a href="#ctb7-pku" class="headerlink" title="ctb7+pku"></a>ctb7+pku</h3><p>POS Precision:          97168/100316 = 96.86192<br>qrxia@m173 ~/CRF-demo/src-v2/crf-ws-src-qrxia/example-ctb7-convertedPD-wspos</p><h3 id="ctb7-pku-lexicon-（2016-10-11：我们将Demo的分词模块更新为with-lexicon）"><a href="#ctb7-pku-lexicon-（2016-10-11：我们将Demo的分词模块更新为with-lexicon）" class="headerlink" title="ctb7+pku+lexicon （2016.10.11：我们将Demo的分词模块更新为with-lexicon）"></a>ctb7+pku+lexicon （2016.10.11：我们将Demo的分词模块更新为with-lexicon）</h3><p>POS Precision:          97329/100316 = 97.02241<br>qrxia@amax:~/NLPCC2016/ws-tagger/lexicon+ctb7+pd</p><h2 id="hlt-la-demo性能分析，调用web-service-测试数据CTB8-（discussion-forum数据，长度为6-13的短句，平均每句10词"><a href="#hlt-la-demo性能分析，调用web-service-测试数据CTB8-（discussion-forum数据，长度为6-13的短句，平均每句10词" class="headerlink" title="hlt-la demo性能分析，调用web service-测试数据CTB8 （discussion forum数据，长度为6-13的短句，平均每句10词)"></a>hlt-la demo性能分析，调用web service-测试数据CTB8 （discussion forum数据，长度为6-13的短句，平均每句10词)</h2><h3 id="分词的PRF，整个分词词性句法分析的速度"><a href="#分词的PRF，整个分词词性句法分析的速度" class="headerlink" title="分词的PRF，整个分词词性句法分析的速度"></a>分词的PRF，整个分词词性句法分析的速度</h3><p>开始时间: 2016-10-10 11:17:46.864316<br>结束时间: 2016-10-10 11:19:32.217073<br>句子总数: 1917<br>性能（?ms/句话）: 55.3ms/句话</p><table><thead><tr><th><strong>P</strong></th><th><strong>R</strong></th><th><strong>F</strong></th></tr></thead><tbody><tr><td>91.91</td><td>92.80</td><td>92.35</td></tr></tbody></table><h3 id="demo输入时已经分好词（通过标记），测试词性、句法的准确率"><a href="#demo输入时已经分好词（通过标记），测试词性、句法的准确率" class="headerlink" title="demo输入时已经分好词（通过标记），测试词性、句法的准确率"></a>demo输入时已经分好词（通过标记），测试<strong>词性、句法</strong>的准确率</h3><p>开始时间: 2016-10-10 11:52:36.150082<br>结束时间: 2016-10-10 11:54:20.475896<br>句子总数: 1917<br>性能(?ms/句子): 55.3ms/句子</p><h4 id="词性pos准确率"><a href="#词性pos准确率" class="headerlink" title="词性pos准确率"></a>词性pos准确率</h4><p>Accurcy: 91.83%</p><h4 id="没有标点"><a href="#没有标点" class="headerlink" title="没有标点"></a>没有标点</h4><table><thead><tr><th><strong>LAS</strong></th><th><strong>UAS</strong></th></tr></thead><tbody><tr><td>73.08%</td><td>79.44%</td></tr></tbody></table><h4 id="有标点-p"><a href="#有标点-p" class="headerlink" title="有标点 -p"></a>有标点 -p</h4><table><thead><tr><th><strong>LAS</strong></th><th><strong>UAS</strong></th></tr></thead><tbody><tr><td>71.86%</td><td>77.57%</td></tr></tbody></table><h2 id="测试文件的位置"><a href="#测试文件的位置" class="headerlink" title="测试文件的位置"></a>测试文件的位置</h2><p>qrxia@m173 ~/demo_effectiveness/</p><h2 id="hlt-la-demo性能分析，调用web-service-测试数据CTB7-（dev-test中长度为6-13的短句，且不是news来源，平均每句10词"><a href="#hlt-la-demo性能分析，调用web-service-测试数据CTB7-（dev-test中长度为6-13的短句，且不是news来源，平均每句10词" class="headerlink" title="hlt-la demo性能分析，调用web service-测试数据CTB7 （dev/test中长度为6-13的短句，且不是news来源，平均每句10词)"></a>hlt-la demo性能分析，调用web service-测试数据CTB7 （dev/test中长度为6-13的短句，且不是news来源，平均每句10词)</h2><h3 id="分词的PRF，整个分词词性句法分析的速度-1"><a href="#分词的PRF，整个分词词性句法分析的速度-1" class="headerlink" title="分词的PRF，整个分词词性句法分析的速度"></a>分词的PRF，整个分词词性句法分析的速度</h3><p>开始时间: 2016-10-11 14:08:17.601440<br>结束时间: 2016-10-11 14:08:39.247280<br>句子总数: 341<br>性能(?ms/句话): 64.5ms/s</p><table><thead><tr><th><strong>P</strong></th><th><strong>R</strong></th><th><strong>F</strong></th></tr></thead><tbody><tr><td>94.68</td><td>94.12</td><td>94.40</td></tr></tbody></table><h3 id="demo输入时已经分好词（通过标记），测试词性、句法的准确率-1"><a href="#demo输入时已经分好词（通过标记），测试词性、句法的准确率-1" class="headerlink" title="demo输入时已经分好词（通过标记），测试词性、句法的准确率"></a>demo输入时已经分好词（通过标记），测试<strong>词性、句法</strong>的准确率</h3><p>开始时间: 2016-10-11 14:22:07.050952<br>结束时间: 2016-10-11 14:22:25.648053<br>句子总数: 341<br>性能(?ms/句话): 52.8ms/句话</p><h4 id="没有标点-1"><a href="#没有标点-1" class="headerlink" title="没有标点"></a>没有标点</h4><table><thead><tr><th><strong>LAS</strong></th><th><strong>UAS</strong></th></tr></thead><tbody><tr><td>83.23%</td><td>87.92%</td></tr></tbody></table><h4 id="有标点-p-1"><a href="#有标点-p-1" class="headerlink" title="有标点 -p"></a>有标点 -p</h4><table><thead><tr><th><strong>LAS</strong></th><th><strong>UAS</strong></th></tr></thead><tbody><tr><td>83.41%</td><td>87.36%</td></tr></tbody></table><h4 id="词性pos准确率-1"><a href="#词性pos准确率-1" class="headerlink" title="词性pos准确率"></a>词性pos准确率</h4><p>Accuracy: 95.10%</p><h2 id="测试文件的位置-1"><a href="#测试文件的位置-1" class="headerlink" title="测试文件的位置"></a>测试文件的位置</h2><p>qrxia@m172 ~/demo_effectiveness/ctb7-dev-test</p><h2 id="hlt-la-demo性能分析（demo的分词更新为with-lexicon），调用web-service-测试数据CTB7-（dev-test中长度为6-13的短句，且不是news来源，平均每句10词"><a href="#hlt-la-demo性能分析（demo的分词更新为with-lexicon），调用web-service-测试数据CTB7-（dev-test中长度为6-13的短句，且不是news来源，平均每句10词" class="headerlink" title="hlt-la demo性能分析（demo的分词更新为with-lexicon），调用web service-测试数据CTB7 （dev/test中长度为6-13的短句，且不是news来源，平均每句10词)"></a>hlt-la demo性能分析（demo的分词更新为with-lexicon），调用web service-测试数据CTB7 （dev/test中长度为6-13的短句，且不是news来源，平均每句10词)</h2><h3 id="分词的PRF，整个分词词性句法分析的速度-2"><a href="#分词的PRF，整个分词词性句法分析的速度-2" class="headerlink" title="分词的PRF，整个分词词性句法分析的速度"></a>分词的PRF，整个分词词性句法分析的速度</h3><p>开始时间: 2016-10-11 15:30:08.736054<br>结束时间: 2016-10-11 15:30:34.079522<br>句子总数: 341<br>性能(?ms/句话): 76ms/s</p><table><thead><tr><th><strong>P</strong></th><th><strong>R</strong></th><th><strong>F</strong></th></tr></thead><tbody><tr><td>95.05</td><td>94.72</td><td>94.89</td></tr></tbody></table><h2 id="测试文件的位置-2"><a href="#测试文件的位置-2" class="headerlink" title="测试文件的位置"></a>测试文件的位置</h2><p>qrxia@m172 ~/demo_effectiveness/ctb7-dev-test-demo-ws-w-lexicon/</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在CTB7-test数据上，单独测试分词和词性的准确率和速度（不是调用demo的web-service），分词模型没有加入词典（CTB7-PD），词性（CTB7-PD）&quot;&gt;&lt;a href=&quot;#在CTB7-test数据上，单独测试分词和词性的准确率和速度（不是调用demo的web-service），分词模型没有加入词典（CTB7-PD），词性（CTB7-PD）&quot; class=&quot;headerlink&quot; title=&quot;在CTB7-test数据上，单独测试分词和词性的准确率和速度（不是调用demo的web service），分词模型没有加入词典（CTB7+PD），词性（CTB7+PD）&quot;&gt;&lt;/a&gt;在CTB7-test数据上，单独测试分词和词性的准确率和速度（不是调用demo的web service），分词模型没有加入词典（CTB7+PD），词性（CTB7+PD）&lt;/h1&gt;
    
    </summary>
    
    
      <category term="work" scheme="http://yoursite.com/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>SyntaxNet学习</title>
    <link href="http://yoursite.com/2016/08/20/SyntaxNet%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/08/20/SyntaxNet学习/</id>
    <published>2016-08-20T08:47:39.000Z</published>
    <updated>2019-01-21T13:49:53.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>因为最近的工作需要使用到SyntaxNet，所以新建一篇博客，记录相关的学习过程。：）<br><a href="https://github.com/tensorflow/models/tree/master/syntaxnet" target="_blank" rel="noopener">github地址</a></p><p><a href="/documents/MaxLogLikelihood/main.pdf">MaxLogLikelihood的公式推导</a></p><h1 id="继续学习"><a href="#继续学习" class="headerlink" title="继续学习"></a>继续学习</h1><a id="more"></a><p>因为最近需要继续学习SyntaxNet，故而继续更新这篇博客。<br>找了半天的模型代码：171 qrxia@amax:~/TensorFlow/models/syntaxnet/</p><h1 id="任务1：搞懂Google双隐含层是怎么实现的"><a href="#任务1：搞懂Google双隐含层是怎么实现的" class="headerlink" title="任务1：搞懂Google双隐含层是怎么实现的"></a>任务1：搞懂Google双隐含层是怎么实现的</h1><p>如果有pre trained的embedding，就是用pre trained的embedding，否则就是用随机初始化: 1/sqrt(embedding_size) <em>embedding_size: [64, 32, 32]</em><br>relu 的weight的初始化范围: -1e-4 ~ +1e-4, 正态分布<br>relu 的bias的初始化范围: -0.2 ~ +0.2, 正态分布<br>softmax (最后一层)的weight的初始化范围: 1e-4, 正态分布<br>softmax 的bias的初始化范围: 0!<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">relu_init=<span class="number">1e-4</span>, <span class="comment"># 初始化weight，略有不同</span></span><br><span class="line">bias_init=<span class="number">0.2</span>, <span class="comment"># 同上，bias，略有不同</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create ReLU layers.</span></span><br><span class="line"><span class="keyword">for</span> i, hidden_layer_size <span class="keyword">in</span> enumerate(self._hidden_layer_sizes):  <span class="comment"># [200, 200] @kiro</span></span><br><span class="line">weights = self._AddParam(</span><br><span class="line">[last_layer_size, hidden_layer_size],</span><br><span class="line">tf.float32,</span><br><span class="line"><span class="string">'weights_%d'</span> % i,</span><br><span class="line">self._ReluWeightInitializer(), return_average=return_average)</span><br><span class="line">bias = self._AddParam([hidden_layer_size],</span><br><span class="line">tf.float32,</span><br><span class="line"><span class="string">'bias_%d'</span> % i,</span><br><span class="line">self._relu_bias_init, return_average=return_average)</span><br><span class="line">last_layer = tf.nn.relu_layer(last_layer, weights, bias, name=<span class="string">'layer_%d'</span> % i)</span><br><span class="line">last_layer_size = hidden_layer_size</span><br></pre></td></tr></table></figure></p><h1 id="任务2：执行流程"><a href="#任务2：执行流程" class="headerlink" title="任务2：执行流程"></a>任务2：执行流程</h1><p><strong>不看train pos, train local的部分，直接看train global部分。</strong></p><p>工程执行入口： bazel-bin/syntaxnet/parser_eval（这是一个python程序，只不过没有.py后缀）</p><ol><li>从Main()函数开始执行<br> bazel-bin/syntaxnet/parser_eval.runfiles/  # 这个里面还有文件？<br> bazel-bin/syntaxnet/parser_trainer.runfiles/<strong>main</strong>/syntaxnet # parser trainer位置</li><li>function Train() # Train函数入口<br> parser = structured_graph_builder.StructuredGraphBuilder<br> _beam_size = 10<br> _max_steps = 25<br> _AddLearningRate(…) # Returns a learning rate that decays by 0.96 every decay_steps.<pre><code>decayed_learning_rate = learning_rate * decay_rate ^ (global_step / decay_steps)</code></pre> learning_rate=0.1<br> decay_steps=4000</li><li>bazel-bin/syntaxnet/parser_trainer.runfiles/__main__/syntaxnet/ops/gen_parser_ops.py (machine generated)<br> beam parse reader是c++写的，<br> <strong>beam parse reader</strong>是由C++完成的代码，但是在文件gen_parser_ops里面是py 函数的形式存在着，如何通过beam parse reader获取features，state…目前还不得而知（暂时不看C++部分）！<br> cross entropy<h1 id="任务3：相关手册？"><a href="#任务3：相关手册？" class="headerlink" title="任务3：相关手册？"></a>任务3：相关手册？</h1>_op_def_lib.apply_op(…)  # python 调用C++程序？<br>_op_def_lib =_InitOpDefLibrary() # line 468  来自于tensorflow的核心 tensorflow.core.framework import op_def_pb2<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tf.constant(value, dtype=<span class="keyword">None</span>, shape=<span class="keyword">None</span>, name=<span class="string">'Const'</span>)  <span class="comment"># Creates a constant tensor.</span></span><br><span class="line">tf.train.exponential_decay(...)  <span class="comment"># Applies exponential decay to the learning rate. global step ? @kiro</span></span><br><span class="line">tf.logical_and(x, y, name=<span class="keyword">None</span>)  <span class="comment"># Returns the truth value of x AND y element-wise.</span></span><br><span class="line">tf.reduce_any(input_tensor, ...)  <span class="comment"># Computes the "logical or" of elements across dimensions of a tensor.</span></span><br><span class="line">tf.while_loop(cond, body, loop_vars, ...) <span class="comment"># Repeat body while the condition cond is true.</span></span><br><span class="line">tf.nn.softmax_cross_entropy_with_logits(logits, labels, ...)  <span class="comment"># Computes softmax cross entropy between logits and labels.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tf</span>.<span class="title">train</span>.<span class="title">MomentumOptimizer</span>  # <span class="title">Optimizer</span> <span class="title">that</span> <span class="title">implements</span> <span class="title">the</span> <span class="title">Momentum</span> <span class="title">algorithm</span>.</span></span><br><span class="line"><span class="class"><span class="title">tf</span>.<span class="title">train</span>.<span class="title">Optimizer</span>.<span class="title">get_slot</span><span class="params">(var, name)</span>  # <span class="title">Return</span> <span class="title">a</span> <span class="title">slot</span> <span class="title">named</span> <span class="title">name</span> <span class="title">created</span> <span class="title">for</span> <span class="title">var</span> <span class="title">by</span> <span class="title">the</span> <span class="title">Optimizer</span>.</span></span><br><span class="line"><span class="class"><span class="title">tf</span>.<span class="title">reduce_sum</span><span class="params">(input_tensor, axis=None,)</span>  # <span class="title">Computes</span> <span class="title">the</span> <span class="title">sum</span> <span class="title">of</span> <span class="title">elements</span> <span class="title">across</span> <span class="title">dimensions</span> <span class="title">of</span> <span class="title">a</span> <span class="title">tensor</span>. <span class="title">Equivalent</span> <span class="title">to</span> <span class="title">np</span>.<span class="title">sum</span></span></span><br><span class="line"><span class="class"><span class="title">tf</span>.<span class="title">div</span><span class="params">(x, y, name=None)</span>  # <span class="title">Returns</span> <span class="title">x</span> / <span class="title">y</span> <span class="title">element</span>-<span class="title">wise</span>.</span></span><br><span class="line"><span class="class"><span class="title">tf</span>.<span class="title">nn</span>.<span class="title">l2_loss</span><span class="params">(t, name=None)</span>  # <span class="title">Computes</span> <span class="title">half</span> <span class="title">the</span> <span class="title">L2</span> <span class="title">norm</span> <span class="title">of</span> <span class="title">a</span> <span class="title">tensor</span> <span class="title">without</span> <span class="title">the</span> <span class="title">sqrt</span>:</span> output = sum(t ** <span class="number">2</span>) / <span class="number">2</span></span><br><span class="line">tf.add_n(inputs, name=<span class="keyword">None</span>)  <span class="comment"># Adds all input tensors element-wise.</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="要点：cross-entropy"><a href="#要点：cross-entropy" class="headerlink" title="要点：cross entropy"></a>要点：cross entropy</h1><p>1.tf.nn.softmax_cross_entropy_with_logits<br>    类似于先应用softmax, 再应用cross_entropy</p><h2 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h2><p>摘抄了一些重要的信息。</p><p>break the text into words, run the POS tagger, run the parser, and then generate an ASCII version of the parse tree.</p><ol><li>Training the SyntaxNet POS Tagger<br>We process the sentences left-to-right. For any given word, we extract features of that word and a window around it, and use these as inputs to a feed-forward neural network classifier, which predicts a probability distribution over POS tags. Because we make decisions in left-to-right order, we also use prior decisions as features in subsequent ones.<br>run the trained model over our training, tuning, and dev (evaluation) sets.</li><li>Local Pretraining</li><li>Global Training</li></ol><h1 id="模型的训练"><a href="#模型的训练" class="headerlink" title="模型的训练"></a>模型的训练</h1><p>有几点需要注意</p><blockquote><ul><li>contex文件中缺少char-map</li><li>注释需要去掉，否则shell脚本不可执行</li><li>POS tags 需要使用到CONLL格式的第4列</li></ul></blockquote><p>使用的数据：</p><blockquote><ul><li>traing-corpus: /home/qrxia/data/ptb-data-wsj/wsj_02_21.train.conll07</li><li>tuning-corpus: /home/qrxia/data/ptb-data-wsj/wsj_24.dev.conll07</li><li>dev-corpus: /home/qrxia/data/ptb-data-wsj/wsj_22.dev.conll07cp3to4.conll</li></ul></blockquote><p>查看GPU的使用情况，每10s刷新一次显示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;watch -n 10 nvidia-smi</span><br></pre></td></tr></table></figure></p><p>按照github上面的tutorial，使用SyntaxNet训练一个句法分析模型需要以下三步：</p><h3 id="1-训练一个POStagger"><a href="#1-训练一个POStagger" class="headerlink" title="1.训练一个POStagger"></a>1.训练一个POStagger</h3><p>按照tutorial的指引，非常方便就可以训练一个POStagger，其中，对以上三个进行evaluation：</p><table><thead><tr><th><strong>training</strong></th><th><strong>tuning</strong></th><th><strong>dev</strong></th></tr></thead><tbody><tr><td>98.25%</td><td>96.84</td><td>96.74%</td></tr></tbody></table><h3 id="2-训练一个local模型，用来pre-training"><a href="#2-训练一个local模型，用来pre-training" class="headerlink" title="2.训练一个local模型，用来pre-training"></a>2.训练一个local模型，用来pre-training</h3><p>eval metric如下:</p><table><thead><tr><th><strong>training</strong></th><th><strong>tuning</strong></th><th><strong>dev</strong></th></tr></thead><tbody><tr><td>95.32%</td><td>90.01%</td><td>91.54%</td></tr></tbody></table><h3 id="3-训练一个global模型"><a href="#3-训练一个global模型" class="headerlink" title="3.训练一个global模型"></a>3.训练一个global模型</h3><p>eval metric如下：</p><table><thead><tr><th><strong>training</strong></th><th><strong>tuning</strong></th><th><strong>dev</strong></th></tr></thead><tbody><tr><td>95.44%</td><td>91.03%</td><td>92.67%</td></tr></tbody></table><h1 id="代码阅读："><a href="#代码阅读：" class="headerlink" title="代码阅读："></a>代码阅读：</h1><p>初步看，SyntaxNet的主要代码集中在models/syntaxnet/syntaxnet。<br><em>BUILD</em>: 应该是指定bazel的如何编译文件<br>ps: 在阅读代码的过程中，会记录一些tensorflow的语法：）</p><h3 id="parser-trainer-py"><a href="#parser-trainer-py" class="headerlink" title="parser_trainer.py"></a>parser_trainer.py</h3><p>主要交代了：命令行参数及其一些默认的configuration<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tf.app.flags <span class="comment">#argparser, which implements a subset of the functionality in python-gflags</span></span><br><span class="line">tf.app.run() <span class="comment">#It's just a very quick wrapper that handles flag parsing and then dispatches to your own main</span></span><br><span class="line">os.path.join(<span class="string">'/home/aa'</span>,<span class="string">'/home/aa/bb'</span>,<span class="string">'/home/aa/bb/c'</span>) <span class="comment">#返回组合路劲</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'/home/aa/bb/c'</span></span><br></pre></td></tr></table></figure></p><p>main()：<br>1.compute lexicon (default: false) and load lexicon use “FeatureSize”<br>    projectivize_training_set (default: false)<br>2.Train</p><h3 id="lexicon-builder-cc"><a href="#lexicon-builder-cc" class="headerlink" title="lexicon_builder.cc"></a>lexicon_builder.cc</h3><p>包含的几个类： <strong>LexiconBuilder FeatureSize</strong><br>需要提取的几个TermFrequencyMap: <strong>words lcwords tags categories labels chars</strong><br>其他的几个需要提取的: <strong>prefixes suffixes tag_to_category</strong></p><h3 id="embedding-feature-extractor"><a href="#embedding-feature-extractor" class="headerlink" title="embedding_feature_extractor.*"></a>embedding_feature_extractor.*</h3><p>Class: ParserEmbeddingFeatureExtractor<br>提取特征相关的文件</p><h3 id="feature-extractor"><a href="#feature-extractor" class="headerlink" title="feature_extractor.*"></a>feature_extractor.*</h3><p>Generic feature extractor for extracting features from objects.</p><h3 id="term-frequency-map"><a href="#term-frequency-map" class="headerlink" title="term_frequency_map.*"></a>term_frequency_map.*</h3><p>A mapping from strings to frequencies with save and load functionality.<br>Class: TermFrequencyMap, TagToCategoryMap<br>TagToCategoryMap: 从输出文件上来看，tag和category是一一对应的？</p><h3 id="parser-transitions"><a href="#parser-transitions" class="headerlink" title="parser_transitions.*"></a>parser_transitions.*</h3><p><strong>Nothing</strong>?</p><h3 id="sentence-proto"><a href="#sentence-proto" class="headerlink" title="sentence.proto"></a>sentence.proto</h3><p>一个Sentence由docid, text, token组成，最大长度1000<br>token: word, start, end, head, tag, category, label</p><h3 id="proto-io-h"><a href="#proto-io-h" class="headerlink" title="proto_io.h"></a>proto_io.h</h3><p>Class: TextReader()</p><h3 id="document-format"><a href="#document-format" class="headerlink" title="document_format.*"></a>document_format.*</h3><p>Class: DocumentFormat –A document format component converts a key/value pair from a record to one or more documents<br>key/value pair? <strong>Nothing</strong>?</p><h3 id="graph-builder-py"><a href="#graph-builder-py" class="headerlink" title="graph_builder.py"></a>graph_builder.py</h3><p>Builds parser models.<br>Class: GreedyParser</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">tf.name_scope()  <span class="comment">#sharing variables</span></span><br><span class="line">tf.concat(concat_dim, values, name=<span class="string">'concat'</span>)  <span class="comment">#Concatenates tensors along one dimension.</span></span><br><span class="line">&gt;&gt;&gt; a = [1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a = tf.reshape(a, [-1, 5])</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&lt;tf.Tensor <span class="string">'Reshape:0'</span> shape=(1, 5) dtype=int32&gt;</span><br><span class="line">&gt;&gt;&gt; sess = tf.Session()</span><br><span class="line">&gt;&gt;&gt; init = tf.initialize_all_variables()</span><br><span class="line">&gt;&gt;&gt; sess.run(init)</span><br><span class="line">&gt;&gt;&gt; sess.run(a)</span><br><span class="line">array([[1, 2, 3, 4, 5]], dtype=int32)</span><br><span class="line">&gt;&gt;&gt; b = [3,4,5,6,7]</span><br><span class="line">&gt;&gt;&gt; b = tf.reshape(b, [-1, 5])</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;tf.Tensor <span class="string">'Reshape_1:0'</span> shape=(1, 5) dtype=int32&gt;</span><br><span class="line">&gt;&gt;&gt; c = [a, b]</span><br><span class="line">&gt;&gt;&gt; sess.run(c)</span><br><span class="line">[array([[1, 2, 3, 4, 5]], dtype=int32), array([[3, 4, 5, 6, 7]], dtype=int32)]</span><br><span class="line">&gt;&gt;&gt; d = tf.concat(1, c)</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&lt;tf.Tensor <span class="string">'concat_1:0'</span> shape=(1, 10) dtype=int32&gt;</span><br><span class="line">&gt;&gt;&gt; sess.run(d)</span><br><span class="line">array([[1, 2, 3, 4, 5, 3, 4, 5, 6, 7]], dtype=int32)</span><br><span class="line">enumerate(sequence, start=0) <span class="comment">#</span></span><br><span class="line">&gt;&gt;&gt; seasons = [<span class="string">'Spring'</span>, <span class="string">'Summer'</span>, <span class="string">'Fall'</span>, <span class="string">'Winter'</span>]</span><br><span class="line">&gt;&gt;&gt; list(enumerate(seasons))</span><br><span class="line">[(0, <span class="string">'Spring'</span>), (1, <span class="string">'Summer'</span>), (2, <span class="string">'Fall'</span>), (3, <span class="string">'Winter'</span>)]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">dict.update(dict2)  <span class="comment"># The method update() adds dictionary dict2's key-values pairs in to dict. Python</span></span><br><span class="line">tf.identity <span class="comment"># Return a tensor with the same shape and contents as the input tensor or value. is useful when you want to explicitly transport tensor between devices (like, from GPU to a CPU). The op adds send/recv nodes to the graph, which make a copy when the devices of the input and the output are different.</span></span><br><span class="line">tf.random_normal_initializer(mean=<span class="number">0.0</span>, stddev=<span class="number">1.0</span>, seed=<span class="keyword">None</span>, dtype=tf.float32)  <span class="comment"># Returns an initializer that generates tensors with a normal distribution.</span></span><br><span class="line">tf.ones(shape, dtype=tf.float32, name=<span class="keyword">None</span>)  <span class="comment"># Creates a tensor with all elements set to 1.</span></span><br><span class="line">tf.get_variable(...)  <span class="comment"># Gets an existing variable with these parameters or create a new one.</span></span><br><span class="line">tf.cast(x, dtype, name=<span class="keyword">None</span>)  <span class="comment"># Casts a tensor to a new type.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tf</span>.<span class="title">train</span>.<span class="title">ExponentialMovingAverage</span>  # <span class="title">Maintains</span> <span class="title">moving</span> <span class="title">averages</span> <span class="title">of</span> <span class="title">variables</span> <span class="title">by</span> <span class="title">employing</span> <span class="title">an</span> <span class="title">exponential</span> <span class="title">decay</span>.</span></span><br><span class="line"><span class="class"><span class="title">tf</span>.<span class="title">convert_to_tensor</span><span class="params">(value, dtype=None, name=None, as_ref=False)</span>  # <span class="title">Converts</span> <span class="title">the</span> <span class="title">given</span> <span class="title">value</span> <span class="title">to</span> <span class="title">a</span> <span class="title">Tensor</span>.</span></span><br><span class="line"><span class="class"><span class="title">tf</span>.<span class="title">nn</span>.<span class="title">embedding_lookup</span><span class="params">(params, ids, partition_strategy=<span class="string">'mod'</span>, name=None, validate_indices=True)</span>  # <span class="title">Looks</span> <span class="title">up</span> <span class="title">ids</span> <span class="title">in</span> <span class="title">a</span> <span class="title">list</span> <span class="title">of</span> <span class="title">embedding</span> <span class="title">tensors</span>. 如果<span class="title">id</span>查抄不到，会报错<span class="title">indices</span>.</span></span><br><span class="line"><span class="class"><span class="title">tf</span>.<span class="title">unsorted_segment_sum</span><span class="params">(data, segment_ids, num_segments, name=None)</span>  # <span class="title">Computes</span> <span class="title">the</span> <span class="title">sum</span> <span class="title">along</span> <span class="title">segments</span> <span class="title">of</span> <span class="title">a</span> <span class="title">tensor</span>.</span></span><br><span class="line"><span class="class"><span class="title">tf</span>.<span class="title">train</span>.<span class="title">Optimizer</span>.<span class="title">get_slot</span><span class="params">(var, name)</span>  # <span class="title">Return</span> <span class="title">a</span> <span class="title">slot</span> <span class="title">named</span> <span class="title">name</span> <span class="title">created</span> <span class="title">for</span> <span class="title">var</span> <span class="title">by</span> <span class="title">the</span> <span class="title">Optimizer</span>.</span></span><br><span class="line"><span class="class"><span class="title">tf</span>.<span class="title">group</span><span class="params">(*inputs, **kwargs)</span>  # <span class="title">Create</span> <span class="title">an</span> <span class="title">op</span> <span class="title">that</span> <span class="title">groups</span> <span class="title">multiple</span> <span class="title">operations</span>.</span></span><br><span class="line"><span class="class"><span class="title">tf</span>.<span class="title">check_numerics</span><span class="params">(tensor, message, name=None)</span>  # <span class="title">Checks</span> <span class="title">a</span> <span class="title">tensor</span> <span class="title">for</span> <span class="title">NaN</span> <span class="title">and</span> <span class="title">Inf</span> <span class="title">values</span>.</span></span><br><span class="line"><span class="class"><span class="title">tf</span>.<span class="title">size</span><span class="params">(input, name=None)</span>  # <span class="title">Returns</span> <span class="title">the</span> <span class="title">size</span> <span class="title">of</span> <span class="title">a</span> <span class="title">tensor</span>.</span></span><br><span class="line"><span class="class"><span class="title">tf</span>.<span class="title">greater</span><span class="params">(x, y, name=None)</span>  # <span class="title">Returns</span> <span class="title">the</span> <span class="title">truth</span> <span class="title">value</span> <span class="title">of</span> <span class="params">(x &gt; y)</span> <span class="title">element</span>-<span class="title">wise</span>.</span></span><br><span class="line"><span class="class"><span class="title">tf</span>.<span class="title">cond</span><span class="params">(pred, fn1, fn2, name=None)</span>  # <span class="title">Return</span> <span class="title">either</span> <span class="title">fn1</span><span class="params">()</span> <span class="title">or</span> <span class="title">fn2</span><span class="params">()</span> <span class="title">based</span> <span class="title">on</span> <span class="title">the</span> <span class="title">boolean</span> <span class="title">predicate</span> <span class="title">pred</span>.</span></span><br></pre></td></tr></table></figure><p>feature_endpoints是一连串这样子的数组。其中，local, feature_endpoints shape=(?,) dtype=int32<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[&apos;\x08\x8a\x06&apos; &apos;\x08\x8f\x01&apos; &apos;\x08\xf7\r&apos; &apos;\x08\xe0\x11&apos;</span><br><span class="line">   &apos;\x08\xe1\xb3\x02&apos; &apos;\x08\xe0\xb3\x02&apos; &apos;\x08\xe0\xb3\x02&apos;</span><br><span class="line">   &apos;\x08\xe0\xb3\x02&apos; &apos;\x08\x02&apos; &apos;\x08\xf8\x03&apos; &apos;\x08\xe0\xb3\x02&apos;</span><br><span class="line">   &apos;\x08\xe0\xb3\x02&apos; &apos;\x08\xe0\xb3\x02&apos; &apos;\x08\xe0\xb3\x02&apos;</span><br><span class="line">   &apos;\x08\xe0\xb3\x02&apos; &apos;\x08\xe0\xb3\x02&apos; &apos;\x08\xe0\xb3\x02&apos;</span><br><span class="line">   &apos;\x08\xe0\xb3\x02&apos; &apos;\x08\xe0\xb3\x02&apos; &apos;\x08\xe0\xb3\x02&apos;]</span><br></pre></td></tr></table></figure></p><p><a href="https://www.tensorflow.org/versions/r0.10/api_docs/python/math_ops.html#unsorted_segment_sum" target="_blank" rel="noopener">unsorted_segment_sum</a></p><p>Interesting: syntaxnet/bazel-syntaxnet/bazel-out/local-opt/genfiles/syntaxnet/ops/gen_parser_ops.py</p><h3 id="reader-ops-cc"><a href="#reader-ops-cc" class="headerlink" title="reader_ops.cc"></a>reader_ops.cc</h3><p>Class: GoldParseReader<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OP_REQUIRES_OK  <span class="comment">#如果想要测试一个函数返回的 Status 对象是否是一个错误, 可以使用 OP_REQUIRES_OK. 这些宏如果检测到错误, 会直接跳出函数, 终止函数执行.</span></span><br></pre></td></tr></table></figure></p><h3 id="sentence-batch"><a href="#sentence-batch" class="headerlink" title="sentence_batch.*"></a>sentence_batch.*</h3><p>Helper class to manage generating batches of preprocessed ParserState objects by reading in multiple sentences in parallel.</p><h3 id="parser-state"><a href="#parser-state" class="headerlink" title="parser_state.*"></a>parser_state.*</h3><p>Parser state for the transition-based dependency parser.</p><h3 id="affix"><a href="#affix" class="headerlink" title="affix.*"></a>affix.*</h3><p>Class: Affix, AffixTable<br>affix: 词缀</p><h3 id="text-formats-cc"><a href="#text-formats-cc" class="headerlink" title="text_formats.cc"></a>text_formats.cc</h3><p>CONLL格式文件的定义</p><h3 id="structured-graph-builder-py"><a href="#structured-graph-builder-py" class="headerlink" title="structured_graph_builder.py"></a>structured_graph_builder.py</h3><p>Build structured parser models.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tf.NoGradient(op_type)  <span class="comment"># Specifies that ops of type op_type do not have a defined gradient.</span></span><br><span class="line">tf.while_loop(cond, body, loop_vars, parallel_iterations=<span class="number">10</span>, back_prop=<span class="keyword">True</span>, swap_memory=<span class="keyword">False</span>, name=<span class="keyword">None</span>) <span class="comment"># Repeat body while the condition cond is true.</span></span><br></pre></td></tr></table></figure><h3 id="parser-state-1"><a href="#parser-state-1" class="headerlink" title="parser_state.*"></a>parser_state.*</h3><p>Parser state for the transition-based dependency parser.</p><h3 id="parser-transitions-1"><a href="#parser-transitions-1" class="headerlink" title="parser_transitions.*"></a>parser_transitions.*</h3><p>Transition system for the transition-based dependency parser.</p><h1 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h1><h3 id="Q1-为什么train-pos的时候，num-actions-45-而不是12？"><a href="#Q1-为什么train-pos的时候，num-actions-45-而不是12？" class="headerlink" title="Q1: 为什么train  pos的时候，num_actions=45,而不是12？"></a>Q1: 为什么train  pos的时候，num_actions=45,而不是12？</h3><p>因为在FeatureSize的代码中，有很明显的一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num_actions-&gt;scalar&lt;int32&gt;()() = transition_system-&gt;NumActions(label_map_-&gt;Size())</span><br></pre></td></tr></table></figure></p><h3 id="unpack-sparse-features-cc"><a href="#unpack-sparse-features-cc" class="headerlink" title="unpack_sparse_features.cc"></a>unpack_sparse_features.cc</h3><p>Operator to unpack ids and weights stored in SparseFeatures proto.</p><h3 id="Q2-重大发现"><a href="#Q2-重大发现" class="headerlink" title="Q2: 重大发现"></a>Q2: 重大发现</h3><p>以前不知道的一些h文件，通过egrep发现，在 bazel-genfiles/syntaxnet/ 文件夹下面</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;因为最近的工作需要使用到SyntaxNet，所以新建一篇博客，记录相关的学习过程。：）&lt;br&gt;&lt;a href=&quot;https://github.com/tensorflow/models/tree/master/syntaxnet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/documents/MaxLogLikelihood/main.pdf&quot;&gt;MaxLogLikelihood的公式推导&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;继续学习&quot;&gt;&lt;a href=&quot;#继续学习&quot; class=&quot;headerlink&quot; title=&quot;继续学习&quot;&gt;&lt;/a&gt;继续学习&lt;/h1&gt;
    
    </summary>
    
    
      <category term="syntaxnet" scheme="http://yoursite.com/tags/syntaxnet/"/>
    
  </entry>
  
</feed>
