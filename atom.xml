<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kiro&#39;s Blog</title>
  
  <subtitle>请叫我星魂大人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-18T13:08:34.595Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kiro Summer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SRL-papers</title>
    <link href="http://yoursite.com/2019/11/19/SRL-papers/"/>
    <id>http://yoursite.com/2019/11/19/SRL-papers/</id>
    <published>2019-11-19T11:00:33.000Z</published>
    <updated>2019-11-18T13:08:34.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>新开一篇博客，记录在阅读AMR论文的时候的一些收获。<br><a id="more"></a></p><h2 id="Syntax-aware-Multilingual-Semantic-Role-Labeling"><a href="#Syntax-aware-Multilingual-Semantic-Role-Labeling" class="headerlink" title="Syntax-aware Multilingual Semantic Role Labeling"></a>Syntax-aware Multilingual Semantic Role Labeling</h2><p>本片论文做的是多语言的 SRL，语料来自于 (CoNLL-2009)。本文的基础模型是 BiLSTM+Biaffine Scorer，利用了官方提供的句法，在此基础上提出了一种新的 argument pruning方式，主要思想类似于 TPF，也是给每个位置抽取一个 tuple，然后根据 tuple的频率进行修剪，取得了 SOTA的结果。</p><h2 id="A-Progressive-Learning-Approach-to-Chinese-SRL-Using-Heterogeneous-Data"><a href="#A-Progressive-Learning-Approach-to-Chinese-SRL-Using-Heterogeneous-Data" class="headerlink" title="A Progressive Learning Approach to Chinese SRL Using Heterogeneous Data"></a>A Progressive Learning Approach to Chinese SRL Using Heterogeneous Data</h2><p>该篇论文主要利用 PNN+Gated Recurrent Adapter构建了一个可以利用异构数据的 SRL分析器。另外，还发布了一个数据 CSB。但是，和我的目标（尝试了解 SRL）并不一致。<br>本文几个重点：</p><ol><li>CSB的构建与其他 SRL语料的区别</li><li>PNN + Gated Recurrent Adapter</li></ol><h2 id="Deep-Semantic-Role-Labeling-What-Works-and-What’t-Next"><a href="#Deep-Semantic-Role-Labeling-What-Works-and-What’t-Next" class="headerlink" title="Deep Semantic Role Labeling: What Works and What’t Next"></a>Deep Semantic Role Labeling: What Works and What’t Next</h2><p>本论文使用了一个 deep <strong>highway</strong> BiLSTM的架构来处理 SRL （highway之前没有见过），并且利用了这几年的一些优秀的做法来处理初始化和正则化。本文的几个重点：</p><ol><li>新提出了一个深层神经网络来处理 SRL</li><li>详细分析了结构化的一致性和长距离的依赖问题</li><li>详述了句法在 SRL上的应用</li></ol><p>本文提到的几个对我目前工作有用的几个点：</p><ol><li>初始化十分重要：正交初始化？（这个点在论文中表现得很重要）</li><li>句法的信息十分重要+Biaffine</li><li>有约束的Decoding？</li><li>gated highway connections?</li><li>BIO VS BIESO?</li><li>Dropout: 0.1?</li></ol><h2 id="Linguisticaly-Informed-Self-Attention-for-Semantic-Role-Labeling"><a href="#Linguisticaly-Informed-Self-Attention-for-Semantic-Role-Labeling" class="headerlink" title="Linguisticaly-Informed Self-Attention for Semantic Role Labeling"></a>Linguisticaly-Informed Self-Attention for Semantic Role Labeling</h2><p>本文利用 self-attention做了一个 multi-task learning：词性、句法、谓词预测以及语义角色标注。旨在利用语言学的信息来进行端到端的语义角色标注。<br>模型的优化目标是：最大化各个子任务的 likelihood的 sum<br>本篇论文相对比与 He的工作，在使用 predicted predicates的情况下，效果有提高。</p><h2 id="Jointly-Predicting-Predicates-and-Arguments-in-Neural-Semantic-Role-Labeling"><a href="#Jointly-Predicting-Predicates-and-Arguments-in-Neural-Semantic-Role-Labeling" class="headerlink" title="Jointly Predicting Predicates and Arguments in Neural Semantic Role Labeling"></a>Jointly Predicting Predicates and Arguments in Neural Semantic Role Labeling</h2><p>最近的一些基于 BIO-tagging的神经网络模型，都是假设给定了 gold predicate进行的 argument的预测，而且还不能够利用 span-level的特征。<br>本篇论文提出了一个 end-to-end的模型用来同时预测 predicates和 arguments，实验结果表明，本篇论文达到了目前不使用 gold predicate的最好的结果。<br>纵观整个论文，论文的模型架构来自于指代消除这个任务。值得注意的是，这个指代消除的工作同样是 He的工作。</p><h2 id="Syntax-for-Semantic-Role-Labeling-To-Be-Or-Not-to-Be"><a href="#Syntax-for-Semantic-Role-Labeling-To-Be-Or-Not-to-Be" class="headerlink" title="Syntax for Semantic Role Labeling, To Be, Or Not to Be"></a>Syntax for Semantic Role Labeling, To Be, Or Not to Be</h2><p>这篇论文提出了一个使用扩展的 k-order argument pruning 加强 argument labeling的模型，并且取得了 state-of-the-art的结果。<br>本文的 SRL模型很普通，唯一比较特殊的就是 MLP的层数多了一点。<br>而且，本文利用了一个 argument pruning的策略来有效的利用句法信息，但是比较不好是，本文并没有明确指出该方法是用在了模型的哪一个地方，直接引用了以前的论文，让读者感觉知其所以然，不知其所以然。<br>这篇文章的模型唯一用到句法信息的地方就是在输入层里面加入了 dependency label的信息。<br>这篇文章的 argument pruning从论文里面看是在 preprocessing里面进行应用的，难道是在 dependency label上表现出来的？不是在 Decoder部分进行 constrained decoding？</p><h2 id="Encoding-Sentences-with-Graph-Convolutional-Networks-for-Semantic-Role-Labeling"><a href="#Encoding-Sentences-with-Graph-Convolutional-Networks-for-Semantic-Role-Labeling" class="headerlink" title="Encoding Sentences with Graph Convolutional Networks for Semantic Role Labeling"></a>Encoding Sentences with Graph Convolutional Networks for Semantic Role Labeling</h2><p>本文提出了 graph convolutional networks (GCN)，用在基于图的神经网络。<br>本文将 GCN和 LSTM进行了 stack操作，然后得到了 state-of-the-art的结果。总的来说，对于一个图中的每一个节点来说，GCN用来 encode这个节点相关联的一些节点的信息。(本文的贡献有点好玩)</p><h2 id="A-Full-End-to-End-Semantic-Role-Labeler-Syntax-agnostic-Over-Syntax-aware"><a href="#A-Full-End-to-End-Semantic-Role-Labeler-Syntax-agnostic-Over-Syntax-aware" class="headerlink" title="A Full End-to-End Semantic Role Labeler, Syntax-agnostic Over Syntax-aware?"></a>A Full End-to-End Semantic Role Labeler, Syntax-agnostic Over Syntax-aware?</h2><p>本文提出了一个端到端的统一处理谓词消岐和论元标注的模型。<br>本文的模型还是比较简单的，采用了 3层 BiLSTM + Biaffine Scorer的模型架构来处理这个任务。本文的一个亮点就是对 Biaffine Scorer进行了加强，加入了 bias term。同时，类似于 Biaffine Parser，本文对 predicate和 argument也利用两个不同的 W进行了非线性编码。<br>本文在 CoNLL-2008和 CoNLL-2009的数据集上都取得了目前最高的结果。</p><h2 id="Syntactic-Scaffolds-for-Semantic-Structures"><a href="#Syntactic-Scaffolds-for-Semantic-Structures" class="headerlink" title="Syntactic Scaffolds for Semantic Structures"></a>Syntactic Scaffolds for Semantic Structures</h2><p>本篇论文提出了一个利用 multi-task learning的方法利用短语结构句法树 (在 PropBank SRL实验上利用的是 OntoNotes 5.0，和 CoNLL-2012 SRL数据是完整重叠的。CoNLL-2012 SRL就是 OntoNotes 5.0)进行语义任务的处理，称之为句法“梯子”。<br>模型主要通过将句法端的 span作为模型句法部分的训练目标；同时，在进行语义预测的时候，利用强化的 span表示进行 argument的预测：1）BiLSTM产生的上下文相关的表示；2）attention机制产生的 span summary；3）span的特征。</p><h2 id="An-Empirical-Study-of-Building-a-Strong-Baseline-for-Constituency-Parsing"><a href="#An-Empirical-Study-of-Building-a-Strong-Baseline-for-Constituency-Parsing" class="headerlink" title="An Empirical Study of Building a Strong Baseline for Constituency Parsing"></a>An Empirical Study of Building a Strong Baseline for Constituency Parsing</h2><p>在这边插播一个短语结构树句法的工作，本篇文章是 EMNLP2018年的一篇short。本文利用最近在 NLG领域一些比较新颖的技术来提升基于 sequence-to-sequence的 constitutency parsering。并且取得了比较好的结果。利用了一些技术，比如 subword（BPE），unknown token embedding as a bias, multi-task learning, output length controlling, pre-trained word embedding, model ensemble and LM reranking. 本文的实验结果还是比较详细的，能够从实验结果中看出每一个 technic带来的效益是多少。</p><h2 id="Multi-Task-Identification-of-Entities-Relations-and-Coreference-for-Scientific-Knowledge-Graph-Construction"><a href="#Multi-Task-Identification-of-Entities-Relations-and-Coreference-for-Scientific-Knowledge-Graph-Construction" class="headerlink" title="Multi-Task Identification of Entities, Relations, and Coreference for Scientific Knowledge Graph Construction"></a>Multi-Task Identification of Entities, Relations, and Coreference for Scientific Knowledge Graph Construction</h2><p>这篇文章是 18年 EMNLP的一篇文章，是华盛顿大学的一篇文章。本文利用了之前他们组的积累，span-based model来处理科学知识图谱的构建。将三个任务做一个multi-task learning，实体的识别，实体之间关系的识别，以及指代消歧。除了这个 multi-task learning的模块之外，本文还发布了一个数据集，并且在此基础上构建了科学知识图谱。</p><h2 id="Deep-MultiTask-Learning-for-Semantic-Dependency-Parsing"><a href="#Deep-MultiTask-Learning-for-Semantic-Dependency-Parsing" class="headerlink" title="Deep MultiTask Learning for Semantic Dependency Parsing"></a>Deep MultiTask Learning for Semantic Dependency Parsing</h2><p>本篇文章是 2017 ACL的一篇长文。文章的主要工作是提出了一个基于深度神经网络的框架来讲一个句子分析称3种语义依存图。本文的主要贡献有两个，1）提出了一个比较好的 baseline. 2）探究了两种应用于 multitask learning的方法：parameter sharing and higher-order structure scores.</p><h2 id="Graph-Convolutional-Networks-for-Text-Classification"><a href="#Graph-Convolutional-Networks-for-Text-Classification" class="headerlink" title="Graph Convolutional Networks for Text Classification"></a>Graph Convolutional Networks for Text Classification</h2><p>本文是 AAAI2019的一篇工作，本文利用 GCN来处理文本分类，本文的主要贡献在于利用 GCN，将数据集的所有的 word以及 document是作为 node，然后通过建立邻接矩阵A，利用了两层 GCN来达到分类的目的。</p><h2 id="Syntax-aware-Neural-Semantic-Role-Labeling-with-Supertags"><a href="#Syntax-aware-Neural-Semantic-Role-Labeling-with-Supertags" class="headerlink" title="Syntax-aware Neural Semantic Role Labeling with Supertags"></a>Syntax-aware Neural Semantic Role Labeling with Supertags</h2><p>本文是 NAACL-2019的一篇短文。本文利用了前人提出的 Supertags，作为一种 external embeddings输入到 SRL模型中。本文的贡献在于提出了一个 TAG supertags，略微区别于前人提出的一些 supertags，略有提升效果。在 ELMo的加持下，略有提升（没有 significant test）。</p><h2 id="Towards-Semi-Supervised-Learning-for-Deep-Semantic-Role-Labeling"><a href="#Towards-Semi-Supervised-Learning-for-Deep-Semantic-Role-Labeling" class="headerlink" title="Towards Semi-Supervised Learning for Deep Semantic Role Labeling"></a>Towards Semi-Supervised Learning for Deep Semantic Role Labeling</h2><p>文本是 EMNLP-2018年的一篇短文。本文提出，在训练基于神经网络的模型的时候加入句法结构能够获得鲁棒的性能，特别是对于低资源的情况。本文的贡献在于：1）在训练模型的时候将句法树作为硬约束，2）半监督的模型。大部分前人的工作都是在 decoder部分引入 constraints，本文则在 training部分引入 constraints。</p><h2 id="Constituency-Parsing-with-a-Self-Attentive-Encoder"><a href="#Constituency-Parsing-with-a-Self-Attentive-Encoder" class="headerlink" title="Constituency Parsing with a Self-Attentive Encoder"></a>Constituency Parsing with a Self-Attentive Encoder</h2><p>插播一个 短语结构树的 论文，这个论文利用了 self-attention as the encoder，本文主要记录主要的 self-attention部分的见解</p><ol><li>hamming loss </li><li>only + 0.45% compared with the BiLSTM encoder</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;新开一篇博客，记录在阅读AMR论文的时候的一些收获。&lt;br&gt;
    
    </summary>
    
    
      <category term="SRL" scheme="http://yoursite.com/tags/SRL/"/>
    
  </entry>
  
  <entry>
    <title>Chinese-SRL</title>
    <link href="http://yoursite.com/2019/11/09/Chinese-SRL/"/>
    <id>http://yoursite.com/2019/11/09/Chinese-SRL/</id>
    <published>2019-11-09T05:23:53.000Z</published>
    <updated>2019-11-22T02:01:46.330Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="SRL" scheme="http://yoursite.com/tags/SRL/"/>
    
  </entry>
  
  <entry>
    <title>一些注意事项</title>
    <link href="http://yoursite.com/2019/09/16/%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://yoursite.com/2019/09/16/一些注意事项/</id>
    <published>2019-09-16T01:30:19.000Z</published>
    <updated>2019-09-16T07:27:28.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本篇博客记录一些写论文（会议、期刊）的注意事项<br><a id="more"></a></p><h2 id="会议论文改投期刊"><a href="#会议论文改投期刊" class="headerlink" title="会议论文改投期刊"></a>会议论文改投期刊</h2><p>会议论文：强调分享和交流新的观点<br>期刊论文：更加注重分析和论证这种观点的合理性；在期刊论文的引言末尾指明该研究内容的会议论文已经发表，但是你在该期刊论文的版本中又加入了什么？（增加至少1/3的内容）</p><ul><li>TACL：需要9个月之后再接受会议论文（rejected or reviewed 需要等待9个月？那 received的呢？包含在 reviewed里面吗？）；</li><li>PAMI: (Pattern Analysis and Machine Intelligence) 模式识别和机器学习领域最重要的学术期刊之一。</li><li>TKDE：Transactions on Knowledge and Data Engineering</li></ul><p>PAMI和 TKDE是否适合语义，目前没有发现？</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;本篇博客记录一些写论文（会议、期刊）的注意事项&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>papers</title>
    <link href="http://yoursite.com/2019/08/23/papers/"/>
    <id>http://yoursite.com/2019/08/23/papers/</id>
    <published>2019-08-23T01:13:00.000Z</published>
    <updated>2019-09-10T13:15:36.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这个博客用来记录一些看过的论文<br><a id="more"></a></p><h2 id="Learning-Joint-Semantic-Parsers-from-Disjoint-Data"><a href="#Learning-Joint-Semantic-Parsers-from-Disjoint-Data" class="headerlink" title="Learning Joint Semantic Parsers from Disjoint Data"></a>Learning Joint Semantic Parsers from Disjoint Data</h2><p>NAACL-2018年的工作，Hao Peng华盛顿大学。<br>处理的任务：frame-semantic parsing and semantic dependency parsing</p><h2 id="Frustratingly-Easy-Neural-Domain-Adaptation"><a href="#Frustratingly-Easy-Neural-Domain-Adaptation" class="headerlink" title="Frustratingly Easy Neural Domain Adaptation"></a>Frustratingly Easy Neural Domain Adaptation</h2><p>主要任务：slot tagging, domain adaptation<br>Extension of feature argumentation</p><h2 id="Exploiting-Mutual-Benefits-between-Syntax-and-Semantic-Roles-using-Neural-Network"><a href="#Exploiting-Mutual-Benefits-between-Syntax-and-Semantic-Roles-using-Neural-Network" class="headerlink" title="Exploiting Mutual Benefits between Syntax and Semantic Roles using Neural Network"></a>Exploiting Mutual Benefits between Syntax and Semantic Roles using Neural Network</h2><p>本文是 EMNLP-2016的一个短文，这篇文章探究了 mutual benefits between syntax and semantics<br>利用了 dependency parser和 semantic role labeler,设计了 dependency parser-&gt; SRL 和 SRL-&gt; dependency parser两种 pipeline的利用方式，主要就是利用 句法的输出和 SRL的输出；同时 share embeddings, 设计了一个 joint model。<br>他们的实验表明：这种互相之间的帮助都是有意义的</p><h2 id="Instructions-for-EMNLP-IJCNLP-2019-Proceedings"><a href="#Instructions-for-EMNLP-IJCNLP-2019-Proceedings" class="headerlink" title="Instructions for EMNLP-IJCNLP 2019 Proceedings"></a>Instructions for EMNLP-IJCNLP 2019 Proceedings</h2><p>记录一下 EMNLP-2019的 camera ready的注意事项</p><ol><li>初次提交：页码；camera ready：不需要页码</li><li>作者不可变动</li><li>使用 pdflatex编译</li><li>abstract 不超过 200 words</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;这个博客用来记录一些看过的论文&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Abstract-meaning-representations</title>
    <link href="http://yoursite.com/2019/06/27/Abstract-meaning-representations/"/>
    <id>http://yoursite.com/2019/06/27/Abstract-meaning-representations/</id>
    <published>2019-06-27T07:18:05.000Z</published>
    <updated>2019-07-14T03:42:25.834Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="AMR" scheme="http://yoursite.com/tags/AMR/"/>
    
  </entry>
  
  <entry>
    <title>End-to-End-SRL</title>
    <link href="http://yoursite.com/2019/05/30/End-to-End-SRL/"/>
    <id>http://yoursite.com/2019/05/30/End-to-End-SRL/</id>
    <published>2019-05-30T10:00:25.000Z</published>
    <updated>2019-08-10T10:12:40.158Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="SRL" scheme="http://yoursite.com/tags/SRL/"/>
    
  </entry>
  
  <entry>
    <title>Meta-Learning</title>
    <link href="http://yoursite.com/2019/01/21/Meta-Learning/"/>
    <id>http://yoursite.com/2019/01/21/Meta-Learning/</id>
    <published>2019-01-21T13:54:02.000Z</published>
    <updated>2019-01-22T07:35:24.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>This post is about my study on meta-learning and some related papers.<br><a id="more"></a></p><h1 id="Papers"><a href="#Papers" class="headerlink" title="Papers"></a>Papers</h1><h3 id="Natural-Language-to-Structured-Query-Generation-via-Meta-Learning"><a href="#Natural-Language-to-Structured-Query-Generation-via-Meta-Learning" class="headerlink" title="Natural Language to Structured Query Generation via Meta-Learning"></a>Natural Language to Structured Query Generation via Meta-Learning</h3><p>NAACL-2018的一篇短文。本文利用 domain-dependent relevance function将初始的学习问题转换为 few-shot meta-learning问题，将每一个 example视为一个 pseude-task。本文利用这种做法在 WikiSQL数据集上进行测试，性能提高了1.1%～5.4%。因为这也是一个 semantic任务，但是和传统的 semantic不太一样，所以我没有仔细阅读这篇文章，仅仅当作一个对 meta-learning的使用方法的一种科普。</p><h3 id="Meta-Multi-Task-Learning-for-Sequence-Learning"><a href="#Meta-Multi-Task-Learning-for-Sequence-Learning" class="headerlink" title="Meta Multi-Task Learning for Sequence Learning"></a>Meta Multi-Task Learning for Sequence Learning</h3><p>AAAI-2018的一篇长文。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;This post is about my study on meta-learning and some related papers.&lt;br&gt;
    
    </summary>
    
    
      <category term="Meta-Learning" scheme="http://yoursite.com/tags/Meta-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Study-on-Syntax-Aware-SRL</title>
    <link href="http://yoursite.com/2018/09/19/Study-on-Syntax-Aware-SRL/"/>
    <id>http://yoursite.com/2018/09/19/Study-on-Syntax-Aware-SRL/</id>
    <published>2018-09-19T06:27:18.000Z</published>
    <updated>2019-02-25T08:31:45.366Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pytorch-DeepATT</title>
    <link href="http://yoursite.com/2018/06/25/Pytorch-DeepATT/"/>
    <id>http://yoursite.com/2018/06/25/Pytorch-DeepATT/</id>
    <published>2018-06-25T10:02:57.000Z</published>
    <updated>2019-01-21T13:49:53.330Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Contact Kiro to get the key.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="SRL" scheme="http://yoursite.com/tags/SRL/"/>
    
  </entry>
  
  <entry>
    <title>Syntax-for-SRL</title>
    <link href="http://yoursite.com/2018/03/19/Syntax-for-SRL/"/>
    <id>http://yoursite.com/2018/03/19/Syntax-for-SRL/</id>
    <published>2018-03-19T13:37:25.000Z</published>
    <updated>2019-01-21T13:49:53.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>为了 EMNLP2018的工作, 尝试在 SRL的工作中加入句法的信息, 用以提升 SRL的性能.<br><a id="more"></a></p><h1 id="参考的工作"><a href="#参考的工作" class="headerlink" title="参考的工作"></a>参考的工作</h1><p>本工作参考 <a href="https://github.com/luheng/deep_srl" target="_blank" rel="noopener">deep_srl</a>. 工作参考了 deep_srl中的神经网络结构, 并且在开源代码的支持下, 很方便的从 theano切换到了 pytoch框架. 在使用 Pytorch重现论文工作的过程中, 还受到了作者的指导, 十分感谢.</p><h1 id="看过的论文："><a href="#看过的论文：" class="headerlink" title="看过的论文："></a>看过的论文：</h1><p><a href="https://homes.cs.washington.edu/~luheng/files/acl2017_hllz.pdf" target="_blank" rel="noopener">He Highway LSTM Deep SRL</a><br><a href="https://www.aclweb.org/anthology/D16-1007" target="_blank" rel="noopener">Position Encoding TPF2</a><br><a href="http://www.aclweb.org/anthology/D15-1206" target="_blank" rel="noopener">SDP</a><br><a href="https://arxiv.org/pdf/1712.01586.pdf" target="_blank" rel="noopener">Attention SRL</a><br><a href="http://www.aclweb.org/anthology/W17-4305" target="_blank" rel="noopener">SA-LSTM for SRL</a><br><a href="http://www.aclweb.org/anthology/P16-1113" target="_blank" rel="noopener">Dependency Path Embedding</a><br><a href="http://www.cs.upc.edu/~srlconll/st05/papers/intro.pdf" target="_blank" rel="noopener">CoNLL-2005 SRL Introduction</a></p><h1 id="显著性检验"><a href="#显著性检验" class="headerlink" title="显著性检验"></a>显著性检验</h1><p><a href="/documents/SRL/significance_test.txt">显著性检验 ensemble all vs He ensemble || single he vs TPF</a><br><a href="/documents/SRL/log_conll05_devel_baseline_and_tree_gru.txt">显著性检验 baseline vs TreeGRU</a><br><a href="/documents/SRL/log_devel_conll05_baseline_and_sdp.txt">显著性检验 baseline vs SDP</a><br><a href="/documents/SRL/log_devel_conll05_baseline_and_tpf.txt">显著性检验 baseline vs TPF</a><br><a href="/documents/SRL/log_devel_conll05_baseline_and_pattern.txt">显著性检验 baseline vs Pattern</a><br><a href="/documents/SRL/log_test_both_conll05_baseline_ours_and_treegru.txt">显著性检验 Test both baseline vs TreeGRU</a><br><a href="/documents/SRL/log_conll05_test_both_sdp.txt">显著性检验 Test both baseline vs SDP</a><br><a href="/documents/SRL/log_conll05_test_both_tpf.txt">显著性检验 Test both baseline vs TPF</a><br><a href="/documents/SRL/log_test_both_conll05_baseline_and_pattern.txt">显著性检验 Test both baseline vs Pattern</a><br><a href="/documents/SRL/log_test_both_treegru_elmo_compare_baseline_elmo.txt">显著性检验 Test both baseline w ELMo vs Tree-GRU w ELMo</a>  高<br><a href="/documents/SRL/log_test_both_sdp_elmo_compare_baseline_elmo.txt">显著性检验 Test both baseline w ELMo vs SDP w ELMo</a><br><a href="/documents/SRL/log_test_both_baseline_elmo_and_tpf_elmo.txt">显著性检验 Test both baseline w ELMo vs tpf w ELMo</a><br><a href="/documents/SRL/log_test_both_pattern_elmo_compare_baseline_elmo.txt">显著性检验 Test both baseline w ELMo vs pattern w ELMo</a><br><a href="/documents/SRL/log_test_both_baseline_pos_and_tpf_poe.txt">显著性检验 Test both baseline poe vs tpf poe</a><br><a href="/documents/SRL/log_test_both_baseline_poe_and_five_ensemble.txt">显著性检验 Test both baseline poe vs four methods poe</a><br><a href="/documents/SRL/log_test_both_tpf_poe_compare_four_methods_poe.txt">显著性检验 Test both TPF poe vs four methods poe</a> 有点高<br><a href="/documents/SRL/log_test_both_tpf_poe_and_tpf_elmo.txt">显著性检验 Test both baseline poe elmo vs tpf poe elmo</a><br><a href="/documents/SRL/log_test_both_baseline_elmo_and_tpf_elmo_append_five_methods.txt">显著性检验 Test both baseline poe elmo vs four methods ensemble elmo</a><br><a href="/documents/SRL/log_test_both_tpf_elmo_ensemble_compare_four_methods_elmo_ensemble.txt">显著性检验 Test both tpf elmo ensemble vs four methods elmo ensemble</a> 还算正常</p><h1 id="2018-8-4-记录一下-ELMo的相关实验"><a href="#2018-8-4-记录一下-ELMo的相关实验" class="headerlink" title="2018-8-4-记录一下 ELMo的相关实验"></a>2018-8-4-记录一下 ELMo的相关实验</h1><p>因为 ELMo的出现，DeepSRL的性能又被往前推了很多，所以我们尝试加入 ELMo，学习一下 ELMo的相关使用方法，顺便看看性能如何。</p><table><thead><tr><th><strong>Model</strong></th><th><strong>Path</strong></th><th><strong>Dev</strong></th><th><strong>Test WSJ</strong></th><th><strong>Test Brown</strong></th></tr></thead><tbody><tr><td>DeepATT (FFN)</td><td>论文结果</td><td>83.1</td><td>84.8</td><td>74.1</td></tr><tr><td>DeepSRL (re-impl)</td><td>141/data/qrxia/DeepSRL-w-ELMO/exp-baseline/</td><td>81.6</td><td>82.9</td><td>72.2</td></tr><tr><td>LSGN</td><td>论文结果</td><td>–</td><td>83.9</td><td>73.7</td></tr><tr><td>——-</td><td>——</td><td>——</td><td>——-</td><td>—–</td></tr><tr><td>DeepSRL w ELMo (offline)</td><td>143~/DeepSRL-w-ELMo/exp-baseline-w-ELMo-hdf5-full-formulation</td><td>85.5</td><td>86.3</td><td>74.7</td></tr><tr><td>DeepSRL w ELMo + syn label (offline)</td><td>126~/DeepSRL-w-ELMo/exp-baseline-w-ELMo-syn-label</td><td>85.6</td><td>86.0</td><td>77.1</td></tr><tr><td>DeepSRL w ELMo + TPF (offline)</td><td>126~/DeepSRL-w-ELMo/exp-baseline-w-ELMo-syn-label</td><td>85.3</td><td>86.9</td><td>76.8</td></tr><tr><td>LSGN w ELMo</td><td>论文结果</td><td>–</td><td>87.4</td><td>80.4</td></tr></tbody></table><h1 id="开始跑-CoNLL-2012的实验"><a href="#开始跑-CoNLL-2012的实验" class="headerlink" title="开始跑 CoNLL-2012的实验"></a>开始跑 CoNLL-2012的实验</h1><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th><th><strong>iter</strong></th></tr></thead><tbody><tr><td>141/data/qrxia/EMNLP2018/deep_syntactic_for_srl/exp-conll2012-baseline</td><td>baseline</td><td></td></tr></tbody></table><h1 id="分析-CoNLL2005-SRL结构和-句法结构之间的关系-2018-4-26"><a href="#分析-CoNLL2005-SRL结构和-句法结构之间的关系-2018-4-26" class="headerlink" title="分析 CoNLL2005 SRL结构和 句法结构之间的关系 (2018-4-26)"></a>分析 CoNLL2005 SRL结构和 句法结构之间的关系 (2018-4-26)</h1><p>同时分析了 predicate_argument 在句法树中的相对位置，这里的 predicate_argument 包含了”O”<br>详细的数据在 <a href="/documents/srl/predicate_argument_frequence.txt">这里</a></p><p>分析了 predicate_argument_pair (从predicate word 走到 argument word 是否可以在句法树中找到一条父子线) 和 head_modifier_pair之间的重合度。在一条父子线可以找到 predicate-argument<br>最高达到 <a href="/documents/srl/overlapping.txt">89.46%</a>， 意味着在所有的有效的 predicate_argument_pair当中，存在着 81.9%能够在 head_modifier中找到，即能够在句法树中找到。</p><h1 id="TPF2-的-Ensemble-5-fold-实验-2018-5-10"><a href="#TPF2-的-Ensemble-5-fold-实验-2018-5-10" class="headerlink" title="TPF2 的 Ensemble (5-fold)实验 (2018-5-10)"></a>TPF2 的 Ensemble (5-fold)实验 (2018-5-10)</h1><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th><th><strong>iter</strong></th></tr></thead><tbody><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_5fold_0_tpf2_model</td><td>5 fold 0</td><td>80.96%</td><td>417 / 500</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_5fold_1_tpf2_model</td><td>5 fold 1</td><td>80.71%</td><td>461 / 500</td></tr><tr><td>kiro@ubuntu14-04:~/Work/Semantic/deep_srl-master/conll05_5fold_2_tpf2_model</td><td>5 fold 2</td><td>80.98%</td><td>482 / 500</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_5fold_3_tpf2_model</td><td>5 fold 3</td><td>81.08%</td><td>491 / 500</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_5fold_4_tpf2_model</td><td>5 fold 4</td><td>80.93%</td><td>443 / 500</td></tr></tbody></table><h1 id="使用-Gold-syntax进行-TPF2-以及-SDP的实验-2018-5-10"><a href="#使用-Gold-syntax进行-TPF2-以及-SDP的实验-2018-5-10" class="headerlink" title="使用 Gold syntax进行 TPF2 以及 SDP的实验 (2018-5-10)"></a>使用 Gold syntax进行 TPF2 以及 SDP的实验 (2018-5-10)</h1><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th><th><strong>iter</strong></th></tr></thead><tbody><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_whole_tpf2_model_gold_syntax</td><td>gold syntax for tpf2</td><td>87.75%</td><td>443 / 500</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_whole_sdp_model_gold_syntax</td><td>gold syntax for sdp</td><td></td></tr></tbody></table><h1 id="根据新架构的实验-2018-5-1"><a href="#根据新架构的实验-2018-5-1" class="headerlink" title="根据新架构的实验 (2018-5-1)"></a>根据新架构的实验 (2018-5-1)</h1><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th><th><strong>iter</strong></th></tr></thead><tbody><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_train_model/</td><td>2w Train Baseline old architecture</td><td><strong>72.04%</strong></td><td></td></tr><tr><td>kiro@ubuntu14-04:~/Work/Semantic/deep_srl-master/exp-new-architecture-baseline/</td><td>2w Train Baseline</td><td><strong>71.39%</strong></td><td></td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/exp-new-architecture-baseline</td><td>2w Train Baseline in Server 141</td><td>71.35%</td><td></td></tr><tr><td>kiro@ubuntu14-04:~/Work/Semantic/deep_srl-master/exp-new-architecture-baseline-w-bucket</td><td>2w Train Baseline w bucket</td><td>71.11% (w viterbi 73.28%)</td><td>211 / 261</td></tr><tr><td>kiro@ubuntu14-04:~/Work/Semantic/deep_srl-master/exp-new-architecture-baseline-w-bucket-outer-random</td><td>2w Train Baseline w bucket and outer random</td><td>71.09%</td><td>220 / 270</td></tr><tr><td>kiro@ubuntu14-04:~/Work/Semantic/deep_srl-master/exp-new-architecture-baseline-w-bucket-viterbi</td><td>2w Train Baseline w bucket viterbi</td><td><strong>73.08%</strong></td><td>155 / 205</td></tr></tbody></table><ol><li>新的架构的模型的效果比不上之前的 Baseline， 因为新的架构有一个操作是 50次评价不更新， 就直接杀掉程序，所以效果并不好，停留在了 383次迭代 (71.59%，是old architecture的效果)</li><li>加入了 bucket，速度确实能够得到很大的提升，从原来的2min30s -&gt; 1min10s ，粗略估计，个人台式机 1080Ti</li><li>因为在 Train过程中，使用 viterbi解码的结果作为评判标准，从结果上来看，会损失 0.2%个点。</li><li>给 Bucket加入了桶之间的随机，发现结果还是和不加桶之间的随机差不多，基本一致。依旧不如 Baseline.</li></ol><h1 id="deep-srl-架构图"><a href="#deep-srl-架构图" class="headerlink" title="deep srl 架构图"></a>deep srl 架构图</h1><p><img src="/images/srl/highway-example.png" alt="deep_srl"></p><h1 id="我的实验的测试记录-2018-5-14"><a href="#我的实验的测试记录-2018-5-14" class="headerlink" title="我的实验的测试记录 (2018-5-14)"></a>我的实验的测试记录 (2018-5-14)</h1><table><thead><tr><th><strong>Path</strong></th><th><strong>内容</strong></th><th><strong>Dev Precision</strong></th><th><strong>Dev Recall</strong></th><th><strong>Dev FScore</strong></th><th><strong>Dev Comp.</strong></th><th><strong>Test WSJ Precision</strong></th><th><strong>Test WSJ Recall</strong></th><th><strong>Test WSJ FScore</strong></th><th><strong>Test WSJ Comp.</strong></th><th><strong>Test Brown Precision</strong></th><th><strong>Test Brown Recall</strong></th><th><strong>Test Brown FScore</strong></th><th>__Test Brown Comp.</th><th><strong>Test Both P</strong></th><th><strong>Test Both R</strong></th><th><strong>Test Both F</strong></th></tr></thead><tbody><tr><td>Paper</td><td>He <strong>POE</strong></td><td>83.1%</td><td>82.4%</td><td>82.7%</td><td>64.1%</td><td>85.0%</td><td>84.3%</td><td>84.6%</td><td>66.5%</td><td>74.9%</td><td>72.4%</td><td>73.6%</td><td>46.4</td><td>-</td><td>-</td><td><strong>83.2%</strong></td></tr><tr><td>Paper</td><td>He <strong>Single</strong></td><td>81.6%</td><td>81.6%</td><td>81.6%</td><td>62.3%</td><td>83.1%</td><td>83.0%</td><td>83.1%</td><td>64.3%</td><td>72.9%</td><td>71.4%</td><td>72.1%</td><td>44.8%</td><td>-</td><td>-</td><td>81.6%</td></tr><tr><td>141:…exp-conll05-syn-label-predict</td><td>syntactic label 测试</td><td>82.46%</td><td>82.85%</td><td>82.66%</td><td>63.55%</td><td>83.58%</td><td>83.70%</td><td>83.64%</td><td>65.45%</td><td>73.19%</td><td>71.98%</td><td>72.58%</td><td>45.65%</td><td>82.21%</td><td>82.13%</td><td>82.17%</td></tr><tr><td>n141:…exp-conll05-tpf2-predict</td><td>TPF2 测试</td><td>82.77%</td><td>82.20%</td><td>82.48%</td><td>63.21%</td><td>84.32%</td><td>83.78%</td><td>84.05%</td><td>65.86%</td><td>73.68%</td><td>72.03%</td><td>72.85%</td><td>45.52%</td><td>82.92%</td><td>82.21%</td><td>82.56%</td></tr><tr><td>n141:…exp-conll05-whole-tpf-syn-label</td><td>TPF2 and Syn label</td><td>82.39%</td><td>82.61%</td><td>82.50%</td><td>63.73%</td><td>84.04%</td><td>83.91%</td><td>84.98%</td><td>65.65%</td><td>73.58%</td><td>72.67%</td><td>73.12%</td><td>47.26%</td><td>82.65%</td><td>82.40%</td><td>82.53%</td></tr><tr><td>n143:…exp-conll05-tree-gru-predict</td><td>Tree-GRU 测试</td><td>82.71%</td><td>82.78%</td><td>82.75%</td><td>63.70%</td><td>83.92%</td><td>83.59%</td><td>83.75%</td><td>65.22%</td><td>72.90%</td><td>71.66%</td><td>72.27%</td><td>44.90%</td><td>82.46%</td><td>81.99%</td><td>82.22%</td></tr><tr><td>n143:…exp-conll05-whole-sdp-predict</td><td>SDP 测试</td><td>82.60%</td><td>82.47%</td><td>82.53%</td><td>64.01%</td><td>84.21%</td><td>83.86%</td><td>84.03%</td><td>65.86%</td><td>73.96%</td><td>72.03%</td><td>72.98%</td><td>45.27%</td><td>82.86%</td><td>82.28%</td><td>82.57%</td></tr><tr><td>n143:…exp-conll05-whole-pattern-predict</td><td>pattern</td><td>82.50%</td><td>82.47%</td><td>82.49%</td><td>62.93%</td><td>83.70%</td><td>83.84%</td><td>83.77%</td><td>65.26%</td><td>73.40%</td><td>72.49%</td><td>72.94%</td><td>46.14%</td><td>82.34%</td><td>82.32%</td><td>82.33%</td></tr><tr><td>n141:…exp-ensemble-scores-predict</td><td>syntactic label + TPF2</td><td>84.15%</td><td>83.58%</td><td>83.87%</td><td>65.67%</td><td>85.23%</td><td>84.93%</td><td>85.08%</td><td>67.65%</td><td>75.82%</td><td>73.91%</td><td>74.85%</td><td>48.76%</td><td>84.00%</td><td>83.45%</td><td>83.72%</td></tr><tr><td>n141:…exp-ensemble-scores-predict(no pattern)</td><td>ensemble all four</td><td>84.61%</td><td>84.03%</td><td>84.32%</td><td>66.72%</td><td>85.67%</td><td>85.37%</td><td>85.52%</td><td>68.43%</td><td>76.53%</td><td>74.41%</td><td>75.45%</td><td>49.13%</td><td><strong>84.47%</strong></td><td><strong>83.91%</strong></td><td><strong>84.19%</strong></td></tr><tr><td>n141:…exp-ensemble-scores-predict(all)</td><td>ensemble all five</td><td>84.57%</td><td>84.04%</td><td>84.30%</td><td>66.41%</td><td>85.79%</td><td>85.48%</td><td>85.63%</td><td>68.71%</td><td>76.26%</td><td>74.51%</td><td>75.37%</td><td>49.25%</td><td><strong>84.54%</strong></td><td><strong>84.01%</strong></td><td><strong>84.27%</strong></td></tr><tr><td>n143:…exp-conll05-whole-tpf2-gold-syntax-predict</td><td>tpf2 gold syntax</td><td>88.31%</td><td>88.41%</td><td>88.36%</td><td>72.91%</td><td>89.60%</td><td>89.62%</td><td>89.61%</td><td>75.05%</td><td>80.27%</td><td>79.24%</td><td>79.75%</td><td>55.72%</td><td>88.36%</td><td>88.23%</td><td>88.30%</td></tr><tr><td>n143:…conll05_5fold_0_tpf2_model</td><td>tpf2 5fold 0</td><td>81.95%</td><td>81.99%</td><td>81.97%</td><td>62.38%</td><td>83.55%</td><td>83.43%</td><td>83.49%</td><td>65.22%</td><td>73.02%</td><td>71.98%</td><td>72.50%</td><td>45.27%</td><td>82.15%</td><td>81.90%</td><td>82.03%</td></tr><tr><td>n143:…conll05_5fold_1_tpf2_model</td><td>tpf2 5fold 1</td><td>81.74%</td><td>81.33%</td><td>81.54%</td><td>61.67%</td><td>83.46%</td><td>82.94%</td><td>83.20%</td><td>64.25%</td><td>72.85%</td><td>71.11%</td><td>71.97%</td><td>44.53%</td><td>82.06%</td><td>81.35%</td><td>81.70%</td></tr><tr><td>kiro:…conll05_5fold_2_tpf2_model</td><td>tpf2 5fold 2</td><td>82.00%</td><td>81.86%</td><td>81.93%</td><td>62.35%</td><td>83.10%</td><td>83.02%</td><td>83.06%</td><td>64.50%</td><td>72.40%</td><td>70.74%</td><td>71.56%</td><td>44.15%</td><td>81.70%</td><td>81.38%</td><td>81.54%</td></tr><tr><td>n143:…conll05_5fold_3_tpf2_model</td><td>tpf2 5fold 3</td><td>82.31%</td><td>81.72%</td><td>82.01%</td><td>62.38%</td><td>83.46%</td><td>82.89%</td><td>83.17%</td><td>64.44%</td><td>73.77%</td><td>71.43%</td><td>72.58%</td><td>45.40%</td><td>82.19%</td><td>81.36%</td><td>81.77%</td></tr><tr><td>n143:…conll05_5fold_4_tpf2_model</td><td>tpf2 5fold 4</td><td>82.16%</td><td>81.51%</td><td>81.84%</td><td>61.61%</td><td>83.94%</td><td>83.15%</td><td>83.54%</td><td>64.95%</td><td>72.14%</td><td>70.28%</td><td>71.20%</td><td>43.91%</td><td>82.38%</td><td>81.43%</td><td>81.90%</td></tr><tr><td>n141:…exp-POE-tpf2-scores-predict</td><td>tpf2 POE</td><td>84.01%</td><td>83.39%</td><td>83.70%</td><td>65.09%</td><td>85.59%</td><td>85.01%</td><td>85.30%</td><td>68.05%</td><td>75.89%</td><td>73.37%</td><td>74.79%</td><td>48.13%</td><td>84.31%</td><td>83.50%</td><td>83.91%</td></tr></tbody></table><table><thead><tr><th><strong>Path</strong></th><th><strong>内容</strong></th><th><strong>Dev Precision</strong></th><th><strong>Dev Recall</strong></th><th><strong>Dev FScore</strong></th><th><strong>Dev Comp.</strong></th><th><strong>Test WSJ Precision</strong></th><th><strong>Test WSJ Recall</strong></th><th><strong>Test WSJ FScore</strong></th><th><strong>Test WSJ Comp.</strong></th><th><strong>Test Brown Precision</strong></th><th><strong>Test Brown Recall</strong></th><th><strong>Test Brown FScore</strong></th><th>__Test Brown Comp.</th><th><strong>Test Both P</strong></th><th><strong>Test Both R</strong></th><th><strong>Test Both F</strong></th></tr></thead><tbody><tr><td>n141:…exp-baseline-w-ELMo-hdf5-full-formulation</td><td>w ELMo</td><td>85.42%</td><td>85.56%</td><td>85.49%</td><td>68.04%</td><td>86.36%</td><td>86.21%</td><td>86.29%</td><td>69.43%</td><td>75.15%</td><td>74.32%</td><td>74.73%</td><td>48.13%</td><td>84.87%</td><td>84.63%</td><td>84.75%</td></tr><tr><td>n126:…exp-baseline-w-ELMo-syn-label</td><td>w ELMo + syn label</td><td>85.55%</td><td>85.66%</td><td>85.60%</td><td>68.17%</td><td>86.07%</td><td>85.97%</td><td>86.02%</td><td>68.96%</td><td>77.61%</td><td>76.57%</td><td>77.09%</td><td>51.12%</td><td>84.95%</td><td>84.71%</td><td>84.83%</td></tr><tr><td>85.36 n126:…exp-baseline-w-ELMo-TreeGRU</td><td>w ELMo + TreeGRU</td><td>85.74%</td><td>85.63%</td><td>85.69%</td><td>68.20%</td><td>86.16%</td><td>86.16%</td><td>86.16%</td><td>68.86%</td><td>77.85%</td><td>75.56%</td><td>76.69%</td><td>50.75%</td><td>85.07%</td><td>84.74%</td><td>84.90%</td></tr><tr><td>85.40 n126:…exp-baseline-w-ELMo-SDP</td><td>w ELMo + SDP</td><td>85.61%</td><td>85.66%</td><td>85.63%</td><td>68.75%</td><td>86.89%</td><td>86.67%</td><td>86.78%</td><td>70.17%</td><td>77.97%</td><td>76.25%</td><td>77.10%</td><td>52.36%</td><td>85.71%</td><td>85.27%</td><td>85.49%</td></tr><tr><td>n126:…exp-baseline-w-ELMo-TPF</td><td>w ELMo + TPF</td><td>85.45%</td><td>85.12%</td><td>85.28%</td><td>67.89%</td><td>87.03%</td><td>86.76%</td><td>86.89%</td><td>70.40%</td><td>77.63%</td><td>75.88%</td><td>76.75%</td><td>51.62%</td><td>85.79%</td><td>85.30%</td><td>85.55%</td></tr><tr><td>n126:…exp-baseline-w-ELMo-TPF-Gold-syntax</td><td>w ELMo + TPF Gold syntax</td><td>90.14%</td><td>89.54%</td><td>89.84%</td><td>75.40%</td><td>91.07%</td><td>91.04%</td><td>91.06%</td><td>77.48%</td><td>82.30%</td><td>82.04%</td><td>82.17%</td><td>59.45%</td><td>89.90%</td><td>89.84%</td><td>89.87%</td></tr><tr><td>n126:…exp-baseline-w-ELMo-pattern</td><td>w ELMo + pattern</td><td>85.53%</td><td>85.44%</td><td>85.49%</td><td>68.17%</td><td>86.51%</td><td>86.31%</td><td>86.41%</td><td>69.62%</td><td>77.36%</td><td>76.44%</td><td>76.89%</td><td>51.49%</td><td>85.29%</td><td>84.98%</td><td>85.13%</td></tr><tr><td>n141:…exp-ensemble-scores-predict</td><td>ensemble four w elmo TPF</td><td>86.53%</td><td>86.07%</td><td>86.30%</td><td>69.74%</td><td>87.62%</td><td>87.31%</td><td>87.46%</td><td>71.52%</td><td>78.81%</td><td>77.40%</td><td>78.10%</td><td>53.48%</td><td>86.46%</td><td>85.98%</td><td>86.22%</td></tr><tr><td>n141:…exp-ensemble-scores-predict</td><td>ensemble TPF + elmo TPF</td><td>86.32%</td><td>85.74%</td><td>86.03%</td><td>69.33%</td><td>87.51%</td><td>87.02%</td><td>87.26%</td><td>71.12%</td><td>78.55%</td><td>76.53%</td><td>77.52%</td><td>52.49%</td><td>86.33%</td><td>85.62%</td><td>85.97%</td></tr><tr><td>n126:…exp-baseline-5-fold-0</td><td>baseline 5fold 0</td><td>80.68%</td><td>80.55%</td><td>80.62%</td><td>60.41%</td><td>82.33%</td><td>82.29%</td><td>82.31%</td><td>62.94%</td><td>70.79%</td><td>69.13%</td><td>69.95%</td><td>41.67%</td><td>80.82%</td><td>80.53%</td><td>80.67%</td></tr><tr><td>n126:…exp-baseline-5-fold-1</td><td>baseline 5fold 1</td><td>81.08%</td><td>80.64%</td><td>80.86%</td><td>61.18%</td><td>82.41%</td><td>81.83%</td><td>82.12%</td><td>62.31%</td><td>72.30%</td><td>70.97%</td><td>71.63%</td><td>44.90%</td><td>81.07%</td><td>80.37%</td><td>80.72%</td></tr><tr><td>n126:…exp-baseline-5-fold-2</td><td>baseline 5fold 2</td><td>81.08%</td><td>80.40%</td><td>80.74%</td><td>61.11%</td><td>82.61%</td><td>81.89%</td><td>82.24%</td><td>62.41%</td><td>71.04%</td><td>69.41%</td><td>70.21%</td><td>41.04%</td><td>81.08%</td><td>80.21%</td><td>80.64%</td></tr><tr><td>n126:…exp-baseline-5-fold-3</td><td>baseline 5fold 3</td><td>80.61%</td><td>80.41%</td><td>80.51%</td><td>59.98%</td><td>82.34%</td><td>81.94%</td><td>82.14%</td><td>62.46%</td><td>72.42%</td><td>69.73%</td><td>71.05%</td><td>43.16%</td><td>81.05%</td><td>80.31%</td><td>80.68%</td></tr><tr><td>n126:…exp-baseline-5-fold-4</td><td>baseline 5fold 4</td><td>80.41%</td><td>80.81%</td><td>80.61%</td><td>60.16%</td><td>81.81%</td><td>81.44%</td><td>81.62%</td><td>61.65%</td><td>71.07%</td><td>69.50%</td><td>70.27%</td><td>40.92%</td><td>80.39%</td><td>79.84%</td><td>80.11%</td></tr><tr><td>n126:…exp-baseline-POE</td><td>baseline 5fold</td><td>83.05%</td><td>82.47%</td><td>82.76%</td><td>64.16%</td><td>84.63%</td><td>84.00%</td><td>84.31%</td><td>66.36%</td><td>74.90%</td><td>72.12%</td><td>73.48%</td><td>46.14%</td><td>83.36%</td><td>82.41%</td><td>82.88%</td></tr><tr><td>n126:…exp-ensemble</td><td>baseline 5fold ensemble baseline ELMo</td><td>86.26%</td><td>86.16%</td><td>86.21%</td><td>69.55%</td><td>87.20%</td><td>86.79%</td><td>86.99%</td><td>70.80%</td><td>77.67%</td><td>75.75%</td><td>76.70%</td><td>50.37%</td><td>85.94%</td><td>85.31%</td><td>85.63%</td></tr><tr><td>n126:…exp-ensemble-five-2…</td><td>ensemble 5 methods w ELMo 3</td><td>86.99%</td><td>86.92%</td><td>86.95%</td><td>71.09%</td><td>87.95%</td><td>87.64%</td><td><strong>87.80%</strong></td><td>72.24%</td><td>79.65%</td><td>78.04%</td><td>78.84%</td><td>53.23%</td><td>86.87%</td><td>86.37%</td><td>86.62%</td></tr></tbody></table><p><strong>备注</strong>：ensemble w elmo TPF: 0.5 0.1 0.1 0.1 0.1 0.1</p><p>past process results.<br>|n126:…exp-ensemble-five-… |ensemble 5 methods w ELMo|87.07%|86.77%|86.92%|70.75%|87.97%|87.55%|87.76%|72.13%|79.56%|77.95%|78.75%|53.48%|86.87%|86.27%|86.57%|<br>|n126:…exp-ensemble-five-2… |ensemble 5 methods w ELMo 2|86.95%|86.89%|86.92%|70.84%|87.91%|87.58%|87.74%|72.11%|79.52%|78.14%|78.82%|53.61%|86.80%|86.31%|86.55%|</p><h3 id="按照-Dev试试调整一下-ensemble的系数"><a href="#按照-Dev试试调整一下-ensemble的系数" class="headerlink" title="按照 Dev试试调整一下 ensemble的系数"></a>按照 Dev试试调整一下 ensemble的系数</h3><table><thead><tr><th></th><th><strong>Baseline 5fold ensemble ELMo</strong></th><th><strong>TPF 5fold ensemble ELMo</strong></th></tr></thead><tbody><tr><td>0.1  0.5</td><td>86.21%  / 86.99%</td><td>86.03%  /  87.26%</td></tr><tr><td>0.1  0.8</td><td>85.93%  / 86.99%</td><td>85.92%  /87.28%</td></tr><tr><td>0.15 0.8</td><td>86.09%  / 87.05%</td><td>86.11%  /  87.29%</td></tr></tbody></table><h1 id="编写论文使用到的一些技巧"><a href="#编写论文使用到的一些技巧" class="headerlink" title="编写论文使用到的一些技巧"></a>编写论文使用到的一些技巧</h1><h3 id="vim-拼写检查"><a href="#vim-拼写检查" class="headerlink" title="vim 拼写检查"></a>vim 拼写检查</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:set spell spelllang=en_us</span><br><span class="line">:set nospell</span><br></pre></td></tr></table></figure><h1 id="使用原版代码跑出来的实验结果"><a href="#使用原版代码跑出来的实验结果" class="headerlink" title="使用原版代码跑出来的实验结果"></a>使用原版代码跑出来的实验结果</h1><p>测试集分为 WSJ, Brown, -Combined-</p><table><thead><tr><th><strong>路径</strong></th><th><strong>说明</strong></th><th><strong>Dev FScore</strong></th><th><strong>Dev FScore w constrain</strong></th><th><strong>Test FScore</strong></th><th><strong>Test FScore w constrain</strong></th></tr></thead><tbody><tr><td>–</td><td>论文结果</td><td>大约80.1%, 从图表看出,并未直接给出结果</td><td>81.6%</td><td></td><td>83.1%/72.1%/81.6%</td></tr><tr><td>gpu-no-1:~/deep_srl-master/conll05_model</td><td>代码结果</td><td>81.01%</td><td>82.08%</td><td></td><td></td></tr><tr><td>ubuntu14-04:~/Work/Semantic/deep_srl-master/conll05_model</td><td>Pytorch重现结果</td><td>80.47%</td><td>81.53%</td><td></td><td>83.19%/71.57%/81.64%</td></tr></tbody></table><h1 id="进行句法信息第一步-Biaffine-隐层信息"><a href="#进行句法信息第一步-Biaffine-隐层信息" class="headerlink" title="进行句法信息第一步: Biaffine 隐层信息"></a>进行句法信息第一步: Biaffine 隐层信息</h1><h2 id="5-fold获取PTB-Train的自动句法结果-2018-3-22"><a href="#5-fold获取PTB-Train的自动句法结果-2018-3-22" class="headerlink" title="5-fold获取PTB Train的自动句法结果 (2018-3-22)"></a>5-fold获取PTB Train的自动句法结果 (2018-3-22)</h2><table><thead><tr><th><strong>路径</strong></th><th><strong>n-fold</strong></th><th><strong>Dev FScore (UAS/LAS)</strong></th><th><strong>Test FScore (UAS/LAS)</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/BiaffineParser-pytorch-new/experiments/ptb_model_fold_0</td><td>0-7965</td><td>95.51%/93.60%</td><td>95.54%/93.54%</td></tr><tr><td>gpu-no-1:~/BiaffineParser-pytorch-new/experiments/ptb_model_fold_1</td><td>7966-15931</td><td>95.59%/93.77%</td><td>95.61%/93.68%</td></tr><tr><td>gpu-no-1:~/BiaffineParser-pytorch-new/experiments/ptb_model_fold_2</td><td>15932-23897</td><td>95.39%/93.46%</td><td>95.44%/93.50%</td></tr><tr><td>gpu-no-1:~/BiaffineParser-pytorch-new/experiments/ptb_model_fold_3</td><td>23898-31863</td><td>95.42%/93.43%</td><td>95.36%/93.36%</td></tr><tr><td>gpu-no-1:~/BiaffineParser-pytorch-new/experiments/ptb_model_fold_4</td><td>31864-39831</td><td>95.54%/93.71%</td><td>95.37%/93.40%</td></tr></tbody></table><p>其中: Test数据集是5-fold当中, 剩下的那一份数据. 在实验的合并阶段, 发现 Biaffine代码的输出中包含了 “unk”字段替换了原先的字段, 词性部分也是省略了一列. 所以利用原本的 train数据, 和生成的自动弧和标签的 train数据进行了合并的操作, 进行接下来的5-fold模型的训练. 另外一个小的测试: Train集合的封闭测试: UAS 98.25%</p><p>接下来的工作是: 抽取语料中句子对应的 LSTM output.</p><h2 id="分析CONLL05-SRL的数据和-PTB-句法的数据构成关系"><a href="#分析CONLL05-SRL的数据和-PTB-句法的数据构成关系" class="headerlink" title="分析CONLL05 SRL的数据和 PTB 句法的数据构成关系"></a>分析CONLL05 SRL的数据和 PTB 句法的数据构成关系</h2><ul><li>CONLL05 SRL: Train 36085</li><li>CONLL05 SRL: Dev 1240</li><li>CONLL05 SRL: Test Brown/WSJ/Total 361/2156/2517</li><li>PTB: Train 39832</li><li>PTB: Dev 1700</li><li>PTB: Test 2416</li></ul><p>其中, Train训练集合: PTB完全包含了 SRL; Dev集合和 PTB <strong>完全没有</strong> 重合的部分; Test集合中 WSJ在 PTB的 Test里面可以完全找到, 但是 Brown完全没有.<br>PTB 句法:2-21 train; 22 devel; 23 test; (2018-5-4)<br>因为句法的数据中不包含 wsj24的部分，所以只能通过使用 stanford parser进行获取，经过2个小时的研究，终于给跑出来了。记录相关日志如下：</p><ul><li>在本机上进行 stanford parser的运行，路径：kiro@ubuntu14-04:~/Work/DependencyParsing/stanford-parser-full-2013-11-12</li><li>执行的命令是：java -cp “*” -mx1g edu.stanford.nlp.trees.EnglishGrammaticalStructure -basic -keepPunct -conllx -treeFile wsj_24.mrg &gt; wsj_24.conll.punct</li><li>需要注意的是，PTB的数据文件是 LDC1999T42，而不是 PennTreenbankv2</li></ul><h3 id="Train-Test-wsj的自动-dep和-Biaffine-LSTM-Representation的获取-2018-3-24"><a href="#Train-Test-wsj的自动-dep和-Biaffine-LSTM-Representation的获取-2018-3-24" class="headerlink" title="Train, Test-wsj的自动 dep和 Biaffine LSTM Representation的获取 (2018-3-24)"></a>Train, Test-wsj的自动 dep和 Biaffine LSTM Representation的获取 (2018-3-24)</h3><p>因为在上述的分析中, SRL CONLL05的 Train (PTB Train 5-fold model) 和 Test-wsj (PTB Train model) 是 PTB的子集, 所以可以从 PTB的子集中进行抽取, 抽取的数据存在以下目录:</p><ul><li>autodep: gpu-no-1:~/EMNLP2018/PTB_CONLL05_analysis/conll05_autodep/</li><li>lstm representation: gpu-no-1:~/EMNLP2018/PTB_CONLL05_analysis/conll05_biaffine_lstm_representation/</li></ul><h3 id="处理-CONLL05的数据-Dev-Test-brown-2018-3-25"><a href="#处理-CONLL05的数据-Dev-Test-brown-2018-3-25" class="headerlink" title="处理 CONLL05的数据 Dev, Test-brown (2018-3-25)"></a>处理 CONLL05的数据 Dev, Test-brown (2018-3-25)</h3><ol><li>首先抽取 Dev, Test-brown的文本数据</li><li>利用 Stanford POSTagger-2017-06-09 + models/english-bidirectional-distsim.tagger 进行词性标注</li><li>利用获取到的词性, 进行 BiaffineParser (PTB Train model)的分析, 得到: 自动依存句法+LSTM Representation</li></ol><p>数据保存在如上路径</p><h2 id="开始跑-Biaffine的-LSTM-句法信息的实验-2018-3-26"><a href="#开始跑-Biaffine的-LSTM-句法信息的实验-2018-3-26" class="headerlink" title="开始跑 Biaffine的 LSTM 句法信息的实验 (2018-3-26)"></a>开始跑 Biaffine的 LSTM 句法信息的实验 (2018-3-26)</h2><p>读取 Biaffine的 LSTM的代码已经书写完毕, 并且添加了检查功能, 确保读取的 Biaffine LSTM Out能和 CONLL05的句子对应上.现在开始跑实验, 但是目前有一个问题就是 <strong>Biaffine LSTM维度太高:800</strong> 我们可能需要利用 Linear Projection将它降维, 变成一个合理的维度, 就像张老师的论文一样. 但是从目前的结果来看, 出现了一个非常奇怪的现象: Train集合可以和往常一样正常收敛, 但是 Dev上的效果至始至终没有太大的变化, 暂时不知道是什么原因导致的, 正在分析原因. (目前打算将 800维度降维至 200)</p><h3 id="直接利用-Biaffine-LSTM-output-Softmax进行的实验-2018-3-27"><a href="#直接利用-Biaffine-LSTM-output-Softmax进行的实验-2018-3-27" class="headerlink" title="直接利用 Biaffine LSTM output + Softmax进行的实验 (2018-3-27)"></a>直接利用 Biaffine LSTM output + Softmax进行的实验 (2018-3-27)</h3><p>实验结果表示, 结果很差, 从输出的结果 (经过了log_softmax)来看, 就是 O 所对应的位置的得分最高, 为-0.*左右, 其他的几乎全部集中在-4及以下, 这是一个很奇怪的现象. <strong>按道理:</strong> 应该Train集合能够收敛 loss, Dev的结果不应该是这么差, 正在排查原因.<br>发现了一个非常诡异的现象:</p><ol><li>我直接输出了 LSTM的浮点数信息, 但是居然在文件中 egrep不到???查到了一个可能的问题,  Biaffine LSTM的文件中, 有小数点后18位, 但是只保留了11位, 在numpy读取的时候. 乌龙: 其实是一样的, 只不过是输出精度的问题.原本我以为我想错了, 可是 Batch之后输出出来在 LSTM文件中还是查找不到??</li><li>第二个问题: 为什么在连续的 LSTM Out中, 会有 全是零的存在? 原来是自己制造的乌龙: LSTM Minus</li></ol><p><strong>好了</strong> 哈哈哈! 为什么这么说呢, 因为在 Dev的封测上面, 利用 Biaffine 的 LSTM Output 能够达到99.84%的 F值 (貌似还在继续上涨, 直接kill掉, 目标不是这个), 算是可以了. 接下来就是用 Train训练集试试看, 看看结果如何! 至于是怎么调试好的, <strong>尘归尘, 土归土</strong>:)<br>悲伤, Train集合训练, 在 Dev上面还是不行. 但是有一个非常奇怪的地方: 在利用 Train封闭测试得到的 LSTM Output上得到的模型, Dev目前可以达到 58% FScore; 但是切换到 5-fold的Train LSTM Output, Dev就不可以了, FScore还是只有0.几.</p><h3 id="利用-TreeLSTM-2018-3-30"><a href="#利用-TreeLSTM-2018-3-30" class="headerlink" title="利用 TreeLSTM (2018-3-30)"></a>利用 TreeLSTM (2018-3-30)</h3><p>在张梅山老师的代码基础之上, 需要稍做修改就可以进行我们的 SRL的实验. 目前采用的方式是直接利用 TreeLSTM的输出替换掉原本 Model的输出, 直接进行实验.<br>实验记录:</p><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th></tr></thead><tbody><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_tree_lstm_model</td><td>TreeLSTM + 2 Highway BiLSTM</td><td>因为设备不够用, 已经 kill, 效果也不行</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_tree_lstm_model</td><td>TreeLSTM + 4 Highway BiLSTM</td><td>79.36%, 运行了268次迭代, 设备不够用, 已经kill</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_tree_lstm_4_layers_model</td><td>TreeLSTM + 8 Highway BiLSTM</td></tr></tbody></table><h3 id="利用-Syntactic-Label-2018-3-31"><a href="#利用-Syntactic-Label-2018-3-31" class="headerlink" title="利用 Syntactic Label (2018-3-31)"></a>利用 Syntactic Label (2018-3-31)</h3><p>直接利用 Biaffine Parser的句法输出结果, 以 Embedding的形式加入到 神经网络的输入中, 以这种最简单直接的方式试一试效果.</p><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th></tr></thead><tbody><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_syn_label_model/</td><td>Input Embedding + auto syntactic label embedding</td><td><strong>81.75%</strong></td></tr></tbody></table><p>从以上的结果来看, 即便是这样子基本的句法信息, 也是能够产生很好的效果, 这里的 FScore还是w/o constrain</p><h3 id="利用-TPF2-2018-4-26"><a href="#利用-TPF2-2018-4-26" class="headerlink" title="利用 TPF2 (2018-4-26)"></a>利用 TPF2 (2018-4-26)</h3><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th></tr></thead><tbody><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_whole_tpf2_model/</td><td>Input Embedding + tpf2 embedding</td><td><strong>81.57%</strong></td></tr></tbody></table><h3 id="利用-SDP-2018-4-26"><a href="#利用-SDP-2018-4-26" class="headerlink" title="利用 SDP (2018-4-26)"></a>利用 SDP (2018-4-26)</h3><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th></tr></thead><tbody><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_whole_sdp_model</td><td>SDP</td><td><strong>81.68%</strong></td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_whole_sdp_model_gold_syntax</td><td>SDP with gold syntax</td></tr></tbody></table><h3 id="利用-Pattern的实验-2018-5-7"><a href="#利用-Pattern的实验-2018-5-7" class="headerlink" title="利用 Pattern的实验 (2018-5-7)"></a>利用 Pattern的实验 (2018-5-7)</h3><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th></tr></thead><tbody><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/exp-conll05-whole-pattern</td><td>Input + Pattern representation</td><td><strong>81.57%</strong></td></tr></tbody></table><h3 id="加入-Bucket"><a href="#加入-Bucket" class="headerlink" title="加入 Bucket"></a>加入 Bucket</h3><p>为了加速的效果, 加入 Bucket, 1w Train的速度由 5:50 降低到了 4:46</p><h2 id="因为速度的问题-现在开始-2w-Train的实验"><a href="#因为速度的问题-现在开始-2w-Train的实验" class="headerlink" title="因为速度的问题, 现在开始 2w Train的实验"></a>因为速度的问题, 现在开始 2w Train的实验</h2><h3 id="Baseline以及其他的一些实验-2018-4-6"><a href="#Baseline以及其他的一些实验-2018-4-6" class="headerlink" title="Baseline以及其他的一些实验 (2018-4-6)"></a>Baseline以及其他的一些实验 (2018-4-6)</h3><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th></tr></thead><tbody><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_train_model/</td><td>2w Train Baseline</td><td><strong>72.04%</strong></td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_tpf2_model</td><td>2w Train with TPF2</td><td><strong>75.92%</strong></td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_only_syn_label_model</td><td>2w Train with syntactic label</td><td><strong>74.31%</strong></td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_syn_label_model</td><td>2w Train with syntactic label + PE</td><td>73.89%</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_syn_label_tree_lstm_model</td><td>2w Train with syntactic label + TreeLSTM</td><td><strong>75.87%</strong></td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/exp-conll05-2w-pattern</td><td>2w Train with Pattern</td><td><strong>76.50%</strong></td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_sdp_model</td><td>2w Train with SDP</td><td><strong>76.76%</strong></td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_tree_lstm_model</td><td>2w Train with syntactic TreeLSTM</td><td>72.02%</td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_highway_tree_lstm_mean_model</td><td>2w Train with syntactic Highway TreeLSTM</td><td>72.00%</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_tree_lstm_model</td><td>2w Train with syntactic TreeLSTM w sorted training corpus</td><td>71.74%</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_pool_tree_lstm_model</td><td>2w Train with syntactic TreeLSTM (max pooling node forward)</td><td>72.35%</td></tr></tbody></table><h3 id="跟着张老师做实验-from-2018-4-11"><a href="#跟着张老师做实验-from-2018-4-11" class="headerlink" title="跟着张老师做实验 (from 2018-4-11)"></a>跟着张老师做实验 (from 2018-4-11)</h3><p>现在的工作转向于试图改变 Baseline的结构, 从而获取更快的速度.</p><table><thead><tr><th><strong>Path</strong></th><th><strong>实验内容</strong></th><th><strong>Dev FScore</strong></th></tr></thead><tbody><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_train_model/</td><td>2w Train Baseline</td><td><strong>72.04%</strong></td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_baseline_highway_mlp_output_model</td><td>2w Train Baseline + mlp + output</td><td><strong>72.24%</strong></td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_baseline_minus_model</td><td>2w Train Baseline-Minus, 取消 predicate embedding</td><td>54.31%</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_baseline_concate_minus_model</td><td>同line3 + output layer concate(h_i - h_p, hi)</td><td>56.24%</td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_minus_concate_nonlinear_model</td><td>同line4 + nonlinear layer</td><td>66.76%</td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_concate_minus_predicate_model</td><td>同line3 + output layer concate(h_i - h_p, hi, predicate_embedding)</td><td>56.09%</td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/conll05_2w_baseline_m_biaffine_model</td><td>同line3 + output layer Biaffine Layer</td><td>67.80%</td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/exp-conll05-2w-biaffine-sentence-level-predicates</td><td>sentence level predicates + Biaffine Layer</td><td>67.20% 待续</td></tr><tr><td>qrxia@n141:~/EMNLP2018/deep_syntactic_for_srl/exp-conll05-2w-biaffine-layer-3-mlp/conll05_model</td><td>同2 + 3 layer mlp + Biaffine Layer</td><td>65.32%</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/exp-conll05-2w-biaffine-layer</td><td>2w Train Biaffine Layer w baseline input MLP size 100</td><td>71.96%</td></tr><tr><td>qrxia@n143:~/EMNLP2018/deep_syntactic_for_srl/exp-conll05-2w-biaffine-layer-200</td><td>2w Train Biaffine Layer w baseline input w MLP size 200</td><td>71.14%</td></tr></tbody></table><p>实验结果：</p><ol><li>在 Baseline的 highway后加了一层 Linear Layer。 效果稍有提高 + 0.2%， 但是如果是全部数据，实验结果就不确定了，全部数据可能会有补缺短板的功能。</li><li>尝试着简化输入，input layer仅仅是 word embedding：1) h_i - h_p : 54.31; 2) concate(h_i - h_p, h_i) 56.24%; 3) concate(h_i - h_p, h_i, i_predicate_embedding) : 56.09%。通过取消 softmax layer，改换以上三种方式的预测 layer，结果都不如人意</li><li>concate(h_i - h_p, h_i) + NonLinear Layer + Softmax Layer， 效果接近于 MLP + Biaffine Layer 66.76% vs 67.80%</li><li>Baseline 和 Baseline + Biaffine Layer的效果基本一致：72.04% vs 71.96%, 相差 0.9%； 但是在全部数据上，Biaffine的效果要比 Baseline高0.3%. 可能是数据量的原因？导致Biaffine的效果不能很好地学习到？</li><li>尝试通过增加 MLP的层数来模拟 Highway的层数的功能，实验效果并不好：65.32% 相比较于一层 MLP + Biaffine：67.80%</li><li>增加 MLP的 HiddenSize的实验也是没有明显效果的：71.14%</li><li>尝试通过加入 sentence level predicate embedding + Highway + MLP + Biaffine 但是还是不行：67.20%</li></ol><p><a href="/documents/srl/label_freq.txt">conll05-label分布</a></p><h3 id="调查105个-SRL-Label是什么意思-2018-4-13"><a href="#调查105个-SRL-Label是什么意思-2018-4-13" class="headerlink" title="调查105个 SRL Label是什么意思? (2018-4-13)"></a>调查105个 SRL Label是什么意思? (2018-4-13)</h3><p>O:    不在语义框架之内<br>V, A0, A1, A2, A3, A4, A5<br>AM-LOC, AM-MNR, AM-TMP, AM-NEG, AM-MOD, AM-DIS, AM-EXT, AM-ADV, AM-PNC, AM-DIR, AM-PRD, AM-CAU, AM-REC, AM-TM, AM, AA<br>其中, 以上每一个标签都有两个组合 <strong>R-*</strong>, <strong>C-*</strong>, 例如: R-AM-LOC, C-AM-LOC…, 分别表示 <strong>r</strong>eference, <strong>c</strong>ontinuation, 表示对*的一种引用; 这种组合可以看成是一个独立的标签<br>另外: 有两个标签可以与以上进行组合, <strong>B, I</strong>: <strong>b</strong>egin, <strong>i</strong>nternal, 每一个标签都能有 2种组合 (B-*, I-*) 的可能. B, I的作用不言而喻<br><img src="/images/srl/srl-c.png" alt="一个C-*的列子"></p><h4 id="一个奇怪的现象-2018-4-16"><a href="#一个奇怪的现象-2018-4-16" class="headerlink" title="一个奇怪的现象 (2018-4-16)"></a>一个奇怪的现象 (2018-4-16)</h4><p>在李老师发现的他跑的实验会比我跑的实验少一个点的情况下, 我尝试了恢复原本的代码, 一块一块的恢复, 发现最终的问题居然出现在 hidden_drop初始化的部分, 简直匪夷所思.<br>不过我猜想这个对最终的实验结果应该不会有影响.</p><h1 id="这个工作的心得："><a href="#这个工作的心得：" class="headerlink" title="这个工作的心得："></a>这个工作的心得：</h1><p>总的来讲，这个工作旨在利用句法的信息来帮助语义角色标注的工作。<br>在这里，我主要记录一下自己写论文时候的一些想法。</p><ol><li>于我而言，写论文中最难的部分莫过于 abstract, introduction, related work and conclusion.</li><li>对于 abstract，是论文中很重要的部分：总结论文的工作，给出“摘要”</li><li>对于 introduction，介绍任务，简单介绍本文的动机，任务的发展呢</li><li>对于 related work，充分体现了自己对于领域内他人工作的熟知程度，更加的体现了自己在阅读论文中记录的多少。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;为了 EMNLP2018的工作, 尝试在 SRL的工作中加入句法的信息, 用以提升 SRL的性能.&lt;br&gt;
    
    </summary>
    
    
      <category term="SRL" scheme="http://yoursite.com/tags/SRL/"/>
    
  </entry>
  
  <entry>
    <title>KAMR开发记录</title>
    <link href="http://yoursite.com/2018/01/31/KAMR%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/01/31/KAMR开发记录/</id>
    <published>2018-01-31T05:42:52.000Z</published>
    <updated>2019-01-21T13:49:53.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>新开一篇博客记录一下AMR Parser (KAMR)的开发经过<br><a id="more"></a></p><h1 id="FCL相关工作"><a href="#FCL相关工作" class="headerlink" title="FCL相关工作"></a>FCL相关工作</h1><h2 id="AMR-LDC2014T12近几年来的实验结果"><a href="#AMR-LDC2014T12近几年来的实验结果" class="headerlink" title="AMR LDC2014T12近几年来的实验结果"></a>AMR LDC2014T12近几年来的实验结果</h2><p>整理一下 AMR最近几年来的实验结果：</p><table><thead><tr><th><strong>Data</strong></th><th><strong>Parser</strong></th><th><strong>Dev</strong></th><th><strong>Test</strong></th></tr></thead><tbody><tr><td>LDC2014T12</td><td>JAMR</td><td>–</td><td>58.2%</td></tr><tr><td>LDC2014T12</td><td>CAMR</td><td>–</td><td>66.5%</td></tr><tr><td>LDC2014T12</td><td>Zhou et al., 2016 EMNLP</td><td>–</td><td>66%</td></tr><tr><td>LDC2014T12</td><td>Wang et al., 2017 EMNLP</td><td>–</td><td>68.07%</td></tr><tr><td>LDC2014T12</td><td>SBMT (Pust, 2015 ACL)</td><td>–</td><td>67%</td></tr></tbody></table><h2 id="2-18-2-5"><a href="#2-18-2-5" class="headerlink" title="2-18-2-5"></a>2-18-2-5</h2><p>有一个很奇怪的现象, 利用 Biaffine LSTM Output充当上下文信息和利用产自于 Concept Identification LSTM Output, 虽然在给定 JAMR的 Concepts的基础之上, 两者的效果相差无几, 但是当使用预测得到的 Concepts的时候, 利用 Concept LSTM的效果要明显优于 Biaffine的 LSTM的结果.</p><h2 id="2018-2-3"><a href="#2018-2-3" class="headerlink" title="2018-2-3"></a>2018-2-3</h2><p>结论: 发现, 预测 Concept Label和 Concept共享参数是不会有什么明显的影响的. 试一试换一下梯度更新的算法? Adam?</p><h2 id="2018-2-2"><a href="#2018-2-2" class="headerlink" title="2018-2-2"></a>2018-2-2</h2><p>通过实验发现，Biaffine LSTM Output还是有作用的</p><table><thead><tr><th>____</th><th><strong>Concept Label Precision Compared w JAMR</strong></th><th><strong>Concept Precision Compared w JAMR</strong></th><th><strong>Path</strong></th></tr></thead><tbody><tr><td>w/o Biaffine</td><td>27089 / 29269 = 92.552</td><td>13214 / 16499 = 80.09</td><td></td></tr><tr><td>w Biaffine (Concept Label)</td><td>27115 / 29269 = 92.641</td><td>13294 / 16337 = 81.374</td><td>n174:~/KAMR/v1.4.28.7.3-exp</td></tr><tr><td>w Biaffine (Concept Label + Identification)</td><td>27089 / 29269 = 92.552</td><td>13374 / 16517 = 80.971</td><td></td></tr><tr><td>w Biaffine (Concept Label + Identification + concept table window 5)</td><td>27060 / 29269 = 92.453</td><td>13278 / 16432 = 80.806</td></tr></tbody></table><p><strong>结论:</strong>我们可以看到:</p><ol><li>Biaffine的结果对于 Concept Label的预测是有效果的, 但是对于之后的 Concept Identification并没有明显的提升的效果.</li><li>对于试图扩展 conceptTable, 从理论上来讲是可行的的, 但是从实际的效果来看, 反而有所下降, 感觉是很奇怪的一个现象.</li></ol><h2 id="2018-1-31"><a href="#2018-1-31" class="headerlink" title="2018-1-31"></a>2018-1-31</h2><p>自从发现了Bug，到现在，终于又有了一点的起色。<br>方法：对<strong>未在</strong> Concept Table中的 PREDICATE 进行 规则+FCL 处理，能够有所作用，最新的实验结果如下：</p><table><thead><tr><th>____</th><th><strong>Smatch FScore Dev</strong></th><th><strong>Smatch FScore Test</strong></th></tr></thead><tbody><tr><td>Baseline</td><td>64.00%</td><td>63.69%</td></tr><tr><td>规则+FCL</td><td>64.22%</td><td>64.10%</td></tr></tbody></table><h2 id="2018-1-21"><a href="#2018-1-21" class="headerlink" title="2018-1-21"></a>2018-1-21</h2><p>发现了一个比较严重的Bug，concept identification部分的时候，使用了 JAMR的concept label，所以原来的实验结果都偏高。现在就在原来的实验结果之上，重新跑一遍测试。</p><table><thead><tr><th>____</th><th><strong>Smatch FScore Dev</strong></th><th><strong>Smatch FScore Test</strong></th></tr></thead><tbody><tr><td>before</td><td>66.64%</td><td>66.83%</td></tr><tr><td>Fix Bug</td><td>64.00%</td><td>63.69%</td></tr></tbody></table><h3 id="加入-Biaffine-LSTM-Representation"><a href="#加入-Biaffine-LSTM-Representation" class="headerlink" title="加入 Biaffine LSTM Representation"></a>加入 Biaffine LSTM Representation</h3><p>考虑了一下，还是决定加入 Biaffine LSTM Representation，因为明显的发现，在 concept identification这一步骤中，concept label的预测是十分重要的，也可以是看做之后的工作的基础，而这一步的结果也并没有很理想。从之前的实验结果来看，实验结果相对于 JAMR略去了很多类似于主语 i的内容，将之识别为<strong>N</strong>。猜想，如果加入 Biaffine的信息，能够识别出来这是一个主语，应当就能够保留这一部分的内容，具体的效果还要从实验结果来看。</p><table><thead><tr><th><strong>Ideas</strong></th><th><strong>Concept FScore</strong></th></tr></thead><tbody><tr><td>在 concept label部分加入 biaffine lstm output</td><td>78.65%</td></tr><tr><td>在 concept identification部分加入 biaffine lstm output</td></tr></tbody></table><h2 id="2018-1-18"><a href="#2018-1-18" class="headerlink" title="2018-1-18"></a>2018-1-18</h2><p>在融合代码的时候，出现了一个问题，为什么对 concept进行测试的时候，准确率等指标会和训练的时候不一致？同样的代码，同样的环境，居然能够跑出相差挺大的实验结果？有随机的成份？可是哪里会有随机的成分？</p><h2 id="2018-1-9"><a href="#2018-1-9" class="headerlink" title="2018-1-9"></a>2018-1-9</h2><p>在修正了融合的代码之后，跑了几个实验：</p><table><thead><tr><th>____</th><th><strong>Smatch FScore Dev</strong></th></tr></thead><tbody><tr><td>merged, max pooling, update relation lstm loss</td><td></td></tr><tr><td>merged, max pooling, no update relation lstm loss</td><td></td></tr><tr><td>merged, minus, update relation lstm loss</td><td></td></tr><tr><td>merged, minus, no update relation lstm loss</td><td></td></tr><tr><td>no merged, minus, biaffine lstm</td></tr></tbody></table><h2 id="2018-1-8"><a href="#2018-1-8" class="headerlink" title="2018-1-8"></a>2018-1-8</h2><p>记录一些代码中，容易出现前后不一致的情况：</p><ol><li>BatchState中，使用的是 SumPooling还是 MaxPooling</li><li>Relation 中，一定要首先 sort concepts再进行后续的操作，抽取 states等等</li></ol><h2 id="2018-1-4"><a href="#2018-1-4" class="headerlink" title="2018-1-4"></a>2018-1-4</h2><p>记录一下最近发现的一些Bug：</p><ol><li>因为在 Relation Identification这一步骤需要首先对 JAMR识别出来的 concepts进行排序，而我先前写的排序算法是根据每一个 concept的 begin_index进行的，但是现在发现，在语聊中存在着2个 concepts的 begin_index是同一个的情况，这就导致了排序之后，同一个 concept会出现两次！所以在 delete的时候会出现内存错误的情况。这个 Bug对之前跑的实验都有一定的影响，正在重新跑实验进行验证!不需要验证，原来 Relation Identification步骤使用的函数的实现不一样，是对的。</li></ol><h2 id="2018-1-2"><a href="#2018-1-2" class="headerlink" title="2018-1-2"></a>2018-1-2</h2><p>测试一下在<strong>v1.4.25</strong> (加入了update the loss of the concept lstm in the other two models)模型的 concept lstm output的<strong>v1.3.2-train-max-pooling</strong>实验结果：</p><table><thead><tr><th><strong>KAMR iter</strong></th><th><strong>Smtach FScore Dev</strong></th><th><strong>Smatch FScore Test</strong></th></tr></thead><tbody><tr><td>5</td><td>65.95%</td><td>66.02%</td></tr><tr><td>10</td><td>66.61%</td><td>66.65%</td></tr><tr><td>20</td><td>66.64%</td><td>66.83%</td></tr></tbody></table><h2 id="2017-12-27"><a href="#2017-12-27" class="headerlink" title="2017-12-27"></a>2017-12-27</h2><p>将 concept identification stage’s lstm output得到两个模型 (concept identification, fcl)的 loss，并且更新， 直接在 Biaffine的 lstm output的实验来验证效果。</p><table><thead><tr><th><strong>KAMR</strong></th><th><strong>Smatch Fscore Dev</strong></th><th><strong>Smatch Fscore Test</strong></th></tr></thead><tbody><tr><td>v1.4.24</td><td>66.34%</td><td></td></tr><tr><td>同上+lstm loss update</td><td>66.66%</td><td>66.59%</td></tr></tbody></table><h2 id="2017-12-26"><a href="#2017-12-26" class="headerlink" title="2017-12-26"></a>2017-12-26</h2><p>处理一些可以使用规则处理的部分事情：date, time, person…</p><table><thead><tr><th><strong>KAMR</strong></th><th><strong>Smatch Fscore Dev</strong></th></tr></thead><tbody><tr><td>v1.4.22.2</td><td>66.14%</td></tr><tr><td>同上+date (Dev里面差不多有36个 date)</td><td>66.34%</td></tr></tbody></table><h2 id="2017-12-25"><a href="#2017-12-25" class="headerlink" title="2017-12-25"></a>2017-12-25</h2><p>Relation Identification w JAMR concepts and v1.4.22.2 concept lstm output on LDC2014T12的实验结果:<br><img src="/images/kamr/relationIdentification.bmp" alt="relation"><br>比较奇怪的是，从上面的结果中，并没有发现与之前的结论一致的地方（之前发现，iter=20(74.5%)与iter=40(77.8%)有明显的差距）。为什么这一次的几次实验结果都差不多？但是也没有达到78%？都可以达到77.5%左右。是因为加入了 NER信息的缘故？</p><table><thead><tr><th><strong>iter</strong></th><th><strong>relation identification</strong></th><th><strong>Dev</strong></th><th><strong>Test</strong></th></tr></thead><tbody><tr><td>10</td><td>77.35%</td><td>65.46%</td><td>65.37%</td></tr><tr><td>20</td><td>77.44%</td><td>65.67%</td><td>65.40%</td></tr><tr><td>30</td><td>77.49%</td><td>64.23%</td><td>63.52%</td></tr><tr><td>40</td><td>77.27%</td><td>59.98%</td><td>60.27%</td></tr></tbody></table><h3 id="测试-stemmer和-lemmatize"><a href="#测试-stemmer和-lemmatize" class="headerlink" title="测试 stemmer和 lemmatize"></a>测试 stemmer和 lemmatize</h3><p>在v1.4.24-debug中，分别测试 stemmer和 lemmatize作为 -NON-PREDICATE处理方法的效果：</p><table><thead><tr><th><strong>word lemmatize method</strong></th><th><strong>concept precision</strong></th></tr></thead><tbody><tr><td>lemmatize</td><td>80.47%</td></tr><tr><td>stemmer</td><td>79.72%</td></tr></tbody></table><h2 id="2017-12-18"><a href="#2017-12-18" class="headerlink" title="2017-12-18"></a>2017-12-18</h2><p>记录一下加入了 NER之后的相关实验结果。</p><table><thead><tr><th></th><th><strong>introduction</strong></th><th><strong>concept identification</strong></th><th><strong>relation identification</strong></th><th><strong>Final</strong></th></tr></thead><tbody><tr><td>FScore</td><td>将NER直接已embedding的形式加入</td><td>79.98%</td><td>78%(v1.3.2-test)</td><td>–%</td></tr><tr><td>FScore</td><td>同上+去除span==1的限制</td><td>80.32%</td><td>78%(v1.3.2-test)</td><td><strong>66.14%</strong></td></tr><tr><td>FScore</td><td>同上+强制根据NER选择FCL+去除span==1的限制</td><td>80.33%</td><td>78%(v1.3.2-test)</td><td>–%</td></tr><tr><td>FScore</td><td>同上+强制根据NER选择FCL+去除span==1的限制+oracle PREDICATE</td><td>81.15%</td><td>78%(v1.3.2-test)</td><td><strong>66.68%</strong></td></tr></tbody></table><table><thead><tr><th></th><th><strong>introduction</strong></th><th><strong>concept identification</strong></th><th><strong>relation identification</strong></th><th><strong>Final</strong></th></tr></thead><tbody><tr><td>FScore in Test</td><td>同上+强制根据NER选择FCL+去除span==1限制</td><td>80.40%</td><td>78%(v1.3.2-test)</td><td>65.93%</td></tr></tbody></table><p>从第二条结果，我们看到了很奇怪的现象，明明没有 concept identification的 FScore都还没有下面的80.82%来的高，但是 Pipeline结果却是出奇的好。为了验证一下结果的准确性，我重新跑了一下测试，发现结果是对的，这就很奇怪了。可能的解释：因为是 Pipeline的模式，可能加入了 NER信息的结果更加适合 downstream的代码，所以产生了更好的结果。</p><h2 id="2017-12-15"><a href="#2017-12-15" class="headerlink" title="2017-12-15"></a>2017-12-15</h2><p>将 stanford ner tagger处理完成的语料和之前的进行合并，这里记载一个比较重要的<font color="blue">人工修改</font>：</p><ol><li>在 Dev中，bolt12_64556_5620.8，因为句子最后有特殊字符，做 pos的时候，会漏掉一个，人工补上。</li><li>在生成的 fcls.gz里面，最后一个 polarity因为考虑不周到的原因，需要人工加入 place holder ‘X’</li></ol><font color="blue">发现一个问题：为什么当初加 char embedding的时候，没有加入到预测 boundary label的模型中？</font><table><thead><tr><th></th><th><strong>introduction</strong></th><th><strong>concept identification</strong></th><th><strong>relation identification</strong></th><th><strong>Final</strong></th></tr></thead><tbody><tr><td>FScore</td><td></td><td>79.98%</td><td>78%(v1.3.2-test)</td><td>–%</td></tr></tbody></table><h2 id="2017-12-13"><a href="#2017-12-13" class="headerlink" title="2017-12-13"></a>2017-12-13</h2><p>利用从 PropBaank里面提取出来的 frameset，融合进从 LDC2014 train里面提取的 conceptTable，直接进行训练，最终的 FScore又得到了一点提升：</p><table><thead><tr><th></th><th><strong>concept identification</strong></th><th><strong>relation identification</strong></th><th><strong>Final</strong></th></tr></thead><tbody><tr><td>FScore</td><td>80.82%</td><td>78%(v1.3.2-test)</td><td>65.39%</td></tr><tr><td>FScore(w/o oracle FCL PREDICATE)</td><td>79.88%</td><td>78%(v1.3.2-test)</td><td>64.79%</td></tr><tr><td>FScore(w/o oracle FCL PREDICATE, using stemmer’s concept)</td><td>80.00%</td><td>78%(v1.3.2-test)</td><td>64.87%</td></tr></tbody></table><p>表格中的三行的详细记录：</p><ol><li>在 concept identification部分，当在 FCL部分的时候，直接对 PREDICATE部分利用 oracle PREDICATE进行替代。</li><li>还是在和1. 相同的部分，不使用 oracle PREDICATE，直接赋值为空。</li><li>在预测的时候，如果一个 word没有能够找到它的 concept map，则尝试该 word的 stemmer，再次尝试查询是否存在 concept map，如果存在，则选择使用；否则，赋值为空。</li></ol><p>应该能够做一些提升：加入 NER的信息能够更加准确的识别出一些目前还判断错误的地名。</p><p>附 stemmer, lemmatizer地址：<br><a href="http://www.nltk.org/howto/stem.html" target="_blank" rel="noopener">stemmer</a>, <a href="https://pythonprogramming.net/lemmatizing-nltk-tutorial/" target="_blank" rel="noopener">lemmatizer</a></p><h2 id="2017-12-12"><a href="#2017-12-12" class="headerlink" title="2017-12-12"></a>2017-12-12</h2><p>采用了 lemmatize，对 PREDICATE进行处理：</p><table><thead><tr><th></th><th><strong>concept identification</strong></th><th><strong>relation identification</strong></th><th><strong>Final</strong></th></tr></thead><tbody><tr><td>FScore</td><td>80.35%</td><td>78%(v1.3.2-test)</td><td>65.04%</td></tr></tbody></table><p>但是还是采取了 oracle PREDICATE的做法。</p><h2 id="2017-12-11"><a href="#2017-12-11" class="headerlink" title="2017-12-11"></a>2017-12-11</h2><p>对 FCL进行了一些修改：1. 不再执行大小写转换，一律保留 word在句子中的形式；2. 对于 multi-concepts中包含 name字段的 placeholder部分进行填充的时候，在 word两端加上双引号。最新的实验结果如下：</p><table><thead><tr><th></th><th><strong>concept identification</strong></th><th><strong>relation identification</strong></th><th><strong>Final</strong></th></tr></thead><tbody><tr><td>FScore</td><td>78.31%</td><td>78%(v1.3.2-test)</td><td>63.93%</td></tr></tbody></table><p>使用的 relation identification部分的内容是有 biaffine output的，有两个原因使用这一部分的测试代码：</p><ol><li>biaffine output的模型可以随时拿来测试，并且和 concept identificaton的 lstm output模型的效能基本一样。</li><li>如果每一次修改一下 concept identification部分，都要根据这一部分的 lstm output重新训练一个 relation部分，有点拖沓。</li></ol><p>尝试了一个想法：如果利用 oracle PREDICATE暂时处理当前未在词典里面的 PREDICATE，FScore能够达到64.76%.</p><h2 id="2017-12-8"><a href="#2017-12-8" class="headerlink" title="2017-12-8"></a>2017-12-8</h2><p>Bug: 发现在进行 concept评价的时候，发现进行 concept number计数的时候，存在着一些问题：没有排除空白字符的情况，所以 predicted concepts的总数和正确的数目都是有问题的。更新了评价，发现没有加入 FCL之前的一些 FScore大都维持在77.52%。最近的粗糙的 FCL的FScore，78.15%。</p><h2 id="调研了lemmatize的相关内容"><a href="#调研了lemmatize的相关内容" class="headerlink" title="调研了lemmatize的相关内容"></a>调研了lemmatize的相关内容</h2><p>发现这一部分的内容只能在 NON-PREDICATE这一部分应用；在 PREDICATE这一部分并没有什么用。因为 PREDICATE这一部分大都是 verb+number 的组合，而 lemmatizer并没有这个功能 (non to verb)。</p><h1 id="将-sumpooling修改为-maxpooling的结果-2017-12-6"><a href="#将-sumpooling修改为-maxpooling的结果-2017-12-6" class="headerlink" title="将 sumpooling修改为 maxpooling的结果 (2017-12-6)"></a>将 sumpooling修改为 maxpooling的结果 (2017-12-6)</h1><table><thead><tr><th></th><th><strong>concept identification</strong></th><th><strong>relation identification</strong></th><th><strong>Final</strong></th></tr></thead><tbody><tr><td>FScore</td><td>81.3%</td><td>78%</td><td>60.48%</td></tr></tbody></table><p>从结果上来看，没有明显的变化。<br>fix the bug: when do the concept identification from the “B, I, E, S, O”, use the LSTM[<font color="blue">i</font>], actually the LSTM[<font color="blue">index</font>] is true where the index = i + begin_index !</p><h1 id="初步的实验结果-2017-12-5"><a href="#初步的实验结果-2017-12-5" class="headerlink" title="初步的实验结果 (2017-12-5)"></a>初步的实验结果 (2017-12-5)</h1><table><thead><tr><th></th><th><strong>concept identification</strong></th><th><strong>relation identification</strong></th><th><strong>Final</strong></th></tr></thead><tbody><tr><td>FScore</td><td>81.3%</td><td>78%</td><td>60.4%</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h1&gt;&lt;p&gt;新开一篇博客记录一下AMR Parser (KAMR)的开发经过&lt;br&gt;
    
    </summary>
    
    
      <category term="amr" scheme="http://yoursite.com/tags/amr/"/>
    
  </entry>
  
  <entry>
    <title>AMR-papers</title>
    <link href="http://yoursite.com/2017/11/20/AMR-papers/"/>
    <id>http://yoursite.com/2017/11/20/AMR-papers/</id>
    <published>2017-11-20T07:12:10.000Z</published>
    <updated>2019-01-21T13:49:53.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>新开一篇博客，记录在阅读AMR论文的时候的一些收获。<br><a id="more"></a></p><h1 id="论文列表以及收获"><a href="#论文列表以及收获" class="headerlink" title="论文列表以及收获"></a>论文列表以及收获</h1><h2 id="Parsing-English-into-Abstract-Meaning-Representation-Using-Syntax-Based-Machine-Translation"><a href="#Parsing-English-into-Abstract-Meaning-Representation-Using-Syntax-Based-Machine-Translation" class="headerlink" title="Parsing English into Abstract Meaning Representation Using Syntax-Based Machine Translation"></a>Parsing English into Abstract Meaning Representation Using Syntax-Based Machine Translation</h2><p>本片论文主要采用了SBMT的方法将English sentences转换成AMR。主要的工作在于，SBMT是一个机器翻译的框架，这个框架所需要的是一个Tree，而AMR Graph是一个有向图。所以，需要做一些Transformation：</p><ol><li>拆分具有多个节点的节点，但是因为这样子的结构过于“扁平”，所以效果不好</li><li>进一步转换，进行 concept reconstruct，role reconstruct等一系列的工作</li></ol><p>本文还建立了一个AMR的语言模型，采用了一些外部的语义资料<br>最终的Smtach FScore: 67%<br>值得注意的是，在使用了一些外部的tricks (data/number/name rules, semantic categories, morphological normalization, rule-based alignments)之前，该篇工作在2014的Dev上面的F值是62.3%</p><h2 id="Getting-the-Most-out-of-AMR-Parsing"><a href="#Getting-the-Most-out-of-AMR-Parsing" class="headerlink" title="Getting the Most out of AMR Parsing"></a>Getting the Most out of AMR Parsing</h2><p>本片论文主要处理了目前AMR Parsing的瓶颈问题：concept identification 和 alignment，本篇论文通过：</p><ol><li>建立一个基于双向LSTM的 concept分类器，通过利用丰富的上下文信息学习 AMR concept labels。FCL：对于具有多个 concept node的concept，我们根据 word和 concept leaf节点进行判断，如果 char个数大于4那么就进行 category操作，构成FCL。而对于谓语的情况，我们仅仅利用它的 sense tag? CNN-based Character-level Embedding，为了充分利用 character的信息，本文利用了窗口化的 character + CNN + Max Pooling构成一个词的 character，再加上 word embedding + NER embedding，构成双向 LSTM的input，即 concept identifier的输入。</li><li>然后通过扩展一个基于 HMM的 word-to-concept 对齐器，在 AMR Parsing的 decoding阶段起作用。</li></ol><h2 id="CU-NLP-at-SemEval-2016-Task-8-AMR-Parsing-using-LSTM-based-Recurrent-Neural-Networks"><a href="#CU-NLP-at-SemEval-2016-Task-8-AMR-Parsing-using-LSTM-based-Recurrent-Neural-Networks" class="headerlink" title="CU-NLP at SemEval-2016 Task 8: AMR Parsing using LSTM-based Recurrent Neural Networks"></a>CU-NLP at SemEval-2016 Task 8: AMR Parsing using LSTM-based Recurrent Neural Networks</h2><p>目的：得到怎么处理 FCL中 PREDICATE部分的方法<br>没有得到解决方案，论文没有那么详细。。<br>一些收获，在论文提到的评测中：语料是包含了 Alignments的。</p><h2 id="Neural-Semantic-Parsing-by-Character-based-Translation-Experiments-with-Abstract-Meaning-Representations"><a href="#Neural-Semantic-Parsing-by-Character-based-Translation-Experiments-with-Abstract-Meaning-Representations" class="headerlink" title="Neural Semantic Parsing by Character-based Translation: Experiments with Abstract Meaning Representations"></a>Neural Semantic Parsing by Character-based Translation: Experiments with Abstract Meaning Representations</h2><p>本文主要采用了机器翻译的技术来处理 AMR Parsing。其中，以 character做为基本单位，OpenNMT为模型，采用的数据是 LDC2016E25。本文还采用了很多其他的辅助方法用来提高这个基于机器翻译技术的 AMR Parsing：</p><ol><li>AMR Re-ordering：可以用来 argument训练数据</li><li>Introducting Super Characters：在 character-based技术中，并不完全全部地死板的以 character为单位。像 relation、pos这种信息，以其本身作为 character！</li><li>加入词性的信息，但是利用的并不是 stanford pos tagger，而是一个 POS-tagger of the C&amp;C tools (Clark et al.2003)。</li><li>加入了称之为 “Silver Standard Data”的额外的训练数据，在所有的提升方法中，这一种方法的提升最大，有10个点的提升。那么什么是 “Silver Standard Data”呢？其实，就是利用现有的模型 (JAMR, CAMR)对数据 the Groningen Meaning Bank (Basile et al. 2012)进行分析，然后通过阈值 (55%)进行提取。最后，通过选取适量 (包括选取 JAMR还是 CAMR产生的 Graph的问题)的数据进行训练语料的扩充，用来达到提升性能的目的，实际效果也是非常好。</li><li>对于模型的一些优化方法，设计机器翻译相关的一些专业知识。<br>这是第一篇在 LDC2016E25的数据。但是这个模型在 LDC2015E86的数据上面仍然稍微逊色于 5 bi-LSTM (Foland and Martin 2017)。通过这一篇论文，我大致还猜到 2016其实就是 2015数据的训练数据的扩充版本？但是很奇怪的是，这两年的数据现在在 AMR官网上面已经找不到了，目前只剩下了 2014和 2017，称为 1.0和 2.0。</li></ol><h2 id="Abstract-Meaning-Representation-Parsing-using-LSTM-Recurrent-Neural-Networks"><a href="#Abstract-Meaning-Representation-Parsing-using-LSTM-Recurrent-Neural-Networks" class="headerlink" title="Abstract Meaning Representation Parsing using LSTM Recurrent Neural Networks"></a>Abstract Meaning Representation Parsing using LSTM Recurrent Neural Networks</h2><p>本篇论文采用5个LSTM组成了Parser处理 AMR Parsing问题。下面简单介绍一下该篇论文提出的 Parser的大致流程。</p><ol><li>给定一个句子，利用 aligner进行处理，得到 word span和 concept的对应。</li><li>利用 word span就可以对每一个 word生成一个{I, O, B, E, S}标签，然后就可以利用这样的数据训练SG Network（SubGraph），子图扩展成为 concept在测试阶段。</li><li>预测 Args，Nargs，Attr，NCat四个模型。</li></ol><p>在2016的数据上面，该篇论文的F值达到了70.9%.（2016年的评测 semeval 2016 task 8）</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;新开一篇博客，记录在阅读AMR论文的时候的一些收获。&lt;br&gt;
    
    </summary>
    
    
      <category term="AMR" scheme="http://yoursite.com/tags/AMR/"/>
    
  </entry>
  
  <entry>
    <title>AMR</title>
    <link href="http://yoursite.com/2017/07/10/AMR/"/>
    <id>http://yoursite.com/2017/07/10/AMR/</id>
    <published>2017-07-10T13:29:22.000Z</published>
    <updated>2019-01-21T13:49:53.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>从现在开始，开启我的新方向、新征程！AMR Parsing！</p><h1 id="问题的一些基本概念"><a href="#问题的一些基本概念" class="headerlink" title="问题的一些基本概念"></a>问题的一些基本概念</h1><a id="more"></a><h2 id="AMR-Graph"><a href="#AMR-Graph" class="headerlink" title="AMR Graph"></a>AMR Graph</h2><p>AMR Graph is a <strong>rooted</strong>, <strong>directed</strong>, <strong>acyclic</strong> graph.</p><h3 id="数据样例"><a href="#数据样例" class="headerlink" title="数据样例"></a>数据样例</h3><p><img src="/images/amr/GraphStructureFile.png" alt="amr data file"><br><img src="/images/amr/sample.bmp" alt="amr graph"></p><h3 id="为什么需要alignment"><a href="#为什么需要alignment" class="headerlink" title="为什么需要alignment"></a>为什么需要alignment</h3><p>因为在AMR的数据中，我们仅仅只有一个pair，一个sentence以及其对应的AMR Graph。所以，从第一个任务(concept identification)来看，我们需要知道which span of words invoke which concept fragments in the amr graph。这个时候，就需要一个AMR Aligner的存在。<br><a href="https://github.com/jflanigan/jamr/blob/Semeval-2016/docs/Alignment_Format.md" target="_blank" rel="noopener">Alignment的格式</a><br>alignment是以AMR graph为基准的(顺序什么的，重要吗？)<br>评价alignment是需要人工的Gold alignment的，JAMR的Aligner也不能够得到100%的F值。</p><h3 id="利用stanford-pos-tagger进行词性标注"><a href="#利用stanford-pos-tagger进行词性标注" class="headerlink" title="利用stanford pos tagger进行词性标注"></a>利用stanford pos tagger进行词性标注</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -mx300m -classpath stanford-postagger.jar edu.stanford.nlp.tagger.maxent.MaxentTagger -model models/english-bidirectional-distsim.tagger -sentenceDelimiter newline -tokenize false -textFile ../../full-w-pos/amr-release-1.0-training-alignment-one-sentence-a-line.txt &gt; amr-release-1.0-training-alignment-w-pos.txt</span><br></pre></td></tr></table></figure><p>在处理词性的时候，发现stanford-postagger，会过度分词，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Freedom_NN of_IN speech_NN \_CD thought_NN ,_, if_IN people_NNS express_VBP a_DT view_NN somewhat_RB different_JJ than_IN the_DT traditional_JJ view_NN</span><br></pre></td></tr></table></figure></p><ol><li>其中的 speech\thought 就被分析成了 speech \ thought 三个词，然后标成了三个词性。</li><li>etc.<em>NN .</em>. ,多分析出来了一个英文句号。。。</li></ol><p>人工修复</p><h4 id="记录MKL的有时候没有使用"><a href="#记录MKL的有时候没有使用" class="headerlink" title="记录MKL的有时候没有使用"></a>记录MKL的有时候没有使用</h4><p>在敲完代码后，使用和GN3Parser同样的Makefile进行编译，发现eigen居然利用不了MKL，后来有相当一段长的时间使用不了MKL。到后来发现新的服务器（126.172, 126.173）都不能够利用MKL，最后实在没办法，讲代码copy到m175上进行编译和运行，发现可以完美的运行和利用MKL；然后再将m175上面的代码和实验copy到新服务器上，make clean + make，发现同样可以使用MKL，玄学！</p><h3 id="KAMR可能需要继续进行修改的一些地方"><a href="#KAMR可能需要继续进行修改的一些地方" class="headerlink" title="KAMR可能需要继续进行修改的一些地方"></a>KAMR可能需要继续进行修改的一些地方</h3><ol><li>agenda的初始化长度，设置太小可能导致内存错误</li><li>特征部分仍然需要继续修改</li></ol><h3 id="JAMR的一些明显错误"><a href="#JAMR的一些明显错误" class="headerlink" title="JAMR的一些明显错误"></a>JAMR的一些明显错误</h3><h4 id="concept的分割重复"><a href="#concept的分割重复" class="headerlink" title="concept的分割重复"></a>concept的分割重复</h4><p>句子id：nw.wsj_0003.17，node：0.1.0.2.0.1.0.0.0.1.0.0<br>12-30 和 29-30 重复<br>这个问题将会导致两个问题：</p><ol><li>在给定“正确”的concept用以产生AMR Graph的时候，会出现重复的node。</li><li>在做Concept Identification的时候，会产生一些标签上的错误！对于标签上面的错误，将错就错？</li></ol><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>初步smath F值:50%</p><h4 id="第一阶段代码的初步说明："><a href="#第一阶段代码的初步说明：" class="headerlink" title="第一阶段代码的初步说明："></a>第一阶段代码的初步说明：</h4><ol><li>v1.4.4， Concept Identification，利用Train进行训练，并且进行测试，产生predicted concepts。</li><li>v1.3.2， Relation Identification，利用Train以及正确的Concept进行模型的训练，产生模型。</li><li>v1.3.3， 在v1.3.2的基础之上修改了读取文件的格式，利用1.3.2训练好的模型进行Relation Identification。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;从现在开始，开启我的新方向、新征程！AMR Parsing！&lt;/p&gt;
&lt;h1 id=&quot;问题的一些基本概念&quot;&gt;&lt;a href=&quot;#问题的一些基本概念&quot; class=&quot;headerlink&quot; title=&quot;问题的一些基本概念&quot;&gt;&lt;/a&gt;问题的一些基本概念&lt;/h1&gt;
    
    </summary>
    
    
      <category term="AMR" scheme="http://yoursite.com/tags/AMR/"/>
    
  </entry>
  
  <entry>
    <title>SemanticKnowledgeResearch</title>
    <link href="http://yoursite.com/2017/05/12/SemanticKnowledgeResearch/"/>
    <id>http://yoursite.com/2017/05/12/SemanticKnowledgeResearch/</id>
    <published>2017-05-12T04:09:38.000Z</published>
    <updated>2019-01-21T13:49:53.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>因为Parsing的需要，现开始调研Semantic Knowledge相关的知识，做一些记录。:)</p><a id="more"></a><h1 id="2-外部词典的应用"><a href="#2-外部词典的应用" class="headerlink" title="2. 外部词典的应用"></a>2. 外部词典的应用</h1><p>《Parsing the Penn Chinese Treebank with Semantic Knowledge》</p><ol><li>从两个外部词典抽取类型 (category)和启发式规则 (heuristic rules).</li><li>在抽取出的类别的基础之上建立一个用于优先选择的子模型</li></ol><p>有效解决：</p><ol><li>nominal compund, coordination and POS tagging ambiguity</li><li>alleviate the data sparseness<h2 id="2-1-抽取语义类别-Semantic-Categories"><a href="#2-1-抽取语义类别-Semantic-Categories" class="headerlink" title="2.1 抽取语义类别 (Semantic Categories)"></a>2.1 抽取语义类别 (Semantic Categories)</h2>外部词典：HowNet and TongYiCi CiLin（同义词词林）<h3 id="HowNet"><a href="#HowNet" class="headerlink" title="HowNet"></a>HowNet</h3>语义类别 == 义位 (sememe)。通过不同类别之间的上下位关系，我们可以抽取具有不同粒度等级的语义类别。我们仅仅使用词的第一定义（定义：每一个词有很多的定义 definitions）<h3 id="CiLin"><a href="#CiLin" class="headerlink" title="CiLin"></a>CiLin</h3>每一个节点代表一个语义类别，总计有三个类别，类别总计有 (12-97-1400种)<h3 id="HowNet-CiLin"><a href="#HowNet-CiLin" class="headerlink" title="HowNet + CiLin"></a>HowNet + CiLin</h3>以HowNet为主，CiLin为辅。如果有一个word在HowNet里面没有找到，但是在CiLin里面找到了，我们会找这个word的同义词，然后使用这个同义词在HowNet当中的类别 (category)。<h3 id="Heuristic-Rules-HR"><a href="#Heuristic-Rules-HR" class="headerlink" title="Heuristic Rules (HR)"></a>Heuristic Rules (HR)</h3>启发式规则。使用简单的启发式规则识别数字和时间表达式。<h2 id="2-2-建立一个基于类-Class-Based-的优先选择子模型"><a href="#2-2-建立一个基于类-Class-Based-的优先选择子模型" class="headerlink" title="2.2 建立一个基于类 (Class-Based)的优先选择子模型"></a>2.2 建立一个基于类 (Class-Based)的优先选择子模型</h2>使用从语义词典当中抽取的类别 (classes)对head和modifier的语义弧进行建模。建立一个类似bilexical-class的子模型</li></ol><h1 id="我们利用HowNet的过程"><a href="#我们利用HowNet的过程" class="headerlink" title="我们利用HowNet的过程"></a>我们利用HowNet的过程</h1><p>记录一下我们利用HowNet的过程：</p><ol><li>首先，利用API，将CONLL09的中文数据，所有的词，在API里面都查找一遍，找出能够找到的定义 (Definition)，并计数</li><li>写一个Python脚本，利用字典合并所有的相同的定义</li><li>统计HowNet覆盖的词的数量，并且得到相同定义不同词的文本文件。<br>统计的结果如下：</li></ol><table><thead><tr><th></th><th><strong>Words</strong></th><th><strong>HN1</strong></th><th><strong>HN2</strong></th><th><strong>HN2+CL</strong></th></tr></thead><tbody><tr><td>Words in train</td><td>40878</td><td>22207</td><td>22206</td><td>23787</td></tr><tr><td>Words in dev</td><td>8497</td><td>6270</td><td>6270</td><td>6493</td></tr><tr><td>Words in test</td><td>11196</td><td>8183</td><td>8183</td><td>8510</td></tr><tr><td>Classes in train</td><td>-</td><td>1562</td><td>465</td><td>465</td></tr><tr><td>Classes in dev</td><td>-</td><td>1094</td><td>391</td><td>392</td></tr><tr><td>Classes in test</td><td>-</td><td>1200</td><td>411</td><td>411</td></tr></tbody></table><p>在抽取HN2的时候，我发现以下两个问题：</p><ol><li>有一个义项：Entity|实体，已经是最顶层的的义项了，并没有再上一层的义项了，所以默认它本身就是上一层义项。</li><li>还有一个义项：Attribute|属性，并没有再上一层的义项了。</li><li>从上面的数据中，我们看到，其实Train数据集的覆盖率还是挺低的；输出了数据，但是我发现词频都很低2次的很多（可能是1次，不确定抽取word的时候，有没有重复，明天确定一下TODO）</li><li>在Dev中的words，6270；和Train重合的部分，5694；在Test中的words，8183.和Train重合的部分，7116<br><img src="/images/Semantic/CoNLL09-Train-HN2.png" alt="CoNLL09-Train-HN2"><h3 id="HowNet-聚类-2017-7-1"><a href="#HowNet-聚类-2017-7-1" class="headerlink" title="HowNet+聚类(2017-7-1)"></a>HowNet+聚类(2017-7-1)</h3>因为在调用HowNet的过程中，我们发现了语料中存在着大量的词没有HN2，而且这些词基本都是低频词，所以我们希望利用聚类来弥补这个HN2的缺失。<br>在Train、Dev、Test三个语料中，总计有21630种词没有HN2，利用聚类之后，只剩下9种词没有HN2.<br>下面记录详细的实验结果。</li></ol><table><thead><tr><th><strong>Corpus</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>81.10%</td><td>77.50%</td><td>Greedy</td><td>gpu-no-1:~/GN3Parser-beta/3.9.5.1-w-HN2+Word-cluster</td></tr><tr><td>Test</td><td>81.22%</td><td>77.55%</td><td>Greedy</td><td>gpu-no-1:~/GN3Parser-beta/3.9.5.1-w-HN2+Word-cluster</td></tr><tr><td>Dev</td><td>84.66%</td><td>81.15%</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/3.9.5.1-w-HN2+Word-cluster</td></tr><tr><td>Test</td><td>84.90%</td><td>81.38%</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/3.9.5.1-w-HN2+Word-cluster</td></tr></tbody></table><h3 id="HowNet细化词性的工作-2017-6-25"><a href="#HowNet细化词性的工作-2017-6-25" class="headerlink" title="HowNet细化词性的工作(2017-6-25)"></a>HowNet细化词性的工作(2017-6-25)</h3><p>我们尝试了一个工作，利用HowNet抽取语料里面的词的HN2，再按照词性进行分类，合并。<br>实验结果：</p><table><thead><tr><th><strong>Bias</strong></th><th><strong>Corpus</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th></tr></thead><tbody><tr><td>120</td><td>Dev</td><td>78.11%</td><td>74.14%</td></tr><tr><td>120</td><td>Test</td><td>79.68%</td><td>75.75%</td></tr><tr><td>200</td><td>Dev</td><td>75.61%</td><td>70.98%</td></tr><tr><td>200</td><td>Test</td><td>78.32%</td><td>74.14%</td></tr></tbody></table><h3 id="HowNet-with-GN3Parser实验-2017-6-4"><a href="#HowNet-with-GN3Parser实验-2017-6-4" class="headerlink" title="HowNet with GN3Parser实验(2017-6-4)"></a>HowNet with GN3Parser实验(2017-6-4)</h3><p>我们尝试利用HowNet的知识，组织相关的实验。如何利用HowNet？在GN3Parser中，抽取每一个word的时候，会同时抽取该word的HN2，HN2的相关信息在上面已经给出。我们设置HN2的维度为50维，以embedding的方式加入到Parser中。</p><table><thead><tr><th><strong>Corpus</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>80.66%</td><td>77.03%</td><td>Greedy</td><td>gpu-no-1:~/GN3Parser-beta/debug-3.9.5.1</td></tr><tr><td>Test</td><td>81.11%</td><td>77.39%</td><td>Greedy</td><td>gpu-no-1:~/GN3Parser-beta/debug-3.9.5.1</td></tr><tr><td>Dev</td><td>84.48%</td><td>80.98%</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/debug-3.9.5.1-global</td></tr><tr><td>Test</td><td>84.62%</td><td>81.10%</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/debug-3.9.5.1-global</td></tr><tr><td>Dev</td><td>81.19%</td><td>77.57%</td><td>Greedy</td><td>gpu-no-1:~/GN3Parser-beta/3.9.5.1-w-<strong>HN2+CL</strong></td></tr><tr><td>Test</td><td>81.28%</td><td>77.53%</td><td>Greedy</td><td>gpu-no-1:~/GN3Parser-beta/3.9.5.1-w-<strong>HN2+CL</strong></td></tr><tr><td>Dev</td><td>84.53%</td><td>81.19%</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/3.9.5.1-w-<strong>HN2+CL</strong></td></tr><tr><td>Test</td><td>84.75%</td><td>81.28%</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/3.9.5.1-w-<strong>HN2+CL</strong></td></tr></tbody></table><p>(<font color="red">这些实验的代码有问题，所以实验结果忽略不计，也是错误的</font>)</p><table><thead><tr><th><strong>Corpus</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>79.32%</td><td>75.43%</td><td>Only train HN2, Greedy</td><td>gpu-no-1:~/GN3Parser-beta/debug-4.0</td></tr><tr><td>Test</td><td>80.14%</td><td>76.14%</td><td>Only train HN2, Greedy</td><td>gpu-no-1:~/GN3Parser-beta/debug-4.0</td></tr><tr><td>Dev</td><td>79.24%</td><td>75.33%</td><td>merged HN2, Greedy</td><td>gpu-no-1:~/GN3Parser-beta/4.0-w-mergeHN2</td></tr><tr><td>Test</td><td>80.19%</td><td>76.20%</td><td>merged HN2, Greedy</td><td>gpu-no-1:~/GN3Parser-beta/4.0-w-mergeHN2</td></tr><tr><td>Dev</td><td>82.88%</td><td>79.15%</td><td>merged HN2, Global</td><td>gpu-no-1:~/GN3Parser-beta/4.0-w-mergeHN2</td></tr><tr><td>Test</td><td>82.97%</td><td>79.05%</td><td>merged HN2, Global</td><td>gpu-no-1:~/GN3Parser-beta/4.0-w-mergeHN2</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h1&gt;&lt;p&gt;因为Parsing的需要，现开始调研Semantic Knowledge相关的知识，做一些记录。:)&lt;/p&gt;
    
    </summary>
    
    
      <category term="semantic knowledge" scheme="http://yoursite.com/tags/semantic-knowledge/"/>
    
  </entry>
  
  <entry>
    <title>GN3Parser-POS</title>
    <link href="http://yoursite.com/2017/05/09/GN3Parser-POS/"/>
    <id>http://yoursite.com/2017/05/09/GN3Parser-POS/</id>
    <published>2017-05-09T01:35:27.000Z</published>
    <updated>2019-01-21T13:49:53.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这个工作是做的POS Tagging。因为在词性句法联合模型中，遇到了阻力。从模型输出的结果来看，词性的Accuracy明显低于我们在GN3Parser中利用的自动词性的Accuracy。所以，我们暂停了Joint-GN3Parser的工作，暂时全面的重现Google论文的词性结果。<br><a id="more"></a></p><h1 id="确定模型的输入"><a href="#确定模型的输入" class="headerlink" title="确定模型的输入"></a>确定模型的输入</h1><ol><li>在Google论文中，提到了一些输入： word，cluster，character n-gram up to length 3，the tag predicted for the previous 4 tokens</li><li>我们目前使用的输入：word，character n-gram up to lenght 2，the tag predicted for the previous 4 tokens.</li></ol><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p>目前我们最好的实验结果在Greedy过程中比Google论文中的结果(94.56%)还差0.3%.<br><strong>Dev数据集</strong></p><table><thead><tr><th><strong>comments</strong></th><th><strong>POS</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>w/o previous 4 predicted tags</td><td>94.62%</td><td>gpu-no-1:~/GN3Parser-POS/debug-v0.2</td></tr><tr><td>w previous 4 predicted tags</td><td>94.60%</td><td>gpu-no-1:~/GN3Parser-POS/debug-v0.3</td></tr></tbody></table><p><strong>Test数据集</strong></p><table><thead><tr><th><strong>comments</strong></th><th><strong>POS</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>w/o previous 4 predicted tags</td><td>94.21%</td><td>gpu-no-1:~/GN3Parser-POS/debug-v0.2</td></tr><tr><td>w previous 4 predicted tags</td><td>94.28%</td><td>gpu-no-1:~/GN3Parser-POS/debug-v0.3</td></tr></tbody></table><p><img src="/images/GN3Parser-POS/gn3parser-pos.bmp" alt="POS-Accuracy"></p><p>目前的Global实验我已经跑过，beam大小设置成和Google论文中一样8，但是实验结果一直不可以，不论怎样调参，差不多收敛的时候，POS Accuracy都是只能够达到94.2%左右，完全赶不上Greedy的效果；已经确认过代码，目前看不到什么问题。</p><h1 id="5-fold实验"><a href="#5-fold实验" class="headerlink" title="5-fold实验"></a>5-fold实验</h1><p>跑了POS的5-fold的实验：gpu-no-1:~/n-fold/n-fold<br>train: 95.01%  |dev: 94.60%  |test: 94.29%</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;这个工作是做的POS Tagging。因为在词性句法联合模型中，遇到了阻力。从模型输出的结果来看，词性的Accuracy明显低于我们在GN3Parser中利用的自动词性的Accuracy。所以，我们暂停了Joint-GN3Parser的工作，暂时全面的重现Google论文的词性结果。&lt;br&gt;
    
    </summary>
    
    
      <category term="work" scheme="http://yoursite.com/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>Joint-GN3Parser工程</title>
    <link href="http://yoursite.com/2017/04/05/Joint-GN3Parser%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/04/05/Joint-GN3Parser工程/</id>
    <published>2017-04-05T06:10:53.000Z</published>
    <updated>2019-01-21T13:49:53.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Joint-GN3Parser工程"><a href="#Joint-GN3Parser工程" class="headerlink" title="Joint-GN3Parser工程"></a>Joint-GN3Parser工程</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Joint-GN3Parser是GN3Parser的一个变种,基于GN3Parser做的一个联合词性句法分析的项目.<br><a id="more"></a></p><h2 id="相关实验的记录"><a href="#相关实验的记录" class="headerlink" title="相关实验的记录"></a>相关实验的记录</h2><h3 id="加入了Load-pretrained-Model的功能-2017-5-27"><a href="#加入了Load-pretrained-Model的功能-2017-5-27" class="headerlink" title="加入了Load pretrained Model的功能 (2017-5-27)"></a>加入了Load pretrained Model的功能 (2017-5-27)</h3><p>因为Joint-GN3Parser的效果一直不是很好，所以考虑，利用训练好的GN3Parser-POS和GN3Parser的两个模型，作为pretrained model，初始化Joint-GN3Parser。看看效果如何？同时也发现了Joint-GN3Parser中的一个bug，在Shift动作之后，在POS动作的情况下，获取当前的标注的词性的word index的时候，获取的还是State._j所以，是存在着问题的，因为_j始终都是队列中queue0的位置，而现在需要进行词性标注的是stack0的位置。在修正了这个bug，之后，我发现UAS还是没有什么变化。以下便是这一版本代码的效果记录：<br><strong>Greedy</strong></p><table><thead><tr><th><strong>comments</strong></th><th><strong>Corpus</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>without pretrained model</td><td>Dev</td><td>94.15%</td><td>80.22%</td><td>75.98%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.9</td></tr><tr><td>without pretrained model</td><td>Test</td><td>94.08%</td><td>80.12%</td><td>76.07%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.9</td></tr><tr><td>with pretrained model</td><td>Dev</td><td>94.33%</td><td>80.71%</td><td>76.79%</td><td>gpu-no-1:~/Joint-GN3Parser/1.9-w-pretrained-model</td></tr><tr><td>with pretrained model</td><td>Test</td><td>94.07%</td><td>80.76%</td><td>76.69%</td><td>gpu-no-1:~/Joint-GN3Parser/1.9-w-pretrained-model</td></tr></tbody></table><p><strong>Global</strong></p><table><thead><tr><th><strong>comments</strong></th><th><strong>Corpus</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>without pretrained model</td><td>Dev</td><td>94.54%</td><td>83.63%</td><td>79.92%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.9</td></tr><tr><td>without pretrained model</td><td>Test</td><td>94.36%</td><td>83.56%</td><td>79.76%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.9</td></tr><tr><td>with pretrained model</td><td>Dev</td><td>94.50%</td><td>83.55%</td><td>79.88%</td><td>gpu-no-1:~/Joint-GN3Parser/1.9-w-pretrained-model</td></tr><tr><td>with pretrained model</td><td>Test</td><td>94.09%</td><td>83.43%</td><td>79.66%</td><td>gpu-no-1:~/Joint-GN3Parser/1.9-w-pretrained-model</td></tr></tbody></table><h3 id="修正了抽取Left-Label时的错误-2017-5-15"><a href="#修正了抽取Left-Label时的错误-2017-5-15" class="headerlink" title="修正了抽取Left_Label时的错误 (2017-5-15)"></a>修正了抽取Left_Label时的错误 (2017-5-15)</h3><p>因为在GN3Parser中，抽取Left_arc 和 Left_label的特征是一样的，这两个action是同时执行的，所以这两个动作的特征模板时一样的；但是在联合模型中，将Left_arc 和Left_label两个动作拆开了，首先执行Left_arc，那么栈里面的元素就会有变化，所以Left_label抽取出来的特征就和原来的不一样了。所以需要修正。<br>（<font color="red">log已经覆盖</font>）</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>0.05</td><td>93.89%</td><td>79.87%</td><td>75.82%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.8</td></tr><tr><td>Test</td><td>0.05</td><td>93.63%</td><td>79.69%</td><td>75.42%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.8</td></tr></tbody></table><p>从实验结果来看，非但Parsing的结果没有得到很好的提升，连POS的准确率都下降了不少，觉着与预想的不合，很奇怪；应该不是代码的问题，就修改了一点点代码。需要验证一下抽取特征的代码和predict的时候代码。<br>在写GN3Parser分为三个模型的时候，发现了一个bug，在right_label的操作：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">next-&gt;action = action</span><br></pre></td></tr></table></figure></p><p>这一部分的代码错误，应当是ac！这样子就把right_arc这一个动作直接复制到了action里面，以后所有的动作都会是right_label！！！但是这个bug好像没有影响？因为在Joint模型中，有奇数步和偶数步的作用。<br>我们看对应的Global的实验结果。（在正确的Feature List的结果下）(2017-5-17)</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>0.03</td><td>94.26%</td><td>83.46%</td><td>79.92%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.8</td></tr><tr><td>Test</td><td>0.03</td><td>93.95%</td><td>83.69%</td><td>79.76%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.8</td></tr></tbody></table><h3 id="增加了prefix和suffix-length-1的特征用作POS-2017-5-10"><a href="#增加了prefix和suffix-length-1的特征用作POS-2017-5-10" class="headerlink" title="增加了prefix和suffix, length=1的特征用作POS(2017-5-10)"></a>增加了prefix和suffix, length=1的特征用作POS(2017-5-10)</h3><p>因为在GN3Parser-POS中，POS准确率达到了94.2%在test数据集上，所以，尝试将POS特征集合(<strong>Greedy</strong>)。</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>0.03</td><td>94.16%</td><td>79.59%</td><td>75.25%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.7-greedy-eta-0.03</td></tr><tr><td>Dev</td><td>0.05</td><td>94.08%</td><td>79.91%</td><td>75.48%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.7-greedy-eta-0.05</td></tr><tr><td>Dev</td><td>0.08</td><td>93.98%</td><td>79.16%</td><td>74.66%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.7</td></tr><tr><td>Test</td><td>0.03</td><td>94.00%</td><td>79.79%</td><td>75.31%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.7-greedy-eta-0.03</td></tr><tr><td>Test</td><td>0.05</td><td>93.92%</td><td><strong>80.06%</strong></td><td>75.59%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.7-greedy-eta-0.05</td></tr><tr><td>Test</td><td>0.08</td><td>93.94%</td><td>79.72%</td><td>75.18%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.7</td></tr></tbody></table><h3 id="修改POS的相关特征-2017-4-30"><a href="#修改POS的相关特征-2017-4-30" class="headerlink" title="修改POS的相关特征(2017-4-30)"></a>修改POS的相关特征(2017-4-30)</h3><p>再次调研SyntaxNet的词性标注的特征模板，发现其不仅仅使用了Word Embedding，还使用了Char Embedding，使用了前缀和后缀，length=2<br>另外，我貌似发现了为什么GPU服务器上面编译就不能使用MKL加速，乃是因为不知道为什么在GPU服务器上面编译的时候，main总不是最有一个编译的，编译顺序有点不对。</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev   (64;8;8-128)</td><td>0.08</td><td>79.91%</td><td>75.27%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.5.3</td></tr><tr><td>Test  (64;8;8-128)</td><td>0.08</td><td>80.19%</td><td>75.49%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.5.3　</td></tr><tr><td>Dev   (64;50;50-200;200)</td><td>0.08</td><td>80.12%</td><td>75.49%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.5.4</td></tr><tr><td>Test  (64;50;50-200;200)</td><td>0.08</td><td>80.32%</td><td>75.63%</td><td>gpu-no-1:~/Joint-GN3Parser/debug-v1.5.4</td></tr></tbody></table><h3 id="修改词性Embedding的使用-2017-4-29"><a href="#修改词性Embedding的使用-2017-4-29" class="headerlink" title="修改词性Embedding的使用(2017-4-29)"></a>修改词性Embedding的使用(2017-4-29)</h3><p>一个想法：将模型预测出来的词性和1-best词性使用同一套embedding，测试这样子的模型效果如何(实验完)</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>0.05</td><td>79.91%</td><td>75.35%</td><td>m175 ~/Joint-GN3Parser/v1.5.2-greedy-eta-0.05</td></tr><tr><td>Dev</td><td>0.08</td><td>79.85%</td><td>75.34%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.2-greedy-eta-0.08</td></tr><tr><td>Dev(Bad hyper parameter)</td><td>0.12</td><td>30%</td><td></td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.2-greedy-eta-0.12</td></tr><tr><td>Test</td><td>0.05</td><td><strong>80.36%</strong></td><td><strong>75.61%</strong></td><td>m175 ~/Joint-GN3Parser/v1.5.2-greedy-eta-0.05</td></tr><tr><td>Test</td><td>0.08</td><td>80.10%</td><td>75.40%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.2-greedy-eta-0.08</td></tr><tr><td>Test</td><td>0.12</td><td></td><td></td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.2-greedy-eta-0.12</td></tr></tbody></table><p>在v1.5.2-greedy-eta-0.05得到的Greedy模型的前提下，我们进行了Global的实验，实验结果如下：(2017-5-2)</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>0.01</td><td>82.09%</td><td>78.05%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.2-global-eta-0.01</td></tr><tr><td>Test</td><td>0.01</td><td>82.51%</td><td>78.23%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.2-global-eta-0.01</td></tr><tr><td>Dev</td><td>0.03</td><td>82.80%</td><td>78.65%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.2-global-eta-0.03</td></tr><tr><td>Test</td><td>0.03</td><td>83.26%</td><td>79.02%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.2-global-eta-0.03</td></tr></tbody></table><p>从实验结果来看，在将1-best词性添加到特征模板里面，又使用同一套词性Embedding，Global的结果并没有得到很好的改善。反而没有原先的来得高（UAS：84.10%，不使用1-best词性，不知道是什么的原因）</p><h3 id="再添加预测POS的相关特征-2017-4-26"><a href="#再添加预测POS的相关特征-2017-4-26" class="headerlink" title="再添加预测POS的相关特征 (2017-4-26)"></a>再添加预测POS的相关特征 (2017-4-26)</h3><p>用于POS预测的特征模板如下图所示：<br><img src="/images/Joint-GN3Parser/FeatureTemplates-POS.bmp" alt="FeatureTemplates"></p><p>首先记录一下加入了额外特征用作POS的效果，Greedy(现在模型跑得越来越慢)<br><strong>结论</strong>:在添加了State里面的相关特征之后，模型的效果反而变差了，一定程度上面可以说明我们添加的这几个特征是无效的、或者说是效果更差的(2017-4-30)</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>0.05</td><td>78.00%</td><td>73.06%</td><td>m175 ~/Joint-GN3Parser/v1.5.1-greedy-eta-0.08</td></tr><tr><td>Test</td><td>0.05</td><td>78.61%</td><td>73.65%</td><td>m175 ~/Joint-GN3Parser/v1.5.1-greedy-eta-0.08</td></tr><tr><td>Dev</td><td>0.08</td><td>77.04%</td><td>71.98%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.1-greedy-eta-0.08</td></tr><tr><td>Test</td><td>0.08</td><td>77.79%</td><td>72.62%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5.1-greedy-eta-0.08</td></tr></tbody></table><p>从目前的结果来看，我们添加的几个用于POS的特征，反而起到了反作用。UAS反而降低了，可能是超参没有调整好，也有可能添加的几个特征就是不会有很好的效果。。</p><h3 id="添加了1-best-词性特征的效果-2017-4-25"><a href="#添加了1-best-词性特征的效果-2017-4-25" class="headerlink" title="添加了1-best 词性特征的效果 (2017-4-25)"></a>添加了1-best 词性特征的效果 (2017-4-25)</h3><p>在尝试了将Joint-GN3Parser的模型按照功能分隔开之后，我们还尝试了将1-best tags词性加入到模型中，分别在Atomic Model, Left Label, Right Label抽取特征的时候，在词性特征的里面加上1-best tags的信息。所以，总共的磁性特征的总数为15 + 18 = 33.使用的Atomic、Left Label、Right Label的特征模板如下图所示：</p><p><img src="/images/Joint-GN3Parser/FeatureTemplates-w-auto-tags-features.bmp" alt="FeatureTemplates"><br>记录一下在Greedy训练过程中，相关结果。</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev Corpus</td><td>0.03</td><td>79.41%</td><td>75.11%</td><td>m175 ~/Joint-GN3Parser/v1.5-greedy-eta-0.03</td></tr><tr><td>Dev Corpus</td><td>0.05</td><td>79.95%</td><td>75.34%</td><td>m175 ~/Joint-GN3Parser/v1.5-greedy-eta-0.05</td></tr><tr><td>Dev Corpus</td><td>0.08</td><td>79.46%</td><td>75.12%</td><td>m175 ~/Joint-GN3Parser/v1.5-greedy</td></tr><tr><td>Test Corpus</td><td>0.03</td><td>79.93%</td><td>75.44%</td><td>m175 ~/Joint-GN3Parser/v1.5-greedy-eta-0.03</td></tr><tr><td>Test Corpus</td><td>0.05</td><td>80.00%</td><td>75.42%</td><td>m175 ~/Joint-GN3Parser/v1.5-greedy-eta-0.05</td></tr><tr><td>Test Corpus</td><td>0.08</td><td><strong>80.12%</strong></td><td><strong>75.57%</strong></td><td>m175 ~/Joint-GN3Parser/v1.5-greedy</td></tr><tr><td>eta设置不对，实验直接kill</td><td>0.12</td><td>30%</td><td>3%</td><td>m175 ~/Joint-GN3Parser/v1.5-greedy-eta-0.12</td></tr></tbody></table><p>暂时使用了Test数据集80.03%那个模型、进行Global的实验。(2017-4-29)</p><table><thead><tr><th><strong>comments</strong></th><th><strong>eta</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>Dev Corpus 文件夹名字忘记修改了～</td><td>0.01</td><td>82.70%</td><td>78.66%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5-global-eta-0.03</td></tr><tr><td>Test Corpus</td><td>0.01</td><td>83.20%</td><td>79.10%</td><td>gpu-no-1:~/Joint-GN3Parser/v1.5-global-eta-0.03</td></tr><tr><td>Dev Corpus</td><td>0.03</td><td>83.07%</td><td>78.99%</td><td>m175 ~/Joint-GN3Parser/v1.5-global-eta-0.03</td></tr><tr><td>Test Corpus</td><td>0.03</td><td>83.53%</td><td>79.32%</td><td>m175 ~/Joint-GN3Parser/v1.5-global-eta-0.03</td></tr></tbody></table><h3 id="Joint-GN3Parser-beam-size的影响"><a href="#Joint-GN3Parser-beam-size的影响" class="headerlink" title="Joint-GN3Parser beam size的影响"></a>Joint-GN3Parser beam size的影响</h3><p>因为现在想起来现在Global的实验beam size = 32，但是先前GN3Parser得到最好的效果的beam size = 64</p><table><thead><tr><th><strong>Comments</strong></th><th><strong>Beam Size</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>32</td><td>84.31%</td><td>80.70%</td><td>m175 ~/GN3Parser-beta/chinese-global-beam-32-fix-save-model</td></tr><tr><td>GN3Parser移除3个queue POS特征</td><td>32</td><td>83.73%</td><td>79.94%</td><td>m175 ~/GN3Parser-beta/3.8-debug</td></tr><tr><td>Joint-GN3Parser</td><td>32</td><td>83.61%</td><td>79.56%</td><td>m175 ~/Joint-GN3Parser/v1.3.1-global-eta-0.03</td></tr><tr><td>GN3Parser</td><td>64</td><td>84.60%</td><td>81.02%</td><td>gpu-no-1:~/GN3Parser-beta/global_v_3.5</td></tr><tr><td>GN3Parser移除3个queue POS特征（没有该实验）</td><td>64</td><td></td><td></td><td></td></tr><tr><td>Joint-GN3Parser</td><td>64</td><td>84.10%</td><td>80.03%</td><td>m175 ~/Joint-GN3Parser/v1.3.1-global-eta-0.03-beam-64</td></tr></tbody></table><h3 id="Joint-GN3Parser的情况说明-2017-4-14"><a href="#Joint-GN3Parser的情况说明-2017-4-14" class="headerlink" title="Joint-GN3Parser的情况说明(2017-4-14)"></a>Joint-GN3Parser的情况说明(2017-4-14)</h3><p>在确定的新的架构之后,着手改变原先的架构,新的架构的代码的Greedy部分已经编写完成,进行了初步的实验.<br>有一些实验数据,记录如下:</p><ol><li>统计了在Conll09的Chinese的数据当中,通过依存句法分析,得到的各种的States的数量,其中,我将POP_ROOT, SHIFT, LEFT_ARC, RIGHT_ARC 统称为Atomic States.</li></ol><table><thead><tr><th><strong>Atomic States</strong></th><th><strong>POS States</strong></th><th><strong>Left Label</strong></th><th><strong>Right Label</strong></th></tr></thead><tbody><tr><td>1240397</td><td>609060</td><td>361100</td><td>247960</td></tr></tbody></table><ol start="2"><li><p>现在我阐述一下我几个Classifier的简单实现情况:atomic, left label, right label classifier的模型、抽取的特征等内容与GN3Parser完全一致，采取48个特征。但是POS classifier有所区别，在预测词性的时候，我们目前采用window size = 3的特征，所以在POS classifier中，我们的输入是7个word embedding的组合，模型的 hidden layer size和前面提到的atomic等模型一致，激活函数等都是一样的。</p></li><li><p>几个实验记录（汇报的均是Test数据集的结果）：</p></li></ol><table><thead><tr><th><strong>comments</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>a batch:20\10\6\4 除以state总数 <em>Greedy</em> 没有加greedy 非法操作排除</td><td>92.93%</td><td>79.49%</td><td>71.95%</td><td>m175 ~/Joint-GN3Parser/v1.3-greedy-eta-0.12</td></tr><tr><td>a batch:20\10\6\4 除以state总数 <em>Greedy</em> 没有加greedy 非法操作排除 eta = 0.16</td><td>92.71%</td><td>79.08%</td><td>71.52%</td><td>m175 ~/Joint-GN3Parser/v1.3-greedy-eta-0.16</td></tr><tr><td>a batch:20\10\6\4 除以state总数 <em>Greedy</em></td><td>92.85%</td><td>79.28%</td><td>74.78%</td><td>m175 ~/Joint-GN3Parser/v1.3.2-greedy-eta-0.12</td></tr><tr><td>a batch:32\32\32\32 除以single state bath=32 <em>Greedy</em></td><td>92.89%</td><td>79.76%</td><td>75.22%</td><td>m175 ~/Joint-GN3Parser/v1.3.3-greedy-eta-0.12</td></tr><tr><td><font color="blue"><em>Global</em></font></td><td>93.77%</td><td>83.64%</td><td>79.59%</td><td>m175 ~/Joint-GN3Parser/v1.3.1-global-eta-0.01</td></tr></tbody></table><p>(一下有关Joint-GN3Parser的实验中，全部都是使用的老的架构)记录最初的几个实验(这里只汇报dev的结果，如果test的结果有明显的提升，单独汇报)：<br>在这几个试验中，超参都没有调试，都是沿用的原来的GN3Parser中的参数，除了batch有所调整外。</p><table><thead><tr><th><strong>position</strong></th><th><strong>comments</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th></tr></thead><tbody><tr><td>m175 ~/Joint-GN3Parser/debug-v1.0</td><td>该版本的实验的测试windown size=2的特征for POS，并且，batch为100\50\30\20</td><td>77.70%</td><td>69.76%</td></tr><tr><td>m175 ~/Joint-GN3Parser/1.0-test-batch</td><td>该版本的实验window size=2， batch为20\10\6\4</td><td>77.52%</td><td>69.79%</td></tr><tr><td>m175 ~/Joint-GN3Parser/debug-v1.1</td><td>window size=3, batch=20\10\6\4</td><td>77.81%</td><td>70.11%</td></tr><tr><td>m175 ~/Joint-GN3Parser/debug-1.2</td><td>window size=3, batch=20\10\6\4, 还使用了前面三个word 的tag</td><td>52.40%</td><td>37.36%</td></tr></tbody></table><p>从上面的几个实验来看，我发现了几个很奇怪的现象：</p><ol><li>batch的调整几乎没有带来任何的影响？连速度的影响都没有？已经确定不是代码的问题。我想可能的几个原因是：<ol><li>其实模型的计算，在Greedy过程的时间消耗中，占用的时间比例很少；</li><li>MKL的处理速度都快，仅仅5倍的数据根本体现不出来速度的差别</li></ol></li><li>为什么添加了词性特征后，UAS变得低得离谱？参数问题？还是词性的错误传递效果更大了？</li></ol><h3 id="初步调参（以下说明的实验结果都是老的架构的结果，将POS和其他的一些操作全部放在了同一个模型中）"><a href="#初步调参（以下说明的实验结果都是老的架构的结果，将POS和其他的一些操作全部放在了同一个模型中）" class="headerlink" title="初步调参（以下说明的实验结果都是老的架构的结果，将POS和其他的一些操作全部放在了同一个模型中）"></a>初步调参（以下说明的实验结果都是老的架构的结果，将POS和其他的一些操作全部放在了同一个模型中）</h3><p>因为baseline的结果不是很好,考虑到是不是参数的问题,现在做一个初步的调参,从实验结果来看,eta = 0.01的收敛过程和最终的效果要比 eta = 0.03 好很多.<br><strong>Global Dev</strong></p><table><thead><tr><th><strong>comments</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>eta = 0.03</td><td>93.71%</td><td>81.86%</td><td>78.28%</td><td>m175 ~/Joint-GN3Parser/debug-v0.3.1-global</td></tr><tr><td>eta = 0.01</td><td>93.89%</td><td>82.26%</td><td>78.67%</td><td>m175 ~/Joint-GN3Parser/debug-v0.3.1-global-eta-0.01</td></tr></tbody></table><p><strong>Global Test</strong></p><table><thead><tr><th><strong>comments</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>eta = 0.03</td><td>93.59%</td><td>82.34%</td><td>78.65%</td><td>m175 ~/Joint-GN3Parser/debug-v0.3.1-global</td></tr><tr><td>eta = 0.01</td><td>93.78%</td><td><strong>82.84%</strong></td><td>79.08%</td><td>m175 ~/Joint-GN3Parser/debug-v0.3.1-global-eta-0.01</td></tr></tbody></table><h3 id="baseline"><a href="#baseline" class="headerlink" title="baseline"></a>baseline</h3><p>这里的baseline如下描述:<br>基于GN3Parser的一个词性句法联合模型,在GN3Parser的基础之上,去掉了48个特征中,queue的4个特征;修改了抽取特征的相关情况,在有关POS的特征,都是使用的模型预测出来(SHIFT_T)的词性.在评价中,我们还给出了POS的Accuracy.<br><strong>Greedy</strong></p><table><thead><tr><th><strong>comments</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>baseline development</td><td>93.24%</td><td>79.48%</td><td>75.76%</td><td>m175 ~/Joint-GN3Parser/debug-v0.3.1</td></tr><tr><td>baseline test</td><td>93.28%</td><td>79.68%</td><td>75.85%</td><td>m175 ~/Joint-GN3Parser/debug-v0.3.1</td></tr><tr><td>GN3Parser移除了3个词性特征 development</td><td>–</td><td>80.46%</td><td>76.68%</td><td>m175 ~/GN3Parser-beta/3.8-debug</td></tr><tr><td>GN3Parser移除了3个词性特征 test</td><td>–</td><td>80.33%</td><td>76.45%</td><td>m175 ~/GN3Parser-beta/3.8-debug</td></tr></tbody></table><p><strong>Global</strong></p><table><thead><tr><th><strong>comments</strong></th><th><strong>POS</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>baseline development</td><td>93.71%</td><td>81.86%</td><td>78.28%</td><td>m175 ~/Joint-GN3Parser/debug-v0.3.1-global</td></tr><tr><td>baseline test</td><td>93.59%</td><td>82.34%</td><td>78.65%</td><td>m175 ~/Joint-GN3Parser/debug-v0.3.1-global</td></tr><tr><td>GN3Parser移除了3个词性特征 development</td><td>–</td><td>83.59%</td><td>79.98%</td><td>m175 ~/GN3Parser-beta/3.8-debug</td></tr><tr><td>GN3Parser移除了3个词性特征 test</td><td>–</td><td>83.73%</td><td>79.94%</td><td>m175 ~/GN3Parser-beta/3.8-debug</td></tr></tbody></table><h2 id="一些比较容易忘记的代码部分"><a href="#一些比较容易忘记的代码部分" class="headerlink" title="一些比较容易忘记的代码部分"></a>一些比较容易忘记的代码部分</h2><ol><li>需要确保ROOT,UNKNOWN,NULL这三个在抽取词典的时候在最后.</li><li>如何将id 和 相对应的POS or Label对应起来?应用第一条规则,因为在抽词典的时候,会在词典的后面人为的加上”ROOT,UNKNOWN,NULL”(抽取特征的时候,会用到),所以在进行神经网络输出层的相关判断以及转换的时候,需要把最后几个开除掉,这个通过_g_num_null实现,很容易可以从代码中看出来.</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Joint-GN3Parser工程&quot;&gt;&lt;a href=&quot;#Joint-GN3Parser工程&quot; class=&quot;headerlink&quot; title=&quot;Joint-GN3Parser工程&quot;&gt;&lt;/a&gt;Joint-GN3Parser工程&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Joint-GN3Parser是GN3Parser的一个变种,基于GN3Parser做的一个联合词性句法分析的项目.&lt;br&gt;
    
    </summary>
    
    
      <category term="work" scheme="http://yoursite.com/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>GN3Parser工程</title>
    <link href="http://yoursite.com/2017/02/18/GN3Parser%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/02/18/GN3Parser工程/</id>
    <published>2017-02-18T01:20:20.000Z</published>
    <updated>2019-01-21T13:49:53.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>开此博客记录在开发GN3Parser(重现SyntaxNet)过程中的一些问题(已经重现成功！！！)</p><a id="more"></a><h2 id="中文实验的一些说明"><a href="#中文实验的一些说明" class="headerlink" title="中文实验的一些说明"></a>中文实验的一些说明</h2><h3 id="中文embedding："><a href="#中文embedding：" class="headerlink" title="中文embedding："></a>中文embedding：</h3><p>中文的embedding，利用Giga数据、word2vec，15次迭代，300dim，进行训练，训练完成的embedding位于：<br>qrxia@m172 ~/data/giga/giga-300-dim</p><h3 id="实验总结-2017-5-10"><a href="#实验总结-2017-5-10" class="headerlink" title="实验总结(2017-5-10)"></a>实验总结(2017-5-10)</h3><p>已经重现了SyntaxNet，GN3Parser的实验数据总结如下：<br><img src="/images/GN3Parser/GN3Parser实验数据.png" alt="ExperimentResults"></p><p>可能是我们英文的Beam Size大小设置小了，所以英文效果才不行<br>补充的英文实验 (beam size = 64): (2017-5-12)</p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Global</td><td></td><td></td><td>Dev</td><td>m173 ~/GN3Parser-beta/baidu-1024-beam-size-64</td></tr><tr><td>GN3Parser</td><td>Global</td><td></td><td></td><td>Test</td><td>m173 ~/GN3Parser-beta/baidu-1024-beam-size-64</td></tr></tbody></table><h3 id="利用GN3Parser-POS-5-fold实验的数据进行GN3Parser的实验-2017-5-22"><a href="#利用GN3Parser-POS-5-fold实验的数据进行GN3Parser的实验-2017-5-22" class="headerlink" title="利用GN3Parser-POS 5-fold实验的数据进行GN3Parser的实验(2017-5-22)"></a>利用GN3Parser-POS 5-fold实验的数据进行GN3Parser的实验(2017-5-22)</h3><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Greedy</td><td>80.48%</td><td>76.66%</td><td>Dev with NN autoPOS</td><td>gpu-no-1:~/GN3Parser-beta/3.9.9-w-NN-autoPOS</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>80.32%</td><td>76.34%</td><td>Test with NN autoPOS</td><td>gpu-no-1:~/GN3Parser-beta/3.9.9-w-NN-autoPOS</td></tr><tr><td>GN3Parser</td><td>Global</td><td>82.77%</td><td>78.95%</td><td>Dev</td><td>gpu-no-1:~/GN3Parser-beta/3.9.9-w-NN-autoPOS</td></tr><tr><td>GN3Parser</td><td>Global</td><td>83.11%</td><td>79.12%</td><td>Test</td><td>gpu-no-1:~/GN3Parser-beta/3.9.9-w-NN-autoPOS</td></tr></tbody></table><h3 id="查看百度方面提供的POS的准确率-2017-5-17"><a href="#查看百度方面提供的POS的准确率-2017-5-17" class="headerlink" title="查看百度方面提供的POS的准确率(2017-5-17)"></a>查看百度方面提供的POS的准确率(2017-5-17)</h3><p>Train: 94.78% | Dev: 94.33% | Test: 94.23%</p><h3 id="验证NN-POS-Tagger的词性是否真的不好使-2017-6-3"><a href="#验证NN-POS-Tagger的词性是否真的不好使-2017-6-3" class="headerlink" title="验证NN POS Tagger的词性是否真的不好使(2017-6-3)"></a>验证NN POS Tagger的词性是否真的不好使(2017-6-3)</h3><p>因为在GN3Parser的后来的版本代码中，GN3Parser-POS输出的词性在Parsing效果中并不是很好。我怀疑是代码中可能存在着bug，所以，跑一个验证实验。利用v3.9.5版本代码（该版本代码在百度提供的数据上面效果是正常的），处理了相关的数据，看一下是否我的词性真的不行？！（明明我的词性效果要好于百度提供的词性）</p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Greedy</td><td>80.99%</td><td>77.31%</td><td>Dev</td><td>m175 ~/GN3Parser-beta/3.9.5-w-NN-POS</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>80.90%</td><td>77.01%</td><td>Test</td><td>m175 ~/GN3Parser-beta/3.9.5-w-NN-POS</td></tr><tr><td>GN3Parser</td><td>Global</td><td>84.35%</td><td>80.91%</td><td>Dev</td><td>m175 ~/GN3Parser-beta/3.9.5-w-NN-POS</td></tr><tr><td>GN3Parser</td><td>Global</td><td>84.33%</td><td>80.72%</td><td>Test</td><td>m175 ~/GN3Parser-beta/3.9.5-w-NN-POS</td></tr></tbody></table><p>src-v3.9.8的代码应该都是可以的。因为从下面的试验中，我们可以看出来，效果还是在预想中的。<br>经过查看相关的代码，我发现，src-v3.9.9的代码还是沿用的“精简”Label的特征，但是应该不会造成这么严重的影响。正在做相关的实验进行验证。(2017-6-5)</p><table><thead><tr><th><strong>Corpus</strong></th><th><strong>method</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>Dev</td><td>Greedy</td><td>80.99%</td><td>77.31%</td><td>baidu data</td><td>m175 ~/GN3Parser-beta/3.9.5-w-NN-POS</td></tr><tr><td>Test</td><td>Greedy</td><td>80.90%</td><td>77.01%</td><td>baidu data</td><td>m175 ~/GN3Parser-beta/3.9.5-w-NN-POS</td></tr><tr><td>Dev</td><td>Global</td><td>84.35%</td><td>80.91%</td><td>baidu data</td><td>m175 ~/GN3Parser-beta/3.9.5-w-NN-POS</td></tr><tr><td>Test</td><td>Global</td><td>84.33%</td><td>80.72%</td><td>baidu data</td><td>m175 ~/GN3Parser-beta/3.9.5-w-NN-POS</td></tr><tr><td>Dev</td><td>Greedy</td><td>79.22%</td><td>75.25%</td><td>3.9.9 baidu data</td><td>gpu-no-1:~/GN3Parser-beta/3.9.9-w-baidu-data</td></tr><tr><td>Test</td><td>Greedy</td><td>80.34%</td><td>76.24%</td><td>3.9.9 baidu data</td><td>gpu-no-1:~/GN3Parser-beta/3.9.9-w-baidu-data</td></tr><tr><td>Dev</td><td>Greedy</td><td>79.24%</td><td>75.36%</td><td>3.9.9.1 baidu data</td><td>m175 ~/GN3Parser-beta/3.9.9.1-w-baidu-data</td></tr><tr><td>Test</td><td>Greedy</td><td>79.81%</td><td>75.80%</td><td>3.9.9.1 baidu data</td><td>m175 ~/GN3Parser-beta/3.9.9.1-w-baidu-data</td></tr><tr><td>Dev</td><td>Greedy</td><td>79.24%</td><td>75.36%</td><td>3.9.9.2 baidu data</td><td>m175 ~/GN3Parser-beta/3.9.9.2-w-baidu-data</td></tr><tr><td>Test</td><td>Greedy</td><td>79.80%</td><td>75.80%</td><td>3.9.9.2 baidu data</td><td>m175 ~/GN3Parser-beta/3.9.9.2-w-baidu-data</td></tr></tbody></table><h3 id="将GN3Parser修改成3个模型-2017-5-16"><a href="#将GN3Parser修改成3个模型-2017-5-16" class="headerlink" title="将GN3Parser修改成3个模型(2017-5-16)"></a>将GN3Parser修改成3个模型(2017-5-16)</h3><p>因为联合模型的需要，我们尝试将原先的GN3Parser拆分为3个模型，分别进行Action的预测，总计分为以下三个模型：Atomic Model (POP_ROOT, SHIFT, LEFT_ARC, RIGHT_ARC), Left_label Model, Right_label Model.</p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>position</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Greedy</td><td>–</td><td>–</td><td>Dev w correct feature list</td><td>m175 ~/GN3Parser-beta/debug-3.9.5</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>80.90%</td><td>76.94%</td><td>Dev w error feature list</td><td>m175 ~/GN3Parser-beta/debug-3.9.6</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>–</td><td>–</td><td>Test w correct feature list</td><td>m175 ~/GN3Parser-beta/debug-3.9.5</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>81.00%</td><td>77.00%</td><td>Test w error feature list</td><td>m175 ~/GN3Parser-beta/debug-3.9.6</td></tr><tr><td>GN3Parser</td><td>Global</td><td>84.45%</td><td>80.91%</td><td>Dev w correct feature list</td><td>m175 ~/GN3Parser-beta/debug-3.9.5</td></tr><tr><td>GN3Parser</td><td>Global</td><td><strong>84.76%</strong></td><td><strong>81.12%</strong></td><td>Test w correct feature list</td><td>m175 ~/GN3Parser-beta/debug-3.9.5</td></tr></tbody></table><p>上面的打上横线的实验结果log被覆盖掉了～</p><h3 id="对Label的特征模板的测试-2017-5-19"><a href="#对Label的特征模板的测试-2017-5-19" class="headerlink" title="对Label的特征模板的测试(2017-5-19)"></a>对Label的特征模板的测试(2017-5-19)</h3><p>在以前的实验中，我们发现一个貌似“错误”的现象：在我们将GN3Parser拆分成三个模型的过程中，因为没有考虑到Arc的影响，即在做完Arc操作之后(Left Arc, Right Arc)，栈里面的位置已经发生了变化，但是我们没有考虑到这个情况，如果还是沿用原来的特征抽取函数，那么就会出现抽取的特征并不是我们原来想要使用的特征。但是，结果表明，即便我们抽取“错误”的Label 特征模板，Parser的效果并没有很大的下降 (Greedy)。于是，我们便思考，这是为何？最有可能的就是，无论是“正确”的Label的特征模板，还是“错误”的特征模板，都包含了必要的信息for Label action，于是，我们尝试了精简特征模板，尝试了下列的实验：<br><img src="/images/GN3Parser/FeatureTemplates-Label.bmp" alt="LabelFeatureTemplates"></p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th><th><strong>Position</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Greedy</td><td>80.72%</td><td>76.92%</td><td>Dev 1024*1024</td><td>m175 ~/GN3Parser-beta/3.9.7-1024</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>81.11%</td><td>77.30%</td><td>Test 1024*1024</td><td>m175 ~/GN3Parser-beta/3.9.7-1024</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>80.37%</td><td>76.57%</td><td>Dev 200*200</td><td>m175 ~/GN3Parser-beta/3.9.8-200</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>80.70%</td><td>76.76%</td><td>Test 200*200</td><td>m175 ~/GN3Parser-beta/3.9.8-200</td></tr><tr><td>GN3Parser</td><td>Global</td><td>84.10%</td><td>80.47%</td><td>Dev 1024*1024</td><td>gpu-no-1:~/GN3Parser-beta/3.9.8-1024</td></tr><tr><td>GN3Parser</td><td>Global</td><td>84.42%</td><td>80.71%</td><td>Test 1024*1024</td><td>gpu-no-1:~/GN3Parser-beta/3.9.8-1024</td></tr></tbody></table><p>从实验的结果来看，我们“精简”之后的Label特征并没有导致明显的效果下降；但是，仍旧没有达到之前的水平！(2017-5-24)</p><h3 id="特征的使用"><a href="#特征的使用" class="headerlink" title="特征的使用"></a>特征的使用</h3><p>特征的使用如下图所示,总计有48个特征.<br><img src="/images/GN3Parser/FeatureTemplates.bmp" alt="FeatureTemplates"></p><h3 id="统一的实验汇报"><a href="#统一的实验汇报" class="headerlink" title="统一的实验汇报"></a>统一的实验汇报</h3><p>中文:(<strong>已经达到了Google论文的结果</strong>)<br>中文的全部数据都是projective的,因为在SyntaxNet上面,并没有能够重现Google论文结果,所以下面中文的数据中,并没有SyntaxNet的相关信息:<br><strong>Dev</strong>:</p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Greedy</td><td>m175 ~/GN3Parser-beta/baidu-conll-09-chinese</td><td>81.32%</td><td>77.68%</td><td>Greedy Dev w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>gpu-no-1:~/GN3Parser-beta/greedy_v_3.5</td><td>81.24%</td><td>77.10%</td><td>Greedy Dev w k best tags</td></tr><tr><td>GN3Parser</td><td>Global</td><td>m175 ~/GN3Parser-beta/chinese-global-beam-32-fix-save-model</td><td>84.07%</td><td>80.54%</td><td>Global Dev w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/global_v_3.5</td><td>84.58%</td><td>81.07%</td><td>Global Dev w k best tags</td></tr></tbody></table><p><strong>Test</strong>:</p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Greedy</td><td>m175 ~/GN3Parser-beta/chinese-global-beam-32-fix-save-model</td><td>81.31%</td><td>77.60%</td><td>Greedy Test w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>gpu-no-1:~/GN3Parser-beta/greedy_v_3.5</td><td><strong>81.72%</strong></td><td><strong>78.14%</strong></td><td>Greedy Test w/ k best tags</td></tr><tr><td>Google论文</td><td>Greedy</td><td></td><td>81.29%</td><td>77.29%</td><td>Greedy Test w/ k best tags</td></tr><tr><td>GN3Parser</td><td>Global</td><td>m175 ~/GN3Parser-beta/chinese-global-beam-32-fix-save-model</td><td>84.31%</td><td>80.70%</td><td>Global Test w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/global_v_3.5</td><td><strong>84.60%</strong></td><td><strong>81.02%</strong></td><td>Global Test w/ k best tags</td></tr><tr><td>Google论文</td><td>Global</td><td></td><td><strong>84.72%</strong></td><td>80.85%</td><td>Global Test w/ k best tags</td></tr></tbody></table><p>中文补充的几个实验, beam size的影响<br><strong>w/o k best tags</strong></p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Global</td><td>m175 ~/GN3Parser-beta/chinese-global-beam-32-fix-save-model</td><td>84.07%</td><td>80.54%</td><td>Global <strong>Dev</strong> w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Global</td><td>m172 ~/GN3Parser-beta/3.7-chinese-beam-<strong>64</strong></td><td><strong>84.33%</strong></td><td><strong>80.82%</strong></td><td>Global <strong>Dev</strong> w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Global</td><td>m175 ~/GN3Parser-beta/chinese-global-beam-32-fix-save-model</td><td>84.31%</td><td>80.70%</td><td>Global <strong>Test</strong> w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Global</td><td>m172 ~/GN3Parser-beta/3.7-chinese-beam-<strong>64</strong></td><td><strong>84.87%</strong></td><td><strong>81.17%</strong></td><td>Global <strong>Test</strong> w/o k best tags</td></tr></tbody></table><p><strong>w k best tags</strong></p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/global_v_3.5</td><td>84.58%</td><td>81.07%</td><td>Global <strong>Dev</strong> w k best tags, beam size=32</td></tr><tr><td>GN3Parser</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/global_v_3.5</td><td><strong>84.60%</strong></td><td><strong>81.02%</strong></td><td>Global <strong>Test</strong> w/ k best tags, beam size=32</td></tr><tr><td>GN3Parser</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/global_v_3.5_beam_64</td><td>84.45%</td><td>81.04%</td><td>Global <strong>Dev</strong> w/ k best tags, beam size=64</td></tr><tr><td>GN3Parser</td><td>Global</td><td>gpu-no-1:~/GN3Parser-beta/global_v_3.5_beam_64</td><td><strong>84.78%</strong></td><td><strong>81.16%</strong></td><td>Global <strong>Test</strong> w/ k best tags, beam size=64</td></tr></tbody></table><h4 id="探究正交分布初始化weight的影响-2017-4-12"><a href="#探究正交分布初始化weight的影响-2017-4-12" class="headerlink" title="探究正交分布初始化weight的影响(2017-4-12)"></a>探究正交分布初始化weight的影响(2017-4-12)</h4><p>从下面的实验结果可以看出来, orthogonality weight于我们的GN3Parser并没有什么用处.因为Global过程已经和parameter没有什么关系,所以,这里,我们仅仅跑了Greedy的实验.</p><table><thead><tr><th><strong>model</strong></th><th><strong>method</strong></th><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>Greedy</td><td>m175 ~/GN3Parser-beta/orthogonality-3.9</td><td>80.99%</td><td>77.40%</td><td>greedy <strong>dev</strong> w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>m175 ~/GN3Parser-beta/baidu-conll-09-chinese</td><td>81.32%</td><td>77.68%</td><td>Greedy Dev w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>m175 ~/GN3Parser-beta/orthogonality-3.9</td><td>81.16%</td><td>77.42%</td><td>greedy <strong>test</strong> w/o k best tags</td></tr><tr><td>GN3Parser</td><td>Greedy</td><td>m175 ~/GN3Parser-beta/chinese-global-beam-32-fix-save-model</td><td>81.31%</td><td>77.60%</td><td>Greedy Test w/o k best tags</td></tr></tbody></table><p>英文:<br>英文数据:</p><table><thead><tr><th></th><th><strong>train</strong></th><th><strong>dev</strong></th><th><strong>test</strong></th></tr></thead><tbody><tr><td>Total sentences</td><td>39832</td><td>1700</td><td>2416</td></tr><tr><td>Projective sentences</td><td>39793</td><td>1697</td><td>2415</td></tr><tr><td>NonProjective sentences</td><td>39</td><td>3</td><td>1</td></tr></tbody></table><p>下面的数据中,train,dev 采用projective部分; test 采用total数据<br><strong>Dev数据集的效果</strong>:</p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>m173 ~/GN3Parser-beta/baidu-1024-div-batch-size-eta-0.01</td><td>93.10%</td><td>90.90%</td><td>Greedy Dev</td></tr><tr><td>gpu-no-1:~/SyntaxNet/models/syntaxnet/nndep_baidu_data_1024_w_embedding_baidu_config</td><td>92.90%</td><td>–</td><td>Greedy Dev</td></tr><tr><td>m173 ~/GN3Parser-beta/baidu-1024-div-batch-size-eta-0.01</td><td>94.22%</td><td>92.05%</td><td>Global Dev</td></tr><tr><td>gpu-no-1:~/SyntaxNet/models/syntaxnet/nndep_baidu_data_1024_w_embedding_baidu_config</td><td>94.19%</td><td>–</td><td>Global Dev</td></tr></tbody></table><p><strong>Test数据集的效果</strong>:</p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>LAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/GN3Parser-beta/baidu-1024-div-batch-size-eta-0.01</td><td>92.78%</td><td>90.64%</td><td>Greedy Test; 代码,模型copy from 173上述目录,173太挤了!</td></tr><tr><td>gpu-no-1:~/SyntaxNet/models/syntaxnet/nndep_baidu_data_1024_w_embedding_baidu_config</td><td>92.59%</td><td>–</td><td>Greedy Test</td></tr><tr><td>Google论文</td><td>92.95%</td><td>91.02%</td><td></td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/baidu-1024-div-batch-size-eta-0.01</td><td>93.79%</td><td>91.74%</td><td>Global Test; 代码,模型copy from 173上述目录,173太挤了!</td></tr><tr><td>gpu-no-1:~/SyntaxNet/models/syntaxnet/nndep_baidu_data_1024_w_embedding_baidu_config</td><td>93.76%</td><td>–</td><td>Global Test</td></tr><tr><td>Google论文</td><td>94.61%</td><td>92.79%</td></tr></tbody></table><h3 id="实验数据记录"><a href="#实验数据记录" class="headerlink" title="实验数据记录"></a>实验数据记录</h3><p>在工程的进行过程中，会记录实验数据<br>important: <em>SyntaxNet的测试数据都是不包含标点的</em><br>有些实验已经移到当前目录的bak文件夹下面了!</p><h4 id="2017-3-28"><a href="#2017-3-28" class="headerlink" title="2017-3-28"></a>2017-3-28</h4><p>除了昨日发现的config文件中的一个毛病,我们还发现了数据中的一个问题,虽说是使用k best tags, 但是语料中的CRF模型给出句子的TOP-K词性序列中,每一个word可能含有5个k best tags,但是它们的POS是一样的.也就是说,在原来我写的代码里面,在最后面的prob会覆盖掉最前面的prob,也就是prob最大的那一个,昨天修正了这个错误,在提取k best tags的时候,仅仅保留相同POS的第一个prob,也就是score最高的那一个.并且做了Greedy的实验;但是由此也会产生一些问题,如”5 best tags”,如果当前word包含相同的POS,那么也就不能满足”5”这个条件.</p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/GN3Parser-beta/greedy_v_3.5</td><td>81.24%</td><td>with SyntaxNet config and option</td></tr></tbody></table><h4 id="2017-3-27"><a href="#2017-3-27" class="headerlink" title="2017-3-27"></a>2017-3-27</h4><p>SyntaxNet英文实验: decay_steps: 4500(greedy); 150(global)</p><p>GN3Parser:在修复了bug(config文件中没有配置decay steps)之后,貌似k best tags还是没有什么用啊…</p><table><thead><tr><th><strong>w/l best tags</strong></th><th><strong>w/o k best tags</strong></th></tr></thead><tbody><tr><td>83.80%</td><td>83.94%</td></tr></tbody></table><p>目前最好的两个Global实验,分别为包含k best tags和不包含k best tags</p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>use k best tags</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/exp-src-3.0-global-83.94</td><td>83.94%</td><td>No</td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/test-version-3.4-global</td><td>83.80%</td><td>Yes</td></tr></tbody></table><h4 id="2017-3-26"><a href="#2017-3-26" class="headerlink" title="2017-3-26"></a>2017-3-26</h4><p>应该找到bug,在什么地方了.一个很小的,几乎被忽略的地方,decay_steps的初始化,因为decay_steps被初始化为-1,需要从config文件中读取相对应的配置(应该为300, 或者4400);但是,没有初始化的话,就会在模拟退火部分,只要一个batch结束,就会更新eta = eta * 0.96,因为一次迭代,大约需要5000个batch,而1000个batch之后,eta就只剩下<strong>1.49e-19</strong>这么多了,几乎等于0,所以到后面,UAS就不会变化了!</p><h4 id="2017-3-24"><a href="#2017-3-24" class="headerlink" title="2017-3-24"></a>2017-3-24</h4><p>使用百度提供的配置,尝试进行GN3Parser中文 <em>greedy</em>的调参</p><p>eta=0.15</p><table><thead><tr><th><strong>position</strong></th><th><strong>batch size</strong></th><th><strong>UAS</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/GN3Parser-beta/test-src-v3.4</td><td>20</td><td>77.52%</td><td></td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/test-src-v3.4-batch-5</td><td>5</td><td>0.55%</td><td>17次epoch都是0.55,应该涨不上去了</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/test-src-v3.4-batch-10</td><td>10</td><td>30.37%</td><td>6次epoch都是30.37%</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/test-src-v3.4-batch-40</td><td>40</td><td>80.07%</td><td></td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/test-src-v3.4-batch-50</td><td>50</td><td>80.07%</td><td>30次迭代无增长结束</td></tr></tbody></table><h4 id="2017-3-23"><a href="#2017-3-23" class="headerlink" title="2017-3-23"></a>2017-3-23</h4><p>记录一下最近的一个bug的调试过程(UAS一直保持不变)</p><ol><li>debug1, 一次batch之后就evaluate 10个sentence, UAS是变化的.</li><li>debug2, 一次batch之后就evaluate all sentences, UAS也是变化的.</li><li>在将use k best放到config的过程中,发现了一个bug,就顺便又找到了一个bug,get_k_best_tag_id 中漏掉了return id???,利用bug找bug!~<h4 id="2017-3-22"><a href="#2017-3-22" class="headerlink" title="2017-3-22"></a>2017-3-22</h4>总结一下最近做的实验:</li></ol><p>GN3Parser 有无k best tags 特征的UAS对比, 所有的word都包含,包括标点.</p><table><thead><tr><th><strong>w/ k best tags</strong></th><th><strong>w/o k best tags</strong></th></tr></thead><tbody><tr><td>81.25%</td><td>81.32%</td></tr></tbody></table><h4 id="2017-3-21"><a href="#2017-3-21" class="headerlink" title="2017-3-21"></a>2017-3-21</h4><p>昨儿个拿到了百度提供的二进制word embedding,今儿个便在SyntaxNet上跑个对比试验,看看实验结果如何.</p><p><strong>SyntaxNet</strong></p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>commments</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/SyntaxNet/models/syntaxnet/nndep_baidu_chinese</td><td>79.08%</td><td>local, without embedding</td></tr><tr><td>gpu-no-1:~/SyntaxNet/models/syntaxnet/nndep_baidu_chinese_w_embedding</td><td>79.67%</td><td>local, with embedding</td></tr></tbody></table><p>奇怪的是,即使SyntaxNet没有使用k best tags,UAS是不是也有点低了.</p><p><strong>GN3Parser</strong></p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/test-src-v3.0</td><td>81.25%</td><td>greedy w k best tags</td></tr><tr><td>m175 ~/GN3Parser-beta/test-src-v3.2</td><td></td><td>global w k best tags</td></tr></tbody></table><h4 id="2017-3-16"><a href="#2017-3-16" class="headerlink" title="2017-3-16"></a>2017-3-16</h4><p>今天的主要事情就是折騰我这Linux系统了.<br>首先汇报一下GN3Parser的进展:(<strong>以下的有关中文实验的数据都是不准确的,排除了label为UNK的word</strong>)<br><strong>Greedy</strong></p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/baidu-conll-09-chinese</td><td><strong>81.32%</strong></td></tr><tr><td>论文的结果</td><td>81.29%</td></tr></tbody></table><p>greedy的结果目前来看就没有问题了,等待global的结果,没有添加k-best tags.</p><p>greedy结果已经出来了,目前结果都不行:</p><table><thead><tr><th><strong>position</strong></th><th><strong>eta</strong></th><th><strong>UAS</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/baidu-conll-09-chinese-global-eta-0.01</td><td>0.01</td><td>83.39%</td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-conll-09-chinese-global</td><td>0.03</td><td><strong>83.72%</strong></td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-conll-09-chinese-global-eta-0.05</td><td>0.05</td><td>83.07%</td></tr></tbody></table><p>现在来讨论一下今天折腾系统的事情:</p><ol><li>早上来的时候,就发现Linux系统的搜狗输入法崩掉了,没法输入中文了,这个对于我来说是致命的.必须把它修好</li><li>因为搜狗输入法和fcitix有关系,于是我就重新安装了fciti和搜狗输入法,悲剧的是,输入法没有安装好,还把系统的System setting给弄没了.</li><li>不能忍,继续到网上查找资料尝试解决问题,但是已经不记得自己干了什么,系统就重新启动了,然后就登录不进去了,报错”failed to start session”!根本登录不了系统.</li><li>中午到~,一上午白费了,打算放弃了,都在往服务器上面备份数据了;打算再尝试一会,尝试失败就重新安装系统.</li><li>于是乎,又查找了大量的资料,绝大数的网上的东西我都试过了,根本没有用;就连最基本的”apt-get update”都会报错:”error ‘nodata’”的错误;后来看到网上说,可能是proxy的问题啥的,最后,我的解决方案是,换源,换成教育网的源,这样居然就能update了?再把ubuntu-desktop,ubuntu-session等软件给安装回来.心累</li><li>晚上顺便就重新倒腾了一下Linux的主题,给自己一点新鲜感.最后,重新安装了搜狗输入法,居然一下子就好了?不明觉厉!还安装了QQ.  :)<h4 id="2017-3-14"><a href="#2017-3-14" class="headerlink" title="2017-3-14"></a>2017-3-14</h4><em>从3-10到现在的所有实验,数据,全部是错误的!!!</em><br>原因如下:</li><li>因为一开始拿到百度的数据,我就首先测试了一下包不包含none projective的数据(因为之前英文数据包含),但是,貌似因为编码的问题,我发现数据拿到linux上面显示全部都是乱码;</li><li>于是便在windows上面的”记事本”软件打开,并且保存为UTF-8编码格式的,再上传到服务器进行进一步的处理;</li><li>可是,后来发现,虽然中文显示正常了,在处理id 和 head的时候,编写的脚本会出错,显示不能将得到的字符串转换成int类型;</li><li>于是,后来想办法解决,什么添加decode(‘utf-8’)全部没有用,后来我就把int()给去掉了,不要求强制转换为int类型,程序正常执行,心想着以为程序就ok了.同时输出了很多的projective数据和None projective数据,如下表格所示.</li><li>鬼使神差的是,我今天还拿了一个none projective的句子进行人工检查,居然还被我看成了none projective的??可能是因为看得比较急躁.</li><li>但是,结果明显是不对的,李老师也说应该全部都是projective的!</li><li>又到师姐那边去拿了以前的旧代码进行测试;发现李老师给的数据,全部都是projective的.发现目前的代码就和旧代码几乎一样,除了”<strong>int()</strong>“;但是李老师给的数据和百度提供的数据明显label和head都是一样的?可能因为李老师的数据是UTF8编码格式的,而百度的数据是由ANSI转换成UTF-8的,可能有不同,所以脚本才不能处理百度的数据</li><li>最后,师姐想到,会不会是转换格式的问题?于是就用Notepad进行了格式转换,”UTF-8”,发现还是那个问题,int()这一步骤过不了!,于是,在转换为”无BOM”的UTF-8,代码就可以了,因为编码问题,浪费了我三天时间..</li></ol><p>今天做实验的时候,突然发现,当初提取句子的时候,用的脚本没有提示有多少句是projective,多少句是non projective,今天添加了几行代码,发现了很严重的事情,百度提供的数据中含有大量的non projective数据:</p><table><thead><tr><th><strong>Corpus</strong></th><th><strong>Total</strong></th><th><strong>Projective</strong></th><th><strong>Non projective</strong></th></tr></thead><tbody><tr><td>train</td><td>22277</td><td>4003</td><td>18274</td></tr><tr><td>dev</td><td>1762</td><td>300</td><td>1462</td></tr><tr><td>test</td><td>2556</td><td>445</td><td>2111</td></tr></tbody></table><p>受到之前实验的影响,以为Global实验的第一次结果一定会比greedy的来的高,所以之前kill掉了很多实验.事实证明,这一次的中文实验并不是这样,之后会增加的比较快的.</p><p>batch: 10</p><table><thead><tr><th><strong>position</strong></th><th><strong>eta</strong></th><th><strong>UAS in epoch 1</strong></th><th><strong>UAS</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/baidu-chinese-global-eta-0.05</td><td>0.05</td><td>80.53%</td><td>83.18%</td><td></td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/baidu-chinese-global-eta-0.03</td><td>0.03</td><td>81.93%</td><td>83.88%</td><td></td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/baidu-chinese-global-eta-0.01</td><td>0.01</td><td>80.48%</td><td>83.43%</td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-chinese-global-eta-0.008</td><td>0.008</td><td>79.98%</td><td>82.83%</td></tr></tbody></table><p>eta: 0.03</p><table><thead><tr><th><strong>position</strong></th><th><strong>batch</strong></th><th><strong>UAS in epoch 1</strong></th><th><strong>UAS</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/baidu-chinese-global-batch-5</td><td>5</td><td>80.93%</td><td>82.68%</td><td></td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/baidu-chinese-global</td><td>10</td><td>81.53%</td><td>83.88%</td><td>高峰过后,稳定在83</td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-chinese-global-batch-20</td><td>20</td><td>80.93%</td><td>83.23%</td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-chinese-global</td><td>30</td><td>81.08%</td><td>83.88%</td><td>高峰过后,稳定在82</td></tr></tbody></table><h4 id="2017-3-13"><a href="#2017-3-13" class="headerlink" title="2017-3-13"></a>2017-3-13</h4><p>中文的数据已经过来了,正在做一些数据准备的工作:</p><ol><li>embedding的准备,从百度提供的embedding,形成我们Parser所需要使用的embedding</li><li>判断中文数据是否包含交叉,全部都不包含;ANSI to utf-8</li><li>SytaxNet的评价包含标点</li></ol><p>先看看Greedy的效果,包含标点</p><table><thead><tr><th><strong>model</strong></th><th><strong>eta</strong></th><th><strong>batch</strong></th><th><strong>decay</strong></th><th><strong>momentum</strong></th><th><strong>UAS</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>SyntaxNet</td><td>0.08</td><td>32</td><td>4500</td><td>0.9</td><td>73.92%</td><td>其他的都是12.56%,明显这个参数不对,后来全部都是12.56%</td></tr><tr><td>SyntaxNet</td><td>0.15</td><td>5</td><td>300</td><td>0.9</td><td>13.86%</td><td>几乎还有其他的都是12.56%,很奇怪?<em>百度提供的配置选择之一</em></td></tr><tr><td>GN3Parser</td><td>0.08</td><td>32</td><td>4400</td><td>0.9</td><td>82.48%</td></tr></tbody></table><p>Global, GN3Parser, 1 epoch:</p><table><thead><tr><th><strong>model</strong></th><th><strong>hyper parameters</strong></th><th><strong>UAS in epoch 1</strong></th><th><strong>UAS</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>eta=0.03</td><td>81.38%</td><td></td><td>killed</td></tr><tr><td>GN3Parser</td><td>eta=0.1</td><td>33.1%</td><td></td><td>killed</td></tr><tr><td>GN3Parser</td><td>eta=0.01</td><td>81.93%</td><td></td><td>killed partial hot started</td></tr><tr><td>GN3Parser</td><td>eta=0.008</td><td>80.78%</td><td></td><td>killed parital hot started</td></tr><tr><td>GN3Parser</td><td>eta=0.03</td><td>82.68%</td><td></td><td>killed partial hot started</td></tr><tr><td>GN3Parser</td><td>eta=0.07</td><td>17.76%</td><td></td><td>killed parital hot started</td></tr><tr><td>GN3Parser</td><td>eta=0.05</td><td>80.53%</td><td></td><td>killed parital hot started</td></tr><tr><td>GN3Parser</td><td>eta=0.03, batch=3</td><td>77.03%</td><td></td><td>killed parital hot started</td></tr><tr><td>GN3Parser</td><td>eta=0.03, batch=8</td><td>82.68%</td><td></td><td>killed partial hot started</td></tr><tr><td>GN3Parser</td><td>eta=0.03, batch=20</td><td>82.83%</td><td></td><td>killed parital hot started</td></tr><tr><td>GN3Parser</td><td>eta=0.03, batch=30</td><td>81.08%</td><td>83.88%</td></tr></tbody></table><h4 id="2017-3-10"><a href="#2017-3-10" class="headerlink" title="2017-3-10"></a>2017-3-10</h4><p>今天完成了GN3Parser添加MKL.<br>完成MKL的过程略有曲折,稍加记录:<br>MKL的工作其实在之前就已经进行了,当时仅仅是从intel的<a href="https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor/" target="_blank" rel="noopener">相关网址</a>上,填写相应的信息,配置需要的编译信息.配置完成之后,尝试过直接加到Makefile里面,就当时来看,确实速度进步了不少.但是最近发现,好像greedy的时候,CPU的占用率一直就只是100%,按道理不应该只有这么一点CPU,于是尝试了各种方法,尝试正确配置MKL,直接的效果就是CPU占用率能够达到500%(人为设定的5个线程).</p><ol><li>因为接触MKL,因为dynet里面配置了MKL,效果挺好,而dynet使用的CMake,而不是Makefile;于是我又修改GN3Parser代码结构,编写相应的CMakeLists,折腾了一些时间,无果.</li><li>后来怀疑是不是LibN3L的问题,于是自己写了一个小的测试程序test.h,结果是可以的,可以利用MKL进行加速.</li><li>再后来就怀疑是不是多线程的问题,于是去掉Greedy里面的多线程,发现还是不行,无果.</li><li>后来没办法,釜底抽薪.copy一份GN3Parser,注释掉main.cpp里面的所有的include,加入test.一步步放出里面的include,一步步加入test进行测试.后来在BatchState里面的forward里面也加入test,发现程序居然可以跑了,greedy显示的是500%CPU,很兴奋(OK)</li><li>需要查找原因,于是就尝试将include进来的test进行注释,删除编译,发现,通不过了,再后来重新加回test,可是!!!居然MKL又没有用了,又只剩下了100%CPU.很奇怪</li><li>最后,将代码copy到m175里面,发现可以编译,MKL可以使用…….GPU服务器有点问题啊再后来,加回多线程仍旧可以跑,任务完成.但是test模块暂时还要保留.不想深究原因,应该编译顺序的原因.头疼</li></ol><p>现在将GN3Parser各版本的速度和SyntaxNet进行对比.</p><table><thead><tr><th><strong>model</strong></th><th><strong>greedy speed</strong></th><th><strong>global speed</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>GN3Parser</td><td>5000 batch/ 45min</td><td>1w sentence / 9h</td><td>greedy多线程,300%CPU vs global多线程,800%CPU</td></tr><tr><td>GN3Parser-w-BatchedComputing</td><td>5000 batch/ 30min</td><td>1w sentence / 2.5h</td><td>greedy单线程, 100%CPU vs global多线程, 800%CPU</td></tr><tr><td>GN3Parser-w-BatchedComputing-w-MKL</td><td>5000 batch / 23min</td><td>1w sentence / 1h</td><td>greedy单线程, 500%CPU vs global多线程, 2700%CPU</td></tr><tr><td>SyntaxNet</td><td>5000 batch / 2min</td><td>1w sentence / 12.5min</td><td>greedy多线程1500%CPU vs global多线程2600%CPU</td></tr></tbody></table><p><em>备注:GN3Parser的CPU数均为峰值</em></p><h4 id="2017-3-7"><a href="#2017-3-7" class="headerlink" title="2017-3-7"></a>2017-3-7</h4><p>Softmax Layer加上了bias<br>大矩阵计算的代码已经修改出来了,现在做实验验证UAS以及速度的变化</p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>m173 ~/GN3Parser-beta/baidu-test-v2.5</td><td>93.04%</td><td>speed: 6min/1000batch</td></tr></tbody></table><p>Global: 全部热启动 and 部分热启动</p><table><thead><tr><th><strong>position</strong></th><th><strong>UAS</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/baidu-test-v2.5</td><td>93.91%</td><td>param来自于93.01% Greedy</td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-test-v2.5-eta-0.02</td><td>5%</td><td>eta设置0.02,UAS直接崩掉了?</td></tr><tr><td>m173 ~/GN3Parser-beta/baidu-test-v2.5-without-softmax-param</td><td>94.24%</td><td>部分热启动</td></tr></tbody></table><p>大矩阵重现了,没有问题.</p><h4 id="2017-3-1"><a href="#2017-3-1" class="headerlink" title="2017-3-1"></a>2017-3-1</h4><p>祝自己新的一个月快乐!<br>今天晚间终于搞定了大矩阵的计算.有两个原因,有一个乌龙~</p><ol><li>今天午间调试程序的时候,发现有的word id居然是小于1的,然后经过排查,发现,vector &lt; state_instance &gt;的指针使用的不对,这一点C++基本知识还需加强,头疼.</li><li>但是虽然找到了一个这个原因,跑实验的时候,发现结果还是不对.然后就试着不将一个batch的input组合成大矩阵,试着就使用一个input来进行实验,这样子就和原来的v1版本的代码一致了,但是结果仍然不好.</li><li>所以我干脆重新回到v1版本的代码,从v1版本一点一点修改.首先,我去掉了precomputation,ok,试验没有问题!,但是当我尝试去掉原来因为precomputation用的各种LinearLookupNode,BNode的时候,需要直接使用一个UniNode作为hidden layer1,但是,问题来了,实验仍然通不过!我就找师姐来看代码,发现改动的地方很少,就修改了hidden layer1的实现方式,结果确实相差很大.排查bug,失败~</li><li>纠结了挺长一段时间,无果.尝试调参吧,后来发现,调参有用!(eta = 0.01)即可?我表示很矛盾,不应该相同的网络,需要使用不同的参数啊.后来,只能想到一个原因,v1版本的h1实现的时候,每一个w的维度是[word_dim, hidden layer size], 但是改成大矩阵的时候,就是[all_word_dim, hidden layer size],虽然使用的是相同的初始化值,但是矩阵的大小不一样,随机初始化初来的矩阵相差也比较大??</li><li>正在跑1024的实验!从目前来看,速度确实有点变快,30分钟应该就能跑完一次迭代.5000batch.没有多线程,没有MKL(结果正常!开心~)<br>真的觉得,每次看实验结果之前需要拜个佛:)</li></ol><h4 id="2017-2-28"><a href="#2017-2-28" class="headerlink" title="2017-2-28"></a>2017-2-28</h4><p>找出了尝试大矩阵运算中的一个bug,因为原先使用precomputation的原因,evaluate的时候,使用的还是原来的parameters,第一个隐含层的参数和现在Uniparams不同,不能混合使用,需要修改.<br>又出现了UAS不更新的问题!</p><h4 id="2017-2-27"><a href="#2017-2-27" class="headerlink" title="2017-2-27"></a>2017-2-27</h4><p>SyntaxNet尝试使用全部greedy parameter参数失败,会报错,出现inf错误</p><h4 id="2017-2-25"><a href="#2017-2-25" class="headerlink" title="2017-2-25"></a>2017-2-25</h4><p>Global结果已经出来,最好的一个<strong>94.22%</strong>,已经和SyntaxNet齐平.(完工!)<br>:)</p><h4 id="2017-2-24"><a href="#2017-2-24" class="headerlink" title="2017-2-24"></a>2017-2-24</h4><ol><li>统一了老版本的pre computation和新版本的实现方式:<blockquote><ul><li>老版本,传入的是一个batch中,应该被计算pre computation的word idx</li><li>新版本,根据word idx来选择是否需要进行计算</li></ul></blockquote></li><li>根据实验表明,pre computation计算出来的值val(0, 0)会出现 &lt; 1e-3 的情况,故修改pre computation中判断条件为1e-5.</li><li>在evaluate函数里面,将greedy和global的分别测试融合了.</li></ol><h4 id="2017-2-23"><a href="#2017-2-23" class="headerlink" title="2017-2-23"></a>2017-2-23</h4><p>每天早晨来实验室看实验结果就跟拜佛似得,怀着无比虔诚的心,诶,实验结果好了~GN3Parser的Global效果第一次迭代挺好的,<strong>93.99%</strong>,这个实验用的是 / batch_size .<br>还有几点比较奇怪的:</p><blockquote><ul><li>我们的GPU服务器竟然跑的比173要慢,173已经跑完1次epoch又17000句子,GPU服务器竟然只跑了22000句子?!</li><li>mkl优化又大约1000句子1h20min,优化前大约1.7h</li></ul></blockquote><h4 id="2017-2-22"><a href="#2017-2-22" class="headerlink" title="2017-2-22"></a>2017-2-22</h4><p>因为GN3Parser实在是太慢,so,探究加速方面的事情.对<em>Eigen进行加速</em>(打开OMP: 两个1024*1024的矩阵进行相乘10次,未加速<em>86.75s</em>, 加速<em>25.23s</em>)<br><strong>OMP</strong><br>此种方式通过打开OMP,从而打开Eigen的多线程运算.但是,如果服务器的CPU核数太少,则不能用这种方法,会导致GN3Parser多线程出问题!(libgomp: Thread creation failed: Resource temporarily unavailable)<br><em>其实可以设置线程数:)</em><br>目前在171服务器上面测试GN3Parser加速后的greedy水准!<br>未加速:7s   10个batch<br>加速后:32s  10个batch  <font color="green">???what?</font><br><strong>MKL</strong><br>没法从dynet配置中获取经验!!!<br>矩阵的乘法编译通不过??(Google了很多资料,头疼~)<br>编译完成之后,运行程序又出现了新的bug:</p><blockquote><ul><li>parameter 13 was incorrect on entry to dgemm</li></ul></blockquote><p>解决之后:<br><em>OpenMP threading</em> 5s 10个batch 10个线程 | 4s 10个batch 20个线程 | 5s或者4s 10个batch <strong>5个线程</strong> (实际上用不了这么多),可能是我们的GPU服务器不行?!<br><em>Sequential threading</em> 5s或者4s(较多) 10个batch <strong>5个线程</strong><br><em>TBB threading</em> 编译不成功:/usr/bin/ld: cannot find -ltbb</p><h4 id="2017-2-21"><a href="#2017-2-21" class="headerlink" title="2017-2-21"></a>2017-2-21</h4><p>既然Greedy达到了SyntaxNet的水平,下面就开始Global的实验</p><table><thead><tr><th><strong>position</strong></th><th><strong>hyper parameters</strong></th><th><strong>Global</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/GN3Parser-beta/baidu-1024-baidu-config-div-t-beam-16</td><td>eta=0.03</td><td></td><td>baidu config, div total _t, beam=16</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/baidu-1024-baidu-config-div-t-beam-64</td><td>eta=0.03</td><td></td><td>baidu config, div total _t, beam=64</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/baidu-1024-baidu-config-div-t-beam-16-eta-0.2</td><td>eta=0.2</td><td></td><td>baidu config, div total _t, beam=16</td></tr><tr><td>m173 ~/GN3Parser-beta/baidu-1024-div-batch-size-eta-0.01</td><td>eta=0.01</td><td><strong>94.22%</strong></td><td>baidu config, div batch size(8), beam=16</td></tr><tr><td>m173 ~/GN3Parser-beta/baidu-1024-div-batch-size-eta-0.02</td><td>eta=0.02</td><td><strong>94.18%</strong></td><td>baidu config, div batch size(8), beam=16</td></tr><tr><td>m173 ~/GN3Parser-beta/baidu-1024-div-batch-size-eta-0.03</td><td>eta=0.03</td><td>kill</td><td>baidu config, div batch size(8), beam=16</td></tr></tbody></table><h4 id="2017-2-20"><a href="#2017-2-20" class="headerlink" title="2017-2-20"></a>2017-2-20</h4><p>下午发现,原来的实验都是200*200的……补充了一个实验,首先跑Greedy,1024*1024</p><table><thead><tr><th><strong>position</strong></th><th><strong>hyper parameters</strong></th><th><strong>greedy</strong></th><th><strong>global</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/baidu-hidden-size-1024-baidu-config</td><td>eta=0.08,</td><td>93.09%</td><td></td><td>baidu config</td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-hidden-size-1024</td><td>eta=0.1,</td><td>93.10%</td><td></td></tr></tbody></table><h4 id="2017-2-19"><a href="#2017-2-19" class="headerlink" title="2017-2-19"></a>2017-2-19</h4><p>Global div _t</p><table><thead><tr><th><strong>hyper parameters</strong></th><th><strong>global uas in epoch 1</strong></th><th><strong>end</strong></th></tr></thead><tbody><tr><td>eta=0.03, reg=1e-5,</td><td>92.46%</td><td>don’t care~</td></tr><tr><td>eta=0.2, reg=1e-5</td><td>93.43%</td><td>93.65%</td></tr></tbody></table><h4 id="2017-2-18"><a href="#2017-2-18" class="headerlink" title="2017-2-18"></a>2017-2-18</h4><p>补充的几个实验</p><table><thead><tr><th><strong>hyper parameter</strong></th><th><strong>global UAS in epoch 1</strong></th></tr></thead><tbody><tr><td>eta=0.08, reg=1e-5, momen=0.9, beam=64</td><td>93.07%</td></tr><tr><td>eta=0.1</td><td>93.19%</td></tr><tr><td>eta=0.15</td><td>93.32%</td></tr><tr><td>eta=0.2</td><td><strong>93.34%</strong></td></tr></tbody></table><p>one_batch_state_count那边可能有问题,state_count是指的一串state呢?还是beam里面所有的state?更新的时候是否都是beam里面最后一个State?!</p><h4 id="2017-2-17"><a href="#2017-2-17" class="headerlink" title="2017-2-17"></a>2017-2-17</h4><p>从epoch 1的实验结果来看,百度的数据在Global上可能需要调参,不能够直接沿用百度的配置</p><p>Baidu config(greedy-model.bin form 92.58%)</p><table><thead><tr><th><strong>hyper parameter</strong></th><th><strong>global uas in first epoch</strong></th></tr></thead><tbody><tr><td>eta=0.03, reg=1e-4, momen=0.9, beam=64</td><td>92.22%</td></tr><tr><td>eta=0.03, reg=1e-5, momen=0.9, beam=64</td><td>92.55%</td></tr><tr><td>eta=0.03, reg=1e-7, momen=0.9,</td><td>92.48%</td></tr><tr><td>eta=0.005, reg=1e-5,</td><td>91.16%</td></tr></tbody></table><p>My config(greedy-model.bin from 92.64%)</p><table><thead><tr><th><strong>hyper parameter</strong></th><th><strong>global uas in first epoch</strong></th></tr></thead><tbody><tr><td>eta=0.03, reg=1e-4, momen=0.9, beam=64</td><td>92.58%</td></tr><tr><td>eta=0.02, reg=1e-5, momen=0.9, beam=64</td><td>92.22%</td></tr><tr><td>eta=0.02,                     beam=128</td><td>92.37%</td></tr><tr><td>eta=0.1,</td><td><strong>93.19%</strong></td></tr><tr><td>eta=0.001,</td><td>89.45%</td></tr></tbody></table><p>个人认为有可能是beam的大小的问题,当初调试周浩数据的时候,就是增加beam从16到64,UAS一下子就增加上去了.所以又增加了一组实验.<br>Get!应该调整eta的大小,往大的调整</p><h4 id="2017-2-16"><a href="#2017-2-16" class="headerlink" title="2017-2-16"></a>2017-2-16</h4><p>GN3Parser的一些最新实验<br>python处理了embedding,将oov使用正态分布随机化了embedding.(baidu.embedding.total.for.train)</p><table><thead><tr><th><strong>position</strong></th><th><strong>greedy</strong></th><th><strong>global</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>m172 ~/GN3Parser-beta/baidu-momentum-0.9</td><td>92.51%</td><td></td><td>eta=0.1, regularization=1e-5, momentum=0.9</td></tr><tr><td>m173 ~/GN3Parser-beta/baidu-momentum-0.9-w-total-train-embedding</td><td><strong>92.64%</strong></td><td></td><td>配置同上,但是用了python处理过的embedding</td></tr><tr><td>m172 ~/GN3Parser-beta/baidu-data-baidu-config</td><td>92.40%</td><td></td><td>eta=0.08, 1e-5, 0.9</td></tr><tr><td>m173 ~/GN3Parser-beta/baidu-data-baidu-config-w-total-train-embedding</td><td>92.58%</td><td></td><td>配置同上,但是用了python处理过的embedding</td></tr></tbody></table><p>从下面的这个图片我们可以看出来,GN3Parser的收敛速度和SyntaxNet几乎差不多.且SyntaxNet有一个比较奇怪的地方,开始几次迭代的UAS都在16.3%<br><img src="/images/GN3Parser/greedy" alt="GN3Parser vs SyntaxNet"></p><p>就目前看,GN3Parser的global过程进展并不顺利,可能参数又没有设置得好?7h一次迭代完成(时间有点长)</p><h4 id="2017-2-15"><a href="#2017-2-15" class="headerlink" title="2017-2-15"></a>2017-2-15</h4><p>SyntaxNet终于复现了Google的结果</p><table><thead><tr><th><strong>Eval</strong></th><th><strong>greedy</strong></th><th><strong>global</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>SyntaxNet</td><td>92.90%</td><td>94.21%</td><td>SyntaxNet自带的评价, eval_global的时候, syntaxnet显示eval metric只有94.19?</td></tr><tr><td>eval-UAS.py</td><td>92.97%</td><td>94.26%</td><td>完全按照label列的punct来计算的</td></tr><tr><td>eval.pl</td><td>92.66%</td><td>93.99%</td><td>eval.pl应该是识别不了-LRB-之类的word的</td></tr></tbody></table><p>words.gz里面的”##”代表ROOT</p><h4 id="2017-2-14"><a href="#2017-2-14" class="headerlink" title="2017-2-14"></a>2017-2-14</h4><p>GN3Parser实现的eval过程中是否包含标点有问题:<br> eval.pl分母:35368<br> GN3Parser(c自带的接口ispunct)分母:35363;且GN3Parser测试出来的结果比eval.pl测试出来的结果少0.3%<br> Python实现(自己写的)分母:35363<br> GN3Parser词性列表的实现方法,分母:36152<br> SyntaxNet分母:35431</p><h4 id="2017-2-13"><a href="#2017-2-13" class="headerlink" title="2017-2-13"></a>2017-2-13</h4><p>今天比较了周浩的数据和百度的数据,发现words有如下差别.<br>有1585个单词,百度的数据是”*/*“,而周浩包含了转义符”\”<br>实现了GN3Prarser中,可以通过配置文件,要求评价包含不包含标点.现在默认不包含</p><p>做了几个实验,看看正则化因子GN3Parser的影响</p><table><thead><tr><th><strong>position</strong></th><th><strong>greedy</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/baidu-regularization-1e-2</td><td>kill</td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-regularization-1e-3</td><td>kill</td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-regularization-1e-4</td><td>91.43%</td></tr><tr><td>m172 ~/GN3Parser-beta/baidu-regularization-1e-5</td><td>91.40%</td></tr><tr><td>m172 ~/GN3Parser-beta/baidu-regularization-1e-6</td><td>90.73%</td></tr></tbody></table><p>上面的结果都是GN3Parser测试出来的结果</p><h4 id="2017-2-11"><a href="#2017-2-11" class="headerlink" title="2017-2-11"></a>2017-2-11</h4><p>最近在使用百度的数据尝试重现Google的结果<br>SyntaxNet:</p><table><thead><tr><th><strong>position</strong></th><th><strong>greedy</strong></th><th><strong>global</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/SyntaxNet/models/syntaxnet/nndep_baidu_data_1024_w_embedding</td><td>92.64%</td><td>93.89%</td><td>使用了embedding,但是这一版本并没有修改百度说的embedding bug</td></tr><tr><td>gpu-no-1:~/SyntaxNet/models/syntaxnet/nndep_baidu_data_1024_w_embedding_baidu_config</td><td><strong>92.90%</strong></td><td></td></tr></tbody></table><p>GN3Parser:<br>鉴于GN3Parser的Greedy在百度的数据上效果并没有那么好(90.68%,包含标点,UAS,没有使用embedding),现在尝试调参,看看是不是参数的问题.<br>和SyntaxNet相比,GN3Parser在没有使用embedding的情况下,最起码要达到91.00%才行.</p><table><thead><tr><th><strong>position</strong></th><th><strong>greedy</strong></th><th><strong>comment</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/baidu-eta-0.2</td><td>90.52%</td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-eta-0.15</td><td>?</td><td>超过20次:26%</td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-eta-0.1</td><td><strong>90.73%</strong></td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-eta-0.05</td><td>90.50%</td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-eta-0.03</td><td>90.49%</td><td></td></tr><tr><td>m175 ~/GN3Parser-beta/baidu-eta-0.01</td><td>89.34%</td><td></td></tr><tr><td>m172 ~/GN3Parser-beta/baidu-eta-0.1-embedding</td><td>90.74%</td><td></td></tr><tr><td>m172 ~/GN3Parser-beta/baidu-eta-0.08-embedding</td><td>90.58%</td><td></td></tr><tr><td>m172 ~/GN3Parser-beta/baidu-eta-0.05-embedding</td><td>90.61%</td></tr></tbody></table><blockquote><ul><li>今天发现了一个问题,百度的数据拿我们的embedding来跑实验,竟然还有141个OOV,也就是说,和周浩的数据又有不同!连words都不同?</li><li>我们发现加了embedding,并没有明显让UAS上升,有如下猜想解释:embedding只有2/3的数据有,其他的只不过是随机初始化的,跟百度提供的没法比</li></ul></blockquote><h4 id="2017-2-10"><a href="#2017-2-10" class="headerlink" title="2017-2-10"></a>2017-2-10</h4><p>今天主要完成了两项工作:</p><blockquote><ul><li>搞明白了为啥当hidden layer size为1024*1024的时候,SyntaxNet的结果一直都是16.33%?为啥呢,因为SyntaxNet可能训练的比较慢,等上差不多9次迭代之后,eval metric就增加了.可是很奇怪的是,GN3Parser就没有这个问题</li><li>解决了global训练的时候,存在着内存问题.经过排查,是State.h里面new了一个can_apply_idx,但是忘记delete了:),一个教训,谨记!</li></ul></blockquote><h4 id="2017-2-9"><a href="#2017-2-9" class="headerlink" title="2017-2-9"></a>2017-2-9</h4><p>尝试在SyntaxNet中加入embedding,复现Google的论文结果.<br>根据百度提供的bug,修改reader_ops.cc中”+ 3” -&gt; “+ 2”(修改之后,从日志上并不能看出什么差别)<br>UAS:</p><table><thead><tr><th><strong>position</strong></th><th><strong>greedy</strong></th><th><strong>global</strong></th></tr></thead><tbody><tr><td>SyntaxNet amax:~/TensorFlow/models/syntaxnet/nndep_baidu_data</td><td>91.94</td><td></td></tr><tr><td>SyntaxNet amax:~/TensorFlow/models/syntaxnet/nndep_baidu_data_w_embedding</td><td>92.38</td><td>93.70</td></tr><tr><td>GN3Parser</td><td></td></tr></tbody></table><p>如果,单纯的修改hidden layer neuron number为1024的话,SyntaxNet的greedy效果奇差:16.33%</p><h4 id="2017-2-8"><a href="#2017-2-8" class="headerlink" title="2017-2-8"></a>2017-2-8</h4><p>年后第一天来实验室,首先整理一下前几天的工作:<br>采用百度的数据,分别采用SyntaxNet &amp; GN3Parser进行测试比较,结果如下:</p><table><thead><tr><th><strong>position(已经舍弃)</strong></th><th><strong>greedy</strong></th><th><strong>global</strong></th></tr></thead><tbody><tr><td>amax:~/TensorFlow/models/syntaxnet/nndep_baidu_data(SyntaxNet)</td><td>92.05%</td><td>93.39</td></tr><tr><td>m175 ~/GN3Parser-beta/merge-globally-data-baidu</td><td>90.55%(实验已经被覆盖,因为此数据包含交叉弧数据)</td><td>?</td></tr></tbody></table><p>几点说明:</p><blockquote><ul><li>都没有使用pretrained embedding</li><li>其中,syntaxnet中,百度的数据会产生一个projectivized-training-corpus,而且不能够被替换为百度提供的training-corpus,替换的化,SyntaxNet的global过程会报错,无法完成?是否因为百度的数据是包含交叉的?</li><li>我们的GN3Parser在global过程中会报错!(use-all-pre-trained-embeddings版本代码)</li></ul></blockquote><p><em>经过验证,百度提供的数据确实存在着包含交叉弧的数据,总计1160行(包含空白行)</em></p><h4 id="2017-1-22"><a href="#2017-1-22" class="headerlink" title="2017-1-22"></a>2017-1-22</h4><p>zhouhao-data: SyntaxNet, global, UAS:<strong>93.37%</strong>(不含标点)</p><h4 id="2017-1-20这一次为什么又会是26-呢"><a href="#2017-1-20这一次为什么又会是26-呢" class="headerlink" title="2017-1-20这一次为什么又会是26%呢?"></a>2017-1-20这一次为什么又会是26%呢?</h4><p>今天尝试用src-r10跑一下beam search,突然就想起来,relu的双隐层从来就没有好过!<br>于是我就采用tanh激活函数,代替了relu,发现是可以的,没有问题.努力调参中…</p><h4 id="2017-1-18-融合greedy和global的功能"><a href="#2017-1-18-融合greedy和global的功能" class="headerlink" title="2017-1-18-融合greedy和global的功能"></a>2017-1-18-融合greedy和global的功能</h4><p>从昨天晚间开始融合两部分的代码,遇到了如下问题:</p><ol><li>greedy和global的pre computation的初始化方式以及使用方式不一致<h4 id="2017-1-17-完善Parameter-averaging功能"><a href="#2017-1-17-完善Parameter-averaging功能" class="headerlink" title="2017-1-17-完善Parameter averaging功能"></a>2017-1-17-完善Parameter averaging功能</h4></li></ol><blockquote><ul><li>添加保存averaging parameter功能(完成)</li><li>添加是否在eval的采用parameter averaging功能,选项(完成)</li><li>优化SparseParam的update功能,不再使用整个矩阵的更新,更新成update哪一row,就只计算哪一row</li></ul></blockquote><h4 id="2017-1-16-加入了parameter-averaging功能"><a href="#2017-1-16-加入了parameter-averaging功能" class="headerlink" title="2017-1-16-加入了parameter averaging功能"></a>2017-1-16-加入了parameter averaging功能</h4><p>在昨天的工作基础上,加入了parameter averaging功能,基于谷歌的第一篇论文:<br>中心思想就是eval的时候,使用的是averaging parameter<br>公式如下:<br>$$<br>\overline{\theta_{t}} = \alpha_t\overline{\theta_{t-1}} + (1 - \alpha_t) \theta_t<br>$$<br>这里的$\overline{\theta_{t}}$是t步update之后的shadow_variable,即averaging parameter<br>我们看了tensorflow的实现,加入了min操作:<br>min(decay, (1 + num_steps) / (10 + num_steps))</p><p>实验:</p><table><thead><tr><th><strong>position</strong></th><th><strong>best UAS</strong></th><th><strong>commments</strong></th></tr></thead><tbody><tr><td>m172 ~/GN3Parser-beta/greedy-state-parameter-averaging-eta-0.1</td><td>91.42</td><td>参数设置和下面的91.55一致</td></tr><tr><td>m172 ~/GN3Parser-beta/greedy-state-parameter-averaging-eta-0.08-mo-0.85</td><td><strong>91.51</strong></td><td>eta 0.08 momentum 0.85, SyntaxNet的默认配置</td></tr><tr><td>m172 ~/GN3Parser-beta/greedy-state-parameter-averaging-eta-0.08-91.51-verify</td><td><strong>91.64</strong></td><td>参数同91.51,为了查看随机化的影响</td></tr><tr><td>m172 ~/GN3Parser-beta/greedy-state-parameter-averaging-eta-verify-91.51</td><td>90.91</td><td>参数同91.51,使用的是fix-bug代码</td></tr></tbody></table><p><em>结论</em>:(2017-1-19)<br>已经各跑了两组实验,发现fix-bug之后的实验结果普遍低于没有fix-bug之后的,经排查,可能的原因有如下两种情况:</p><ol><li>SparseParam更新gradient的时候,就不能够做优化(已经确认,是这个原因2017-1-20)</li><li>是不是_g_global_label_num_no_null这个参数的问题,can_apply_idx?的长度原因?(不是这个原因)</li></ol><p><em>解释</em>:因为使用的Momentum Optimizer,accum的存在,使得SparseParam就是不能使用indexer来进行优化!(2017-1-20)</p><p>利用<strong>百度</strong>提供的数据进行的实验(train:open)(2017-1-17)</p><table><thead><tr><th><strong>position</strong></th><th><strong>best UAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/greedy-state-parameter-averaging-eta-0.08-mo-0.85</td><td>90.67</td><td>使用了parameter averaging, 参数配置同上91.51</td></tr><tr><td>m175 ~/GN3Parser-beta/greedy-state-greedy-eta-0.1-baidu</td><td>90.64</td><td>没有使用parameter averaging,参数配置同下91.55,(91.65, no punct)</td></tr><tr><td>m175 ~/GN3Parser-beta/greedy-state-greedy-eta-0.08-baidu</td><td>90.71</td><td>没有使用parameter averaging,参数配置同上91.51,(91.69, no punct)</td></tr></tbody></table><p>遇到的问题:</p><ol><li>今天在做百度实验的时候,以上的三个实验发现UAS一直都是26%,是以前经常遇到的一个错误,经过排查代码发现.<br>我们在FeatureConfig.h的文件中写死了LABEL_NUM=12,为了做百度的实验,暂时就修改为45.以后就修改这一参数,根据目标语料来动态赋值.</li><li>不能测试parameter averaging的UAS,因为averaging parameter没有保存.</li></ol><h4 id="使用syntaxnet以及Github上推荐的参数配置-跑了一遍baidu提供数据的代码"><a href="#使用syntaxnet以及Github上推荐的参数配置-跑了一遍baidu提供数据的代码" class="headerlink" title="使用syntaxnet以及Github上推荐的参数配置,跑了一遍baidu提供数据的代码"></a>使用syntaxnet以及Github上推荐的参数配置,跑了一遍baidu提供数据的代码</h4><p>实验:</p><table><thead><tr><th><strong>position</strong></th><th><strong>best UAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>amax:~/TensorFlow/models/syntaxnet/nndep_baidu_data</td><td>91.99</td><td>m171</td></tr></tbody></table><h4 id="2017-1-15-实验整理"><a href="#2017-1-15-实验整理" class="headerlink" title="2017-1-15-实验整理"></a>2017-1-15-实验整理</h4><p>SyntaxNet在周浩的数据上,greedy,使用默认参数配置,eval metric:92.48%<br>修正了GN3Parser,放弃了融合beam的功能,实现了基于state的batch的train过程.记录实验数据如下:</p><table><thead><tr><th><strong>position</strong></th><th><strong>best UAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>m175 ~/GN3Parser-beta/greedy-state-greedy-eta-0.1</td><td><strong>91.55</strong></td><td>eta=0.1, lambda=1e-4, momentum=0.9</td></tr><tr><td>m175 ~/GN3Parser-beta/greedy-state-greedy-eta-0.05</td><td>91.25</td><td>eta=0.05, …同上</td></tr><tr><td>m175 ~/GN3Parser-beta/greedy-state-greedy-eta-0.05-lambda-1e-6</td><td>90.64</td><td>eta=0.05, lamdba=1e-6, 同上</td></tr><tr><td>m175 ~/GN3Parser-beta/greedy-state-greedy-eta-0.01</td><td>90.61</td><td>eta=0.01, …同上</td></tr></tbody></table><h4 id="正则化实验整理"><a href="#正则化实验整理" class="headerlink" title="正则化实验整理"></a>正则化实验整理</h4><p>正则化的实验：参数的更新方式选择Momentum Optimizer, tensorflow 实现方式;三个Embedding的初始化方式还都是LibN3L自带的,暂时没有切换到正态分布</p><table><thead><tr><th><strong>position</strong></th><th><strong>best UAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-no-regularization</td><td>90.26</td><td>No regularization</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-w-regularization-reg-1e-4</td><td><strong>90.65</strong></td><td>with regularization;lambda 1e-4</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-w-regularization-reg-1e-4-batch-1</td><td>85.30</td><td>parameter same with 90.65, batch is 1</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-w-regularization</td><td>90.22</td><td>with regularization;lambda 1e-5</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-w-regularization-reg-1e-7</td><td>90.11</td><td>with regularization;lambda 1e-7</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-w-regularization-normalization-embedding</td><td>90.03</td><td>with regularization;normal embedding</td></tr></tbody></table><h4 id="Momentum-Optimizer实验整理"><a href="#Momentum-Optimizer实验整理" class="headerlink" title="Momentum Optimizer实验整理"></a>Momentum Optimizer实验整理</h4><p>Momentum Optimizer: 梯度更新方式的实验,本组实验总共探究了两个实现方式<br>tensorflow实现方式:<br>Sebastian博客给出的方式:</p><table><thead><tr><th><strong>position</strong></th><th><strong>best UAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-momentum-from-sebbastian</td><td>90.22</td><td>Momentum Optimizer, From sebastian</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-w-regularization</td><td>90.22</td><td>with regularization;lambda 1e-5</td></tr></tbody></table><h4 id="Words-POS-Labels-Embedding-初始化方式比较"><a href="#Words-POS-Labels-Embedding-初始化方式比较" class="headerlink" title="Words POS Labels Embedding 初始化方式比较"></a>Words POS Labels Embedding 初始化方式比较</h4><p>word pos labels embedding的初始化方法比较:<br>uniform分布:(使用了norm2one)<br>normalization分布:(没有使用norm2one)</p><table><thead><tr><th><strong>position</strong></th><th><strong>best UAS</strong></th><th><strong>comments</strong></th></tr></thead><tbody><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-normalization-embedding-words-pos-label</td><td>89.79</td><td>参数设置和90.65那个一样</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-normalization-embedding-words-pos-label-w-norm2one</td><td>89.82</td><td>使用了norm2one,其他参数一样</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-normalization-embedding-words-pos-label-w-norm2one-eta-0.4</td><td>88.98</td><td>使用了norm2one,eta=0.4</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-normalization-embedding-words-pos-label-eta-0.4</td><td>90.06</td><td>eta=0.4,其他参数一样</td></tr><tr><td>gpu-no-1:~/GN3Parser-beta/greedy-uniform-embedding-words-pos-label</td><td>90.15</td><td>参数设置和90.65模型一样</td></tr></tbody></table><p>从结果中,可以看出来,当使用了normalization分布的时候,还测试了eta为0.4的情况</p><h4 id="2016-10-30-实验整理"><a href="#2016-10-30-实验整理" class="headerlink" title="2016-10-30-实验整理"></a>2016-10-30-实验整理</h4><table><thead><tr><th><strong>position</strong></th><th><strong>parameters</strong></th><th><strong>current best accuracy/epoch</strong></th></tr></thead><tbody><tr><td>m176:~/GN3Parser-beta/experiment-ml-batch-1</td><td>max likelihood beam 16 batch 1</td><td>88.56(iter 11)</td></tr><tr><td>m176:~/GN3Parser-beta/experiment-ml-beam-32-batch-20</td><td>ml beam 32 batch 20</td><td>90.66(iter 12)</td></tr><tr><td>m176:~/GN3Parser-beta/experiment-ml-h-500-batch-20-beam-16</td><td>ml beam 16 hidden 500 batch 20</td><td>89.09(iter 7)</td></tr></tbody></table><p><em>跑了一个第一版本的precomputation实验，ml，用来对比实现第二版本的速度以及准确率</em><br>m176:~/GN3Parser-pre-computation/example-maxlikelihood-beam-32-batch-20<br>Accuracy:<strong>90.99(iter 19)</strong><br>可能因为是batch设置为20的原因，进一步的优化并没有明显的速度优势，第一次迭代的速度都是13min左右。<br>以前有过一次实验，当batch设置为200的时候，就能够看出明显的优势，第二版本的速度比第一版本快2倍左右。</p><h4 id="2016-10-29-实验整理"><a href="#2016-10-29-实验整理" class="headerlink" title="2016-10-29-实验整理"></a>2016-10-29-实验整理</h4><p>目前最新的代码，融合了greedy search，可供选择的loss：max margin, max likelihood损耗函数。GN3Parser-beta</p><p>#####LN3Parser: greedy search<br>parameters: beam size=##, dropout=0.0, hidden layer neuron number=200, embedding dim=50, thread num=30</p><p>batch size=5: m172 /home/yzhang/GN3Parser-greedy-search/example-dim50-batch5 第10次迭代所用时间：<font color="blue">22:31:22 - 22:39:46 = 8min24s</font><br>batch size=20: m172 /home/yzhang/GN3Parser-greedy-search/example-dim50-batch20 第10次迭代所用时间：<font color="blue">10:42:38 - 10:46:29 = 3min51s</font><br>batch size=200: m172 /home/yzhang/GN3Parser-greedy-search/example-dim50-batch200 第10次迭代所用时间：<font color="blue">23:08:48 - 23:10:06 = 1min18s</font></p><table><thead><tr><th><strong>epoch</strong></th><th><strong>batch size=5 Accuracy</strong></th><th><strong>batch size=20 Accuracy</strong></th><th><strong>batch size=200 Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>84.54</td><td>82.56</td><td>64.51</td></tr><tr><td>10</td><td>88.85</td><td>88.49</td><td>84.69</td></tr><tr><td>20</td><td>88.78/89.18(iter 16)</td><td>88.42/88.82(iter 16)</td><td>87.01</td></tr><tr><td>STOP</td><td>89.18(iter 16)</td><td>88.82(iter 16)</td><td>88.15(iter 39)</td></tr></tbody></table><p>#####GN3Parser: max likelihood<br>parameters: beam size=16, dropout=0.0, hidden layer neuron number=200, embedding dim=50, thread num=30</p><p>batch size=5: m175 ~/GN3Parser-pre-computation/example-maxlikelihood-batch-5 第10次迭代所用时间：<font color="blue">17:42:55 - 16:53:00 = 49min55s</font><br>batch size=20: m175 ~/GN3Parser-pre-computation/example-maxlikelihood-batch-20 第10次迭代所用时间：<font color="blue">12:15:20 - 12:30:46 = 15min26s</font><br>batch size=200: m172 ~/GN3Parser-pre-computation/example-maxlikelihood-batch-200 第10次迭代所用时间：<font color="blue">15:48:40 - 15:58:29 = 9min49s</font></p><table><thead><tr><th><strong>epoch</strong></th><th><strong>batch size=5 Accuracy</strong></th><th><strong>batch size=20 Accuracy</strong></th><th><strong>batch size=200 Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>81.70</td><td>80.07</td><td>54.78</td></tr><tr><td>10</td><td>89.02</td><td>88.52</td><td>85.55</td></tr><tr><td>20</td><td>88.51/89.43(iter 14)</td><td>87.90/88.70(iter 19)</td><td>86.54/87.50(iter 18)</td></tr><tr><td>STOP</td><td>89.43(iter 14)</td><td>88.70(iter 19)</td><td>87.71(iter 26)</td></tr></tbody></table><h5 id="GN3Parser-MM-VS-ML"><a href="#GN3Parser-MM-VS-ML" class="headerlink" title="GN3Parser MM VS ML"></a>GN3Parser MM VS ML</h5><p>parameters: beam size=16, dropout=0.0, hidden layer neuron number=200, embedding dim=50, thread num=30</p><p>MM: m173 ~/GN3Parser-pre-computation/example-maxmargin-batch-5 第10次迭代所用时间：<font color="blue">03:01:07 - 03:16:46 = 15min39s</font><br>ML: m175 ~/GN3Parser-pre-computation/example-maxlikelihood-batch-5 第10次迭代所用时间：<font color="blue">17:42:55 - 16:53:00 = 49min55s</font></p><table><thead><tr><th><strong>epoch</strong></th><th><strong>ML Accuracy</strong></th><th><strong>MM Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>81.70</td><td>74.21</td></tr><tr><td>10</td><td>89.02</td><td>79.55</td></tr><tr><td>20</td><td>88.51/89.43(iter 14)</td><td>80.00/80.65(iter 19)</td></tr><tr><td>STOP</td><td>89.43(iter 14)</td><td>83.53(iter 122)</td></tr></tbody></table><h4 id="加了pre-computation-和不加pre-computation的速度对比"><a href="#加了pre-computation-和不加pre-computation的速度对比" class="headerlink" title="加了pre computation 和不加pre computation的速度对比"></a>加了pre computation 和不加pre computation的速度对比</h4><p>统一查看第10次迭代的时间<br>参数配置：beam size=16,</p><table><thead><tr><th><strong>method</strong></th><th><strong>thread num</strong></th><th><strong>batch</strong></th><th><strong>word embedding size</strong></th><th><strong>hidden layer neuron number</strong></th></tr></thead><tbody><tr><td>pre computation</td><td>15</td><td>200</td><td>50</td><td>200</td></tr><tr><td>no pre computation</td><td>15</td><td>200</td><td>50</td><td>200</td></tr></tbody></table><table><thead><tr><th><strong>method</strong></th><th><strong>begin time</strong></th><th><strong>end time</strong></th><th><strong>UAS</strong></th><th><strong>end UAS</strong></th></tr></thead><tbody><tr><td>pre computation</td><td>09:04:33</td><td>09:09:31</td><td>81.46%</td><td>84.47%/113</td></tr><tr><td>no pre computation</td><td>11:21:11</td><td>11:43:12</td><td>59.46%</td><td>–</td></tr></tbody></table><p>总的来说速度快了: 5min/22min = 4<br>准确率差这么多？</p><h4 id="利用目前的代码实现greedy-search，with-pre-computation"><a href="#利用目前的代码实现greedy-search，with-pre-computation" class="headerlink" title="利用目前的代码实现greedy search，with pre computation"></a>利用目前的代码实现greedy search，with pre computation</h4><h4 id="加了pre-computation-和不加pre-computation的速度对比-1"><a href="#加了pre-computation-和不加pre-computation的速度对比-1" class="headerlink" title="加了pre computation 和不加pre computation的速度对比"></a>加了pre computation 和不加pre computation的速度对比</h4><p>统一查看第10次迭代的时间<br>参数配置：beam size=16,</p><table><thead><tr><th><strong>method</strong></th><th><strong>thread num</strong></th><th><strong>batch</strong></th><th><strong>word embedding size</strong></th><th><strong>hidden layer neuron number</strong></th></tr></thead><tbody><tr><td>pre computation</td><td>15</td><td>200</td><td>50</td><td>200</td></tr><tr><td>no pre computation</td><td>15</td><td>200</td><td>50</td><td>200</td></tr></tbody></table><table><thead><tr><th><strong>method</strong></th><th><strong>begin time</strong></th><th><strong>end time</strong></th><th><strong>UAS</strong></th><th><strong>end UAS</strong></th></tr></thead><tbody><tr><td>pre computation</td><td>09:04:33</td><td>09:09:31</td><td>81.46%</td><td>84.47%/113</td></tr><tr><td>no pre computation</td><td>11:21:11</td><td>11:43:12</td><td>59.46%</td><td>–</td></tr></tbody></table><p>总的来说速度快了: 5min/22min = 4<br>准确率差这么多？</p><h4 id="利用目前的代码实现greedy-search，with-pre-computation-1"><a href="#利用目前的代码实现greedy-search，with-pre-computation-1" class="headerlink" title="利用目前的代码实现greedy search，with pre computation"></a>利用目前的代码实现greedy search，with pre computation</h4><table><thead><tr><th><strong>epoch</strong></th><th><strong>UAS</strong></th></tr></thead><tbody><tr><td>19</td><td>88.15</td></tr></tbody></table><h4 id="中文实验数据"><a href="#中文实验数据" class="headerlink" title="中文实验数据"></a>中文实验数据</h4><p>beam_size=16, batch_size=20, threads=15, word embedding dim=50, dropout=0.2</p><h5 id="max-margin-loss"><a href="#max-margin-loss" class="headerlink" title="max margin loss:"></a>max margin loss:</h5><table><thead><tr><th><strong>epoch</strong></th><th><strong>Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>60.02</td></tr><tr><td>10</td><td>68.01</td></tr><tr><td>19</td><td>70.45</td></tr><tr><td>23</td><td>71.16</td></tr><tr><td>46</td><td>72.38</td></tr><tr><td>64</td><td>73.02</td></tr><tr><td>91</td><td>73.21</td></tr><tr><td>112</td><td>72.36/73.21</td></tr><tr><td>156</td><td>74.01</td></tr><tr><td>168</td><td>74.16</td></tr><tr><td>182</td><td>72.59/73.16</td></tr><tr><td>240</td><td>74.61</td></tr></tbody></table><p>第10次迭代所花时间：59min</p><h5 id="max-log-likelihood"><a href="#max-log-likelihood" class="headerlink" title="max log likelihood:"></a>max log likelihood:</h5><table><thead><tr><th><strong>epoch</strong></th><th><strong>Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>33.86</td></tr><tr><td>9</td><td>50.78</td></tr><tr><td>17</td><td>51.63</td></tr><tr><td>22</td><td>52.69</td></tr><tr><td>41</td><td>54.06</td></tr><tr><td>70</td><td>54.92</td></tr><tr><td>75</td><td>55.33</td></tr><tr><td>139</td><td>53.48/55.33</td></tr><tr><td>159</td><td>53.48/55.33</td></tr><tr><td>176 STOP</td><td>50.07/55.33</td></tr></tbody></table><p>第10次迭代所花时间：24min</p><h4 id="英文实验数据"><a href="#英文实验数据" class="headerlink" title="英文实验数据"></a>英文实验数据</h4><h5 id="dropout-0-2-threads-15"><a href="#dropout-0-2-threads-15" class="headerlink" title="dropout = 0.2, threads=15"></a>dropout = 0.2, threads=15</h5><table><thead><tr><th><strong>epoch</strong></th><th><strong>beam size</strong></th><th><strong>hidden layer neuron number</strong></th><th><strong>batch size</strong></th><th><strong>word embedding dim</strong></th><th><strong>Accuracy/Best Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>16</td><td>200</td><td>15</td><td>300</td><td>75.65</td></tr><tr><td>10</td><td></td><td></td><td></td><td></td><td>82.52</td></tr><tr><td>19</td><td></td><td></td><td></td><td></td><td>82.82</td></tr><tr><td>24</td><td></td><td></td><td></td><td></td><td>83.29</td></tr><tr><td>28</td><td></td><td></td><td></td><td></td><td>82.47/83.29</td></tr><tr><td>29</td><td></td><td></td><td></td><td></td><td>83.44</td></tr><tr><td>36</td><td></td><td></td><td></td><td></td><td>83.04/83.44</td></tr><tr><td>48</td><td></td><td></td><td></td><td></td><td>82.15/83.44</td></tr></tbody></table><p>第10次迭代所花时间：6h20min</p><table><thead><tr><th><strong>epoch</strong></th><th><strong>beam size</strong></th><th><strong>hidden layer neuron number</strong></th><th><strong>batch size</strong></th><th><strong>word embedding dim</strong></th><th><strong>Accuracy/Best Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>16</td><td>1024</td><td>15</td><td>300</td><td>79.05</td></tr><tr><td>6</td><td></td><td></td><td></td><td></td><td>83.39/83.45</td></tr><tr><td>7</td><td></td><td></td><td></td><td></td><td>84.49</td></tr><tr><td>9</td><td></td><td></td><td></td><td></td><td>84.80</td></tr><tr><td>10</td><td></td><td></td><td></td><td></td><td>84.87</td></tr><tr><td>12</td><td></td><td></td><td></td><td></td><td>85.59</td></tr><tr><td>15</td><td></td><td></td><td></td><td></td><td>85.89</td></tr></tbody></table><p>第9次迭代所花时间：24h…<br>第10次迭代结果还没有出来</p><p>server: 172, threads=30</p><table><thead><tr><th><strong>epoch</strong></th><th><strong>beam size</strong></th><th><strong>hidden layer neuron number</strong></th><th><strong>batch size</strong></th><th><strong>word embedding dim</strong></th><th><strong>Accuracy/Best Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>64</td><td>200</td><td>2000</td><td>50</td><td>26.67</td></tr><tr><td>20</td><td></td><td></td><td></td><td></td><td>62.53/67.77</td></tr><tr><td>32</td><td></td><td></td><td></td><td></td><td>79.53</td></tr><tr><td>38</td><td></td><td></td><td></td><td></td><td>81.48</td></tr><tr><td>51</td><td></td><td></td><td></td><td></td><td>82.52</td></tr><tr><td>58</td><td></td><td></td><td></td><td></td><td>80.87/82.52</td></tr><tr><td>60</td><td></td><td></td><td></td><td></td><td>82.53</td></tr><tr><td>68</td><td></td><td></td><td></td><td></td><td>82.73</td></tr></tbody></table><p>人为掐断<br>第10次迭代所花时间：50min</p><h5 id="google-loss"><a href="#google-loss" class="headerlink" title="google loss"></a>google loss</h5><p>dropout = 0.0， 时间：2016-10-20 07:30:22，（纯属猜测，batch设置为1试玩的）, threads=30</p><table><thead><tr><th><strong>epoch</strong></th><th><strong>beam size</strong></th><th><strong>hidden layer neuron number</strong></th><th><strong>batch size</strong></th><th><strong>word embedding dim</strong></th><th><strong>Accuracy/Best Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>16</td><td>200</td><td>1</td><td>50</td><td>54.25</td></tr><tr><td>6</td><td></td><td></td><td></td><td></td><td>63.08</td></tr><tr><td>24</td><td></td><td></td><td></td><td></td><td>67.39</td></tr><tr><td>31</td><td></td><td></td><td></td><td></td><td>67.88</td></tr><tr><td>48</td><td></td><td></td><td></td><td></td><td>61.67/67.88</td></tr><tr><td>76</td><td></td><td></td><td></td><td></td><td>58.30/67.88</td></tr><tr><td>94</td><td></td><td></td><td></td><td></td><td>59.28/67.88</td></tr><tr><td>97</td><td></td><td></td><td></td><td></td><td>68.31</td></tr><tr><td>179</td><td></td><td></td><td></td><td></td><td>53.42/68.31</td></tr></tbody></table><p>STOP<br>第10次迭代所花时间：53min</p><p>dropout = 0.2， 时间：2016-10-19 18:18:32, threads=30</p><table><thead><tr><th><strong>epoch</strong></th><th><strong>beam size</strong></th><th><strong>hidden layer neuron number</strong></th><th><strong>batch size</strong></th><th><strong>word embedding dim</strong></th><th><strong>Accuracy/Best Accuracy</strong></th></tr></thead><tbody><tr><td>1</td><td>16</td><td>200</td><td>50</td><td>50</td><td>56.79</td></tr><tr><td>64</td><td></td><td></td><td></td><td></td><td>72.45</td></tr><tr><td>78</td><td></td><td></td><td></td><td></td><td>72.67</td></tr><tr><td>111</td><td></td><td></td><td></td><td></td><td>72.78</td></tr><tr><td>168</td><td></td><td></td><td></td><td></td><td>69.69/72.78</td></tr><tr><td>212 STOP</td><td></td><td></td><td></td><td></td><td>68.18/72.78</td></tr></tbody></table><p>第10次迭代所花时间：20min</p><h3 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h3><h4 id="为什么Node的lock都是50？而不是0？"><a href="#为什么Node的lock都是50？而不是0？" class="headerlink" title="为什么Node的lock都是50？而不是0？"></a>为什么Node的lock都是50？而不是0？</h4><p>因为在函数中声明定义了PAddNode，在函数中将这个PAddNode加入到了Graph中，当函数结束的时候，PAddNode会被释放掉。<br>所以lock才会是一个乱七八糟的数字.</p><h4 id="找到了为什么精度只有0-1了"><a href="#找到了为什么精度只有0-1了" class="headerlink" title="找到了为什么精度只有0.1了"></a>找到了为什么精度只有0.1了</h4><p>因为有一段代码设置了输出的时候的precision，实际上的精度是没有问题的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">basic-features/FeatureDictionary.cpp:73:&lt;&lt; &quot;\&quot; &quot; &lt;&lt; fixed &lt;&lt; setprecision(1) &lt;&lt; endl;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;开此博客记录在开发GN3Parser(重现SyntaxNet)过程中的一些问题(已经重现成功！！！)&lt;/p&gt;
    
    </summary>
    
    
      <category term="work" scheme="http://yoursite.com/tags/work/"/>
    
      <category term="depparser" scheme="http://yoursite.com/tags/depparser/"/>
    
  </entry>
  
  <entry>
    <title>eigen学习</title>
    <link href="http://yoursite.com/2017/02/17/eigen%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/02/17/eigen学习/</id>
    <published>2017-02-17T04:32:12.000Z</published>
    <updated>2019-01-21T13:49:53.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="eigen学习"><a href="#eigen学习" class="headerlink" title="eigen学习"></a>eigen学习</h1><p>最近需要学习一下eigen,开此博客记录一些笔记有些重要的东西就直接从eigen官网copy过来了~<br><a id="more"></a></p><h3 id="The-matrix-class"><a href="#The-matrix-class" class="headerlink" title="The matrix class"></a>The matrix class</h3><p>This represents a matrix of arbitrary size (hence the X in MatrixXd), in which every entry is a double (hence the d in MatrixXd).<br>Matrix &lt; typename Scalar, int RowsAtCompileTime, int ColsAtCompileTime &gt;<br>typedef Matrix &lt; float, 3, 1 &gt; Vector3f;<br>typedef Matrix &lt; double, Dynamic, Dynamic &gt; MatrixXd;<br>All Eigen matrices default to column-major storage order.<br>rows(), cols() and size().<br>use fixed sizes for very small sizes where you can, and use dynamic sizes for larger sizes or where you have to.</p><h3 id="Matrix-and-vector-arithmetric"><a href="#Matrix-and-vector-arithmetric" class="headerlink" title="Matrix and vector arithmetric"></a>Matrix and vector arithmetric</h3><p>Therefore, the instruction a = a.transpose() does not replace a with its transpose(except multiplication)<br>the dot() and cross() methods.<br>伴随矩阵?忘了..</p><h3 id="The-Array-class-and-coefficient-wise-operations"><a href="#The-Array-class-and-coefficient-wise-operations" class="headerlink" title="The Array class and coefficient-wise operations"></a>The Array class and coefficient-wise operations</h3><p>The Array class provides general-purpose arrays.<br>Furthermore, the Array class provides an easy way to perform coefficient-wise operations.<br>Array &lt; typename Scalar, int RowsAtCompileTime, int ColsAtCompileTime &gt;<br>For element-wise product?</p><h4 id="Converting-between-array-and-matrix-expressions"><a href="#Converting-between-array-and-matrix-expressions" class="headerlink" title="Converting between array and matrix expressions"></a>Converting between array and matrix expressions</h4><p>Matrix expressions have an .array() method that ‘converts’ them into array expressions.<br>Array expressions have a .matrix() method<br>Array: <font color="red">coefficient wise</font></p><h3 id="Block-operations"><a href="#Block-operations" class="headerlink" title="Block operations"></a>Block operations</h3><p>Individual columns and rows are special cases of blocks. Eigen provides methods to easily address them: .col() and .row().</p><h3 id="Advanced-initialization"><a href="#Advanced-initialization" class="headerlink" title="Advanced initialization"></a>Advanced initialization</h3><p>The finished() method is necessary here to get the actual matrix object once the comma initialization of our temporary submatrix is done.</p><h3 id="Reductions-visitors-and-broadcasting"><a href="#Reductions-visitors-and-broadcasting" class="headerlink" title="Reductions, visitors and broadcasting"></a>Reductions, visitors and broadcasting</h3><p>Norm computations?<br>Partial reductions are applied with colwise() or rowwise() .<br>The concept behind broadcasting is similar to partial reduction.</p><h3 id="Interfacing-with-raw-buffers-the-Map-class"><a href="#Interfacing-with-raw-buffers-the-Map-class" class="headerlink" title="Interfacing with raw buffers: the Map class"></a>Interfacing with raw buffers: the Map class</h3><p>You can use a Map object just like any other Eigen type:</p><h3 id="Reshape-and-Slicing"><a href="#Reshape-and-Slicing" class="headerlink" title="Reshape and Slicing"></a>Reshape and Slicing</h3><h3 id="Aliasing"><a href="#Aliasing" class="headerlink" title="Aliasing"></a>Aliasing</h3><p>Aliasing occurs more naturally when trying to shrink a matrix<br>a = a.transpose(); // !!! do NOT do this !!!<br>mat.bottomRightCorner(2,2) = mat.topLeftCorner(2,2).eval();<br>Eigen provides the special-purpose function transposeInPlace() which replaces a matrix by its transpose.<br>If an xxxInPlace() function is available, then it is best to use it, because it indicates more clearly what you are doing.<br>Thus, if matA is a squared matrix, then the statement matA = matA * matA;<br>Aliasing occurs when the same matrix or array coefficients appear both on the left- and the right-hand side of an assignment operator.</p><h3 id="Storage-orders"><a href="#Storage-orders" class="headerlink" title="Storage orders"></a>Storage orders</h3><p>If the storage order is not specified, then Eigen defaults to storing the entry in column-major.</p><h2 id="Dense-linear-problems-and-decompositions"><a href="#Dense-linear-problems-and-decompositions" class="headerlink" title="Dense linear problems and decompositions"></a>Dense linear problems and decompositions</h2><h3 id="Linear-algebra-and-decompositions"><a href="#Linear-algebra-and-decompositions" class="headerlink" title="Linear algebra and decompositions"></a>Linear algebra and decompositions</h3><p>可以求解矩阵运算<br>(中间跳过了几个章节)</p><h3 id="Sparse-matrix-manipulations"><a href="#Sparse-matrix-manipulations" class="headerlink" title="Sparse matrix manipulations"></a>Sparse matrix manipulations</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;eigen学习&quot;&gt;&lt;a href=&quot;#eigen学习&quot; class=&quot;headerlink&quot; title=&quot;eigen学习&quot;&gt;&lt;/a&gt;eigen学习&lt;/h1&gt;&lt;p&gt;最近需要学习一下eigen,开此博客记录一些笔记有些重要的东西就直接从eigen官网copy过来了~&lt;br&gt;
    
    </summary>
    
    
      <category term="eigen" scheme="http://yoursite.com/tags/eigen/"/>
    
  </entry>
  
  <entry>
    <title>span-parser</title>
    <link href="http://yoursite.com/2016/11/15/span-parser/"/>
    <id>http://yoursite.com/2016/11/15/span-parser/</id>
    <published>2016-11-15T12:37:01.000Z</published>
    <updated>2019-01-21T13:49:53.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="span-parser"><a href="#span-parser" class="headerlink" title="span parser"></a>span parser</h1><h2 id="span-parser-源码剖析"><a href="#span-parser-源码剖析" class="headerlink" title="span parser 源码剖析"></a>span parser 源码剖析</h2><p>最近在学习基于转移的句法分析，学习span parser，着重学习pycnn的使用。<br><a id="more"></a><br>LSTM类：<br>    初始化一个LSTM类，仅仅初始化参数，并没有具体实现相关的具体算法。<br>State类：<br>    包含一个LSTM单元，并且实现了网络的计算过程。</p><p>struct data: ?<br>label data: ?</p><p>PharseTree类：<br>    _parse函数，解析一句话Tree<br>    将line -&gt; tree<br>Parser.py<br>    gold_actions(tree): 得到tree的gold actions</p><h3 id="parser的一些参数设置"><a href="#parser的一些参数设置" class="headerlink" title="parser的一些参数设置"></a>parser的一些参数设置</h3><p>word dim: 50 tag dim: 20<br>lstm units: 200<br>hidden units: 200<br>batch: 10<br>dropout: 0.5<br>unknow param: 0.8375?<br>alpha: 1.0</p><h3 id="pycnn的使用细节"><a href="#pycnn的使用细节" class="headerlink" title="pycnn的使用细节"></a>pycnn的使用细节</h3><blockquote><ul><li>model.add_parameters(…)</li><li>parameters.load_array(np.random.uniform(-0.01, 0.01, self.W_i.shape()))</li><li>pycnn.logistic(self.W_i * x + self.b_i)</li><li>g = pycnn.tanh(self.W_c * x + self.b_c)</li><li>c = pycnn.cwise_multiply(f, self.c) + pycnn.cwise_multiply(i, g)</li><li>pycnn.AdadeltaTrainer(self.model, lam=0, eps=1e-7, rho=0.99)</li><li>model.add_lookup_parameters(‘word-embed’, (word_count, word_dims))</li><li>model[‘word-embed’].init_from_array(np.random.uniform(-0.01, 0.01, self.model[‘word-embed’].shape()),)</li><li>activation = pycnn.rectify</li><li>W1_struct = pycnn.parameter(self.model[‘struct-hidden-W’])</li></ul></blockquote><blockquote><ul><li>wordvec = pycnn.lookup(self.model[‘word-embed’], w)</li><li>vec = pycnn.dropout(vec, self.droprate)</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;span-parser&quot;&gt;&lt;a href=&quot;#span-parser&quot; class=&quot;headerlink&quot; title=&quot;span parser&quot;&gt;&lt;/a&gt;span parser&lt;/h1&gt;&lt;h2 id=&quot;span-parser-源码剖析&quot;&gt;&lt;a href=&quot;#span-parser-源码剖析&quot; class=&quot;headerlink&quot; title=&quot;span parser 源码剖析&quot;&gt;&lt;/a&gt;span parser 源码剖析&lt;/h2&gt;&lt;p&gt;最近在学习基于转移的句法分析，学习span parser，着重学习pycnn的使用。&lt;br&gt;
    
    </summary>
    
    
      <category term="work" scheme="http://yoursite.com/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>hlt-la demo性能测试</title>
    <link href="http://yoursite.com/2016/09/27/demo%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2016/09/27/demo性能测试/</id>
    <published>2016-09-27T09:49:52.000Z</published>
    <updated>2019-01-21T13:49:53.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在CTB7-test数据上，单独测试分词和词性的准确率和速度（不是调用demo的web-service），分词模型没有加入词典（CTB7-PD），词性（CTB7-PD）"><a href="#在CTB7-test数据上，单独测试分词和词性的准确率和速度（不是调用demo的web-service），分词模型没有加入词典（CTB7-PD），词性（CTB7-PD）" class="headerlink" title="在CTB7-test数据上，单独测试分词和词性的准确率和速度（不是调用demo的web service），分词模型没有加入词典（CTB7+PD），词性（CTB7+PD）"></a>在CTB7-test数据上，单独测试分词和词性的准确率和速度（不是调用demo的web service），分词模型没有加入词典（CTB7+PD），词性（CTB7+PD）</h1><a id="more"></a><h2 id="pos-demo性能测试，假设分词正确"><a href="#pos-demo性能测试，假设分词正确" class="headerlink" title="pos demo性能测试，假设分词正确"></a>pos demo性能测试，假设分词正确</h2><table><thead><tr><th><strong>Accuracy</strong></th><th><strong>sentence/s</strong></th><th><strong>memory</strong></th></tr></thead><tbody><tr><td>94.78</td><td>48</td><td>1.1g</td></tr></tbody></table><h2 id="ws-demo性能测试"><a href="#ws-demo性能测试" class="headerlink" title="ws demo性能测试"></a>ws demo性能测试</h2><p>测试数据，CTB7 test数据</p><table><thead><tr><th><strong>P</strong></th><th><strong>R</strong></th><th><strong>F</strong></th><th><strong>sentence/s</strong></th><th><strong>memory</strong></th></tr></thead><tbody><tr><td>95.89</td><td>95.41</td><td>95.65</td><td>103</td><td>1.2g</td></tr></tbody></table><h3 id="ctb7-pku"><a href="#ctb7-pku" class="headerlink" title="ctb7+pku"></a>ctb7+pku</h3><p>POS Precision:          97168/100316 = 96.86192<br>qrxia@m173 ~/CRF-demo/src-v2/crf-ws-src-qrxia/example-ctb7-convertedPD-wspos</p><h3 id="ctb7-pku-lexicon-（2016-10-11：我们将Demo的分词模块更新为with-lexicon）"><a href="#ctb7-pku-lexicon-（2016-10-11：我们将Demo的分词模块更新为with-lexicon）" class="headerlink" title="ctb7+pku+lexicon （2016.10.11：我们将Demo的分词模块更新为with-lexicon）"></a>ctb7+pku+lexicon （2016.10.11：我们将Demo的分词模块更新为with-lexicon）</h3><p>POS Precision:          97329/100316 = 97.02241<br>qrxia@amax:~/NLPCC2016/ws-tagger/lexicon+ctb7+pd</p><h2 id="hlt-la-demo性能分析，调用web-service-测试数据CTB8-（discussion-forum数据，长度为6-13的短句，平均每句10词"><a href="#hlt-la-demo性能分析，调用web-service-测试数据CTB8-（discussion-forum数据，长度为6-13的短句，平均每句10词" class="headerlink" title="hlt-la demo性能分析，调用web service-测试数据CTB8 （discussion forum数据，长度为6-13的短句，平均每句10词)"></a>hlt-la demo性能分析，调用web service-测试数据CTB8 （discussion forum数据，长度为6-13的短句，平均每句10词)</h2><h3 id="分词的PRF，整个分词词性句法分析的速度"><a href="#分词的PRF，整个分词词性句法分析的速度" class="headerlink" title="分词的PRF，整个分词词性句法分析的速度"></a>分词的PRF，整个分词词性句法分析的速度</h3><p>开始时间: 2016-10-10 11:17:46.864316<br>结束时间: 2016-10-10 11:19:32.217073<br>句子总数: 1917<br>性能（?ms/句话）: 55.3ms/句话</p><table><thead><tr><th><strong>P</strong></th><th><strong>R</strong></th><th><strong>F</strong></th></tr></thead><tbody><tr><td>91.91</td><td>92.80</td><td>92.35</td></tr></tbody></table><h3 id="demo输入时已经分好词（通过标记），测试词性、句法的准确率"><a href="#demo输入时已经分好词（通过标记），测试词性、句法的准确率" class="headerlink" title="demo输入时已经分好词（通过标记），测试词性、句法的准确率"></a>demo输入时已经分好词（通过标记），测试<strong>词性、句法</strong>的准确率</h3><p>开始时间: 2016-10-10 11:52:36.150082<br>结束时间: 2016-10-10 11:54:20.475896<br>句子总数: 1917<br>性能(?ms/句子): 55.3ms/句子</p><h4 id="词性pos准确率"><a href="#词性pos准确率" class="headerlink" title="词性pos准确率"></a>词性pos准确率</h4><p>Accurcy: 91.83%</p><h4 id="没有标点"><a href="#没有标点" class="headerlink" title="没有标点"></a>没有标点</h4><table><thead><tr><th><strong>LAS</strong></th><th><strong>UAS</strong></th></tr></thead><tbody><tr><td>73.08%</td><td>79.44%</td></tr></tbody></table><h4 id="有标点-p"><a href="#有标点-p" class="headerlink" title="有标点 -p"></a>有标点 -p</h4><table><thead><tr><th><strong>LAS</strong></th><th><strong>UAS</strong></th></tr></thead><tbody><tr><td>71.86%</td><td>77.57%</td></tr></tbody></table><h2 id="测试文件的位置"><a href="#测试文件的位置" class="headerlink" title="测试文件的位置"></a>测试文件的位置</h2><p>qrxia@m173 ~/demo_effectiveness/</p><h2 id="hlt-la-demo性能分析，调用web-service-测试数据CTB7-（dev-test中长度为6-13的短句，且不是news来源，平均每句10词"><a href="#hlt-la-demo性能分析，调用web-service-测试数据CTB7-（dev-test中长度为6-13的短句，且不是news来源，平均每句10词" class="headerlink" title="hlt-la demo性能分析，调用web service-测试数据CTB7 （dev/test中长度为6-13的短句，且不是news来源，平均每句10词)"></a>hlt-la demo性能分析，调用web service-测试数据CTB7 （dev/test中长度为6-13的短句，且不是news来源，平均每句10词)</h2><h3 id="分词的PRF，整个分词词性句法分析的速度-1"><a href="#分词的PRF，整个分词词性句法分析的速度-1" class="headerlink" title="分词的PRF，整个分词词性句法分析的速度"></a>分词的PRF，整个分词词性句法分析的速度</h3><p>开始时间: 2016-10-11 14:08:17.601440<br>结束时间: 2016-10-11 14:08:39.247280<br>句子总数: 341<br>性能(?ms/句话): 64.5ms/s</p><table><thead><tr><th><strong>P</strong></th><th><strong>R</strong></th><th><strong>F</strong></th></tr></thead><tbody><tr><td>94.68</td><td>94.12</td><td>94.40</td></tr></tbody></table><h3 id="demo输入时已经分好词（通过标记），测试词性、句法的准确率-1"><a href="#demo输入时已经分好词（通过标记），测试词性、句法的准确率-1" class="headerlink" title="demo输入时已经分好词（通过标记），测试词性、句法的准确率"></a>demo输入时已经分好词（通过标记），测试<strong>词性、句法</strong>的准确率</h3><p>开始时间: 2016-10-11 14:22:07.050952<br>结束时间: 2016-10-11 14:22:25.648053<br>句子总数: 341<br>性能(?ms/句话): 52.8ms/句话</p><h4 id="没有标点-1"><a href="#没有标点-1" class="headerlink" title="没有标点"></a>没有标点</h4><table><thead><tr><th><strong>LAS</strong></th><th><strong>UAS</strong></th></tr></thead><tbody><tr><td>83.23%</td><td>87.92%</td></tr></tbody></table><h4 id="有标点-p-1"><a href="#有标点-p-1" class="headerlink" title="有标点 -p"></a>有标点 -p</h4><table><thead><tr><th><strong>LAS</strong></th><th><strong>UAS</strong></th></tr></thead><tbody><tr><td>83.41%</td><td>87.36%</td></tr></tbody></table><h4 id="词性pos准确率-1"><a href="#词性pos准确率-1" class="headerlink" title="词性pos准确率"></a>词性pos准确率</h4><p>Accuracy: 95.10%</p><h2 id="测试文件的位置-1"><a href="#测试文件的位置-1" class="headerlink" title="测试文件的位置"></a>测试文件的位置</h2><p>qrxia@m172 ~/demo_effectiveness/ctb7-dev-test</p><h2 id="hlt-la-demo性能分析（demo的分词更新为with-lexicon），调用web-service-测试数据CTB7-（dev-test中长度为6-13的短句，且不是news来源，平均每句10词"><a href="#hlt-la-demo性能分析（demo的分词更新为with-lexicon），调用web-service-测试数据CTB7-（dev-test中长度为6-13的短句，且不是news来源，平均每句10词" class="headerlink" title="hlt-la demo性能分析（demo的分词更新为with-lexicon），调用web service-测试数据CTB7 （dev/test中长度为6-13的短句，且不是news来源，平均每句10词)"></a>hlt-la demo性能分析（demo的分词更新为with-lexicon），调用web service-测试数据CTB7 （dev/test中长度为6-13的短句，且不是news来源，平均每句10词)</h2><h3 id="分词的PRF，整个分词词性句法分析的速度-2"><a href="#分词的PRF，整个分词词性句法分析的速度-2" class="headerlink" title="分词的PRF，整个分词词性句法分析的速度"></a>分词的PRF，整个分词词性句法分析的速度</h3><p>开始时间: 2016-10-11 15:30:08.736054<br>结束时间: 2016-10-11 15:30:34.079522<br>句子总数: 341<br>性能(?ms/句话): 76ms/s</p><table><thead><tr><th><strong>P</strong></th><th><strong>R</strong></th><th><strong>F</strong></th></tr></thead><tbody><tr><td>95.05</td><td>94.72</td><td>94.89</td></tr></tbody></table><h2 id="测试文件的位置-2"><a href="#测试文件的位置-2" class="headerlink" title="测试文件的位置"></a>测试文件的位置</h2><p>qrxia@m172 ~/demo_effectiveness/ctb7-dev-test-demo-ws-w-lexicon/</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在CTB7-test数据上，单独测试分词和词性的准确率和速度（不是调用demo的web-service），分词模型没有加入词典（CTB7-PD），词性（CTB7-PD）&quot;&gt;&lt;a href=&quot;#在CTB7-test数据上，单独测试分词和词性的准确率和速度（不是调用demo的web-service），分词模型没有加入词典（CTB7-PD），词性（CTB7-PD）&quot; class=&quot;headerlink&quot; title=&quot;在CTB7-test数据上，单独测试分词和词性的准确率和速度（不是调用demo的web service），分词模型没有加入词典（CTB7+PD），词性（CTB7+PD）&quot;&gt;&lt;/a&gt;在CTB7-test数据上，单独测试分词和词性的准确率和速度（不是调用demo的web service），分词模型没有加入词典（CTB7+PD），词性（CTB7+PD）&lt;/h1&gt;
    
    </summary>
    
    
      <category term="work" scheme="http://yoursite.com/tags/work/"/>
    
  </entry>
  
</feed>
